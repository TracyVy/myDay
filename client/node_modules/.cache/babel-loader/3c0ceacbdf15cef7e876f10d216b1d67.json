{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiScheduler = require(\"./ui.scheduler.work_space\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nvar _component_registrator = require(\"../../../core/component_registrator\");\n\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\n\nvar _date = require(\"../../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _extend = require(\"../../../core/utils/extend\");\n\nvar _position = require(\"../../../core/utils/position\");\n\nvar _window = require(\"../../../core/utils/window\");\n\nvar _window2 = _interopRequireDefault(_window);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar toMs = _date2.default.dateToMilliseconds;\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\nvar HEADER_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-header-panel-current-time-cell\";\n\nvar SchedulerWorkSpaceIndicator = _uiScheduler2.default.inherit({\n  _getToday: function _getToday() {\n    var date = this.option(\"indicatorTime\") || new Date();\n    return this.invoke(\"convertDateByTimezone\", date) || date;\n  },\n  _needRenderDateTimeIndicator: function _needRenderDateTimeIndicator() {\n    var today = this._getToday();\n\n    var endViewDate = _date2.default.trimTime(this.getEndViewDate());\n\n    return _date2.default.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs(\"day\")));\n  },\n  needRenderDateTimeIndication: function needRenderDateTimeIndication() {\n    if (!_window2.default.hasWindow()) {\n      return false;\n    }\n\n    var today = this._getToday();\n\n    return today >= _date2.default.trimTime(new Date(this.getStartViewDate()));\n  },\n  _renderDateTimeIndication: function _renderDateTimeIndication() {\n    if (this.needRenderDateTimeIndication()) {\n      if (this.option(\"shadeUntilCurrentTime\")) {\n        this._shader.render();\n      }\n\n      if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n        var groupCount = this._getGroupCount() || 1;\n\n        var $container = this._dateTableScrollable.$content();\n\n        var height = this.getIndicationHeight();\n\n        var rtlOffset = this._getRtlOffset(this.getCellWidth());\n\n        if (height > 0) {\n          this._renderIndicator(height, rtlOffset, $container, groupCount);\n        }\n      }\n    }\n  },\n  _renderIndicator: function _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var groupedByDate = this.isGroupedByDate();\n    var repeatCount = groupedByDate ? 1 : groupCount;\n\n    for (var i = 0; i < repeatCount; i++) {\n      var $indicator = this._createIndicator($container);\n\n      $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\n\n      this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i);\n    }\n  },\n  _createIndicator: function _createIndicator($container) {\n    var $indicator = (0, _renderer2.default)(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\n    $container.append($indicator);\n    return $indicator;\n  },\n  _getRtlOffset: function _getRtlOffset(width) {\n    return this.option(\"rtlEnabled\") ? (0, _position.getBoundingRect)(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0;\n  },\n  _setIndicationUpdateInterval: function _setIndicationUpdateInterval() {\n    if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\n      return;\n    }\n\n    this._clearIndicatorUpdateInterval();\n\n    this._indicatorInterval = setInterval(function () {\n      this._refreshDateTimeIndication();\n    }.bind(this), this.option(\"indicatorUpdateInterval\"));\n  },\n  _clearIndicatorUpdateInterval: function _clearIndicatorUpdateInterval() {\n    if (this._indicatorInterval) {\n      clearInterval(this._indicatorInterval);\n      delete this._indicatorInterval;\n    }\n  },\n  _isVerticalShader: function _isVerticalShader() {\n    return true;\n  },\n  getIndicationWidth: function getIndicationWidth(groupIndex) {\n    var maxWidth = this.getCellWidth() * this._getCellCount();\n\n    var difference = this._getIndicatorDuration();\n\n    if (difference > this._getCellCount()) {\n      difference = this._getCellCount();\n    }\n\n    var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return maxWidth < width ? maxWidth : width;\n  },\n  getIndicatorOffset: function getIndicatorOffset(groupIndex) {\n    var difference = this._getIndicatorDuration() - 1;\n    var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return offset;\n  },\n  _getIndicatorDuration: function _getIndicatorDuration() {\n    var today = this._getToday();\n\n    var firstViewDate = new Date(this._firstViewDate);\n    var timeDiff = today.getTime() - firstViewDate.getTime();\n\n    if (\"workWeek\" === this.option(\"type\")) {\n      timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\");\n    }\n\n    return Math.ceil((timeDiff + 1) / toMs(\"day\"));\n  },\n  getIndicationHeight: function getIndicationHeight() {\n    var today = this._getToday();\n\n    var cellHeight = this.getCellHeight();\n    var date = new Date(this._firstViewDate);\n\n    if (this._needRenderDateTimeIndicator()) {\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    }\n\n    var duration = today.getTime() - date.getTime();\n    var cellCount = duration / this.getCellDuration();\n    return cellCount * cellHeight;\n  },\n  _dispose: function _dispose() {\n    this._clearIndicatorUpdateInterval();\n\n    this.callBase.apply(this, arguments);\n  },\n  _refreshDateTimeIndication: function _refreshDateTimeIndication() {\n    this._cleanDateTimeIndicator();\n\n    this._shader && this._shader.clean();\n\n    this._renderDateTimeIndication();\n  },\n  _isCurrentTime: function _isCurrentTime(date) {\n    if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n      var today = this._getToday();\n\n      var result = false;\n      date = new Date(date);\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n      var startCellDate = new Date(date);\n      var endCellDate = new Date(date);\n\n      if (_date2.default.sameDate(today, date)) {\n        startCellDate = startCellDate.setMilliseconds(date.getMilliseconds() - this.getCellDuration() + 1);\n        endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());\n        result = _date2.default.dateInRange(today, startCellDate, endCellDate);\n      }\n\n      return result;\n    }\n  },\n  _isCurrentTimeHeaderCell: function _isCurrentTimeHeaderCell(headerIndex) {\n    var result = false;\n\n    if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\n      var date = this._getDateByIndex(headerIndex);\n\n      var now = this.option(\"indicatorTime\") || new Date();\n      result = _date2.default.sameDate(date, now);\n    }\n\n    return result;\n  },\n  _getTimeCellClass: function _getTimeCellClass(i) {\n    var startViewDate = this._getTimeCellDate(i);\n\n    var cellClass = this.callBase(i);\n\n    if (this._isCurrentTime(startViewDate)) {\n      return cellClass + \" \" + TIME_PANEL_CURRENT_TIME_CELL_CLASS;\n    }\n\n    return cellClass;\n  },\n  _getHeaderPanelCellClass: function _getHeaderPanelCellClass(i) {\n    var cellClass = this.callBase(i);\n\n    if (this._isCurrentTimeHeaderCell(i)) {\n      return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS;\n    }\n\n    return cellClass;\n  },\n  _cleanView: function _cleanView() {\n    this.callBase();\n\n    this._cleanDateTimeIndicator();\n  },\n  _dimensionChanged: function _dimensionChanged() {\n    this.callBase();\n\n    this._refreshDateTimeIndication();\n  },\n  _cleanDateTimeIndicator: function _cleanDateTimeIndicator() {\n    this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove();\n  },\n  _cleanWorkSpace: function _cleanWorkSpace() {\n    this.callBase();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  },\n  _optionChanged: function _optionChanged(args) {\n    switch (args.name) {\n      case \"showCurrentTimeIndicator\":\n      case \"indicatorTime\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"indicatorUpdateInterval\":\n        this._setIndicationUpdateInterval();\n\n        break;\n\n      case \"showAllDayPanel\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"allDayExpanded\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"crossScrollingEnabled\":\n        this.callBase(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"shadeUntilCurrentTime\":\n        this._refreshDateTimeIndication();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getDefaultOptions: function _getDefaultOptions() {\n    return (0, _extend.extend)(this.callBase(), {\n      showCurrentTimeIndicator: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true\n    });\n  }\n});\n\n(0, _component_registrator2.default)(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\nmodule.exports = SchedulerWorkSpaceIndicator;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_uiScheduler","_uiScheduler2","_component_registrator","_component_registrator2","_date","_date2","_extend","_position","_window","_window2","obj","__esModule","toMs","default","dateToMilliseconds","SCHEDULER_DATE_TIME_INDICATOR_CLASS","TIME_PANEL_CURRENT_TIME_CELL_CLASS","HEADER_CURRENT_TIME_CELL_CLASS","SchedulerWorkSpaceIndicator","inherit","_getToday","date","option","Date","invoke","_needRenderDateTimeIndicator","today","endViewDate","trimTime","getEndViewDate","dateInRange","_firstViewDate","getTime","needRenderDateTimeIndication","hasWindow","getStartViewDate","_renderDateTimeIndication","_shader","render","groupCount","_getGroupCount","$container","_dateTableScrollable","$content","height","getIndicationHeight","rtlOffset","_getRtlOffset","getCellWidth","_renderIndicator","groupedByDate","isGroupedByDate","repeatCount","i","$indicator","_createIndicator","width","_groupedStrategy","shiftIndicator","addClass","append","getBoundingRect","get","getTimePanelWidth","_setIndicationUpdateInterval","_clearIndicatorUpdateInterval","_indicatorInterval","setInterval","_refreshDateTimeIndication","bind","clearInterval","_isVerticalShader","getIndicationWidth","groupIndex","maxWidth","_getCellCount","difference","_getIndicatorDuration","getRoundedCellWidth","getIndicatorOffset","offset","firstViewDate","timeDiff","_getWeekendsCount","Math","round","ceil","cellHeight","getCellHeight","setFullYear","getFullYear","getMonth","getDate","duration","cellCount","getCellDuration","_dispose","callBase","apply","arguments","_cleanDateTimeIndicator","clean","_isCurrentTime","result","startCellDate","endCellDate","sameDate","setMilliseconds","getMilliseconds","_isCurrentTimeHeaderCell","headerIndex","_getDateByIndex","now","_getTimeCellClass","startViewDate","_getTimeCellDate","cellClass","_getHeaderPanelCellClass","_cleanView","_dimensionChanged","$element","find","remove","_cleanWorkSpace","_optionChanged","args","name","_getDefaultOptions","extend","showCurrentTimeIndicator","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _uiScheduler = require(\"./ui.scheduler.work_space\");\r\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\r\nvar _component_registrator = require(\"../../../core/component_registrator\");\r\nvar _component_registrator2 = _interopRequireDefault(_component_registrator);\r\nvar _date = require(\"../../../core/utils/date\");\r\nvar _date2 = _interopRequireDefault(_date);\r\nvar _extend = require(\"../../../core/utils/extend\");\r\nvar _position = require(\"../../../core/utils/position\");\r\nvar _window = require(\"../../../core/utils/window\");\r\nvar _window2 = _interopRequireDefault(_window);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar toMs = _date2.default.dateToMilliseconds;\r\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\r\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\r\nvar HEADER_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-header-panel-current-time-cell\";\r\nvar SchedulerWorkSpaceIndicator = _uiScheduler2.default.inherit({\r\n    _getToday: function() {\r\n        var date = this.option(\"indicatorTime\") || new Date;\r\n        return this.invoke(\"convertDateByTimezone\", date) || date\r\n    },\r\n    _needRenderDateTimeIndicator: function() {\r\n        var today = this._getToday();\r\n        var endViewDate = _date2.default.trimTime(this.getEndViewDate());\r\n        return _date2.default.dateInRange(today, this._firstViewDate, new Date(endViewDate.getTime() + toMs(\"day\")))\r\n    },\r\n    needRenderDateTimeIndication: function() {\r\n        if (!_window2.default.hasWindow()) {\r\n            return false\r\n        }\r\n        var today = this._getToday();\r\n        return today >= _date2.default.trimTime(new Date(this.getStartViewDate()))\r\n    },\r\n    _renderDateTimeIndication: function() {\r\n        if (this.needRenderDateTimeIndication()) {\r\n            if (this.option(\"shadeUntilCurrentTime\")) {\r\n                this._shader.render()\r\n            }\r\n            if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\r\n                var groupCount = this._getGroupCount() || 1;\r\n                var $container = this._dateTableScrollable.$content();\r\n                var height = this.getIndicationHeight();\r\n                var rtlOffset = this._getRtlOffset(this.getCellWidth());\r\n                if (height > 0) {\r\n                    this._renderIndicator(height, rtlOffset, $container, groupCount)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _renderIndicator: function(height, rtlOffset, $container, groupCount) {\r\n        var groupedByDate = this.isGroupedByDate();\r\n        var repeatCount = groupedByDate ? 1 : groupCount;\r\n        for (var i = 0; i < repeatCount; i++) {\r\n            var $indicator = this._createIndicator($container);\r\n            $indicator.width(groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\r\n            this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i)\r\n        }\r\n    },\r\n    _createIndicator: function($container) {\r\n        var $indicator = (0, _renderer2.default)(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\r\n        $container.append($indicator);\r\n        return $indicator\r\n    },\r\n    _getRtlOffset: function(width) {\r\n        return this.option(\"rtlEnabled\") ? (0, _position.getBoundingRect)(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0\r\n    },\r\n    _setIndicationUpdateInterval: function() {\r\n        if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\r\n            return\r\n        }\r\n        this._clearIndicatorUpdateInterval();\r\n        this._indicatorInterval = setInterval(function() {\r\n            this._refreshDateTimeIndication()\r\n        }.bind(this), this.option(\"indicatorUpdateInterval\"))\r\n    },\r\n    _clearIndicatorUpdateInterval: function() {\r\n        if (this._indicatorInterval) {\r\n            clearInterval(this._indicatorInterval);\r\n            delete this._indicatorInterval\r\n        }\r\n    },\r\n    _isVerticalShader: function() {\r\n        return true\r\n    },\r\n    getIndicationWidth: function(groupIndex) {\r\n        var maxWidth = this.getCellWidth() * this._getCellCount();\r\n        var difference = this._getIndicatorDuration();\r\n        if (difference > this._getCellCount()) {\r\n            difference = this._getCellCount()\r\n        }\r\n        var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return maxWidth < width ? maxWidth : width\r\n    },\r\n    getIndicatorOffset: function(groupIndex) {\r\n        var difference = this._getIndicatorDuration() - 1;\r\n        var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return offset\r\n    },\r\n    _getIndicatorDuration: function() {\r\n        var today = this._getToday();\r\n        var firstViewDate = new Date(this._firstViewDate);\r\n        var timeDiff = today.getTime() - firstViewDate.getTime();\r\n        if (\"workWeek\" === this.option(\"type\")) {\r\n            timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\")\r\n        }\r\n        return Math.ceil((timeDiff + 1) / toMs(\"day\"))\r\n    },\r\n    getIndicationHeight: function() {\r\n        var today = this._getToday();\r\n        var cellHeight = this.getCellHeight();\r\n        var date = new Date(this._firstViewDate);\r\n        if (this._needRenderDateTimeIndicator()) {\r\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())\r\n        }\r\n        var duration = today.getTime() - date.getTime();\r\n        var cellCount = duration / this.getCellDuration();\r\n        return cellCount * cellHeight\r\n    },\r\n    _dispose: function() {\r\n        this._clearIndicatorUpdateInterval();\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _refreshDateTimeIndication: function() {\r\n        this._cleanDateTimeIndicator();\r\n        this._shader && this._shader.clean();\r\n        this._renderDateTimeIndication()\r\n    },\r\n    _isCurrentTime: function(date) {\r\n        if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\r\n            var today = this._getToday();\r\n            var result = false;\r\n            date = new Date(date);\r\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n            var startCellDate = new Date(date);\r\n            var endCellDate = new Date(date);\r\n            if (_date2.default.sameDate(today, date)) {\r\n                startCellDate = startCellDate.setMilliseconds(date.getMilliseconds() - this.getCellDuration() + 1);\r\n                endCellDate = endCellDate.setMilliseconds(date.getMilliseconds() + this.getCellDuration());\r\n                result = _date2.default.dateInRange(today, startCellDate, endCellDate)\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    _isCurrentTimeHeaderCell: function(headerIndex) {\r\n        var result = false;\r\n        if (this.option(\"showCurrentTimeIndicator\") && this._needRenderDateTimeIndicator()) {\r\n            var date = this._getDateByIndex(headerIndex);\r\n            var now = this.option(\"indicatorTime\") || new Date;\r\n            result = _date2.default.sameDate(date, now)\r\n        }\r\n        return result\r\n    },\r\n    _getTimeCellClass: function(i) {\r\n        var startViewDate = this._getTimeCellDate(i);\r\n        var cellClass = this.callBase(i);\r\n        if (this._isCurrentTime(startViewDate)) {\r\n            return cellClass + \" \" + TIME_PANEL_CURRENT_TIME_CELL_CLASS\r\n        }\r\n        return cellClass\r\n    },\r\n    _getHeaderPanelCellClass: function(i) {\r\n        var cellClass = this.callBase(i);\r\n        if (this._isCurrentTimeHeaderCell(i)) {\r\n            return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS\r\n        }\r\n        return cellClass\r\n    },\r\n    _cleanView: function() {\r\n        this.callBase();\r\n        this._cleanDateTimeIndicator()\r\n    },\r\n    _dimensionChanged: function() {\r\n        this.callBase();\r\n        this._refreshDateTimeIndication()\r\n    },\r\n    _cleanDateTimeIndicator: function() {\r\n        this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove()\r\n    },\r\n    _cleanWorkSpace: function() {\r\n        this.callBase();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"showCurrentTimeIndicator\":\r\n            case \"indicatorTime\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"indicatorUpdateInterval\":\r\n                this._setIndicationUpdateInterval();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n                this.callBase(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"allDayExpanded\":\r\n                this.callBase(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"crossScrollingEnabled\":\r\n                this.callBase(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"shadeUntilCurrentTime\":\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return (0, _extend.extend)(this.callBase(), {\r\n            showCurrentTimeIndicator: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true\r\n        })\r\n    }\r\n});\r\n(0, _component_registrator2.default)(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\r\nmodule.exports = SchedulerWorkSpaceIndicator;\r\n"]},"metadata":{},"sourceType":"script"}