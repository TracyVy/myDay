{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar $ = require(\"../../../core/renderer\");\n\nvar noop = require(\"../../../core/utils/common\").noop;\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\n\nvar dateUtils = require(\"../../../core/utils/date\");\n\nvar getBoundingRect = require(\"../../../core/utils/position\").getBoundingRect;\n\nvar dateLocalization = require(\"../../../localization/date\");\n\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\nvar DAYS_IN_WEEK = 7;\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerWorkSpaceMonth = SchedulerWorkSpace.inherit({\n  _toggleFixedScrollableClass: function _toggleFixedScrollableClass() {\n    this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace());\n  },\n  _getElementClass: function _getElementClass() {\n    return MONTH_CLASS;\n  },\n  _getRowCount: function _getRowCount() {\n    return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6;\n  },\n  _getCellCount: function _getCellCount() {\n    return DAYS_IN_WEEK;\n  },\n  _getDateByIndex: function _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  },\n  _getFormat: function _getFormat() {\n    return this._formatWeekday;\n  },\n  _calculateCellIndex: function _calculateCellIndex(rowIndex, cellIndex) {\n    if (this._isVerticalGroupedWorkSpace()) {\n      rowIndex %= this._getRowCount();\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    return rowIndex * this._getCellCount() + cellIndex;\n  },\n  _getInterval: function _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  },\n  _getIntervalBetween: function _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  },\n  _getDateByCellIndexes: function _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = this.callBase(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  },\n  getCellWidth: function getCellWidth() {\n    var DAYS_IN_WEEK = 7;\n    var averageWidth = 0;\n\n    this._getCells().slice(0, DAYS_IN_WEEK).each(function (index, element) {\n      return averageWidth += getBoundingRect(element).width;\n    });\n\n    return averageWidth / DAYS_IN_WEEK;\n  },\n  _calculateHiddenInterval: function _calculateHiddenInterval() {\n    return 0;\n  },\n  _insertAllDayRowsIntoDateTable: function _insertAllDayRowsIntoDateTable() {\n    return false;\n  },\n  _getCellCoordinatesByIndex: function _getCellCoordinatesByIndex(index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var cellIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      cellIndex: cellIndex\n    };\n  },\n  _createWorkSpaceElements: function _createWorkSpaceElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      this.callBase();\n    }\n  },\n  _needCreateCrossScrolling: function _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  },\n  _renderTimePanel: noop,\n  _renderAllDayPanel: noop,\n  _getTableAllDay: noop,\n  _toggleAllDayVisibility: noop,\n  _changeAllDayVisibility: noop,\n  _setFirstViewDate: function _setFirstViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\n    this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, this.option(\"firstDayOfWeek\") || dateLocalization.firstDayOfWeekIndex());\n\n    this._setStartDayHour(this._firstViewDate);\n\n    var date = this._getViewStartByOptions();\n\n    this._minVisibleDate = new Date(date.setDate(1));\n    this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0));\n  },\n  _getViewStartByOptions: function _getViewStartByOptions() {\n    if (!this.option(\"startDate\")) {\n      return new Date(this.option(\"currentDate\").getTime());\n    } else {\n      var startDate = this._getStartViewDate();\n\n      var currentDate = this.option(\"currentDate\");\n      var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\n      var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\n\n      while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\n        startDate = new Date(endDate);\n\n        if (diff > 0) {\n          startDate.setDate(1);\n        }\n\n        endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))));\n      }\n\n      return diff > 0 ? startDate : endDate;\n    }\n  },\n  _getStartViewDate: function _getStartViewDate() {\n    var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\n    return firstMonthDate;\n  },\n  _renderTableBody: function _renderTableBody(options) {\n    options.getCellText = this._getCellText.bind(this);\n    this.callBase(options);\n  },\n  _getCellText: function _getCellText(rowIndex, cellIndex) {\n    if (this.isGroupedByDate()) {\n      cellIndex = Math.floor(cellIndex / this._getGroupCount());\n    } else {\n      cellIndex %= this._getCellCount();\n    }\n\n    var date = this._getDate(rowIndex, cellIndex);\n\n    if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\n      return this._formatMonthAndDay(date);\n    }\n\n    return dateLocalization.format(date, \"dd\");\n  },\n  _formatMonthAndDay: function _formatMonthAndDay(date) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  },\n  _getDate: function _getDate(week, day) {\n    var result = new Date(this._firstViewDate);\n\n    var lastRowInDay = this._getRowCount();\n\n    result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\n    return result;\n  },\n  _updateIndex: function _updateIndex(index) {\n    return index;\n  },\n  _prepareCellData: function _prepareCellData(rowIndex, cellIndex, cell) {\n    var data = this.callBase(rowIndex, cellIndex, cell);\n    var $cell = $(cell);\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\n    return data;\n  },\n  _isCurrentDate: function _isCurrentDate(cellDate) {\n    var today = new Date();\n    return dateUtils.sameDate(cellDate, today);\n  },\n  _isFirstDayOfMonth: function _isFirstDayOfMonth(cellDate) {\n    return this._isWorkSpaceWithCount() && 1 === cellDate.getDate();\n  },\n  _isOtherMonth: function _isOtherMonth(cellDate) {\n    return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\");\n  },\n  needRenderDateTimeIndication: function needRenderDateTimeIndication() {\n    return false;\n  },\n  getCellDuration: function getCellDuration() {\n    return 36e5 * this._calculateDayDuration();\n  },\n  getIntervalDuration: function getIntervalDuration() {\n    return toMs(\"day\");\n  },\n  getTimePanelWidth: function getTimePanelWidth() {\n    return 0;\n  },\n  getPositionShift: function getPositionShift(timeShift) {\n    return {\n      cellPosition: timeShift * this.getCellWidth(),\n      top: 0,\n      left: 0\n    };\n  },\n  getCellCountToLastViewDate: function getCellCountToLastViewDate(date) {\n    var firstDateTime = date.getTime();\n    var lastDateTime = this.getEndViewDate().getTime();\n    var dayDurationInMs = this.getCellDuration();\n    return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs);\n  },\n  supportAllDayRow: function supportAllDayRow() {\n    return false;\n  },\n  keepOriginalHours: function keepOriginalHours() {\n    return true;\n  },\n  calculateEndDate: function calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  },\n  getWorkSpaceLeftOffset: function getWorkSpaceLeftOffset() {\n    return 0;\n  },\n  needApplyCollectorOffset: function needApplyCollectorOffset() {\n    return true;\n  },\n  _getDateTableBorderOffset: function _getDateTableBorderOffset() {\n    return this._getDateTableBorder();\n  },\n  _getCellPositionByIndex: function _getCellPositionByIndex(index, groupIndex) {\n    var position = this.callBase(index, groupIndex);\n\n    var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\n\n    var calculatedTopOffset;\n\n    if (!this._isVerticalGroupedWorkSpace()) {\n      calculatedTopOffset = this.getCellHeight() * rowIndex;\n    } else {\n      calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount());\n    }\n\n    if (calculatedTopOffset) {\n      position.top = calculatedTopOffset;\n    }\n\n    return position;\n  },\n  _getHeaderDate: function _getHeaderDate() {\n    return this._getViewStartByOptions();\n  },\n  _supportCompactDropDownAppointments: function _supportCompactDropDownAppointments() {\n    return false;\n  },\n  scrollToTime: noop,\n  _getRowCountWithAllDayRows: function _getRowCountWithAllDayRows() {\n    return this._getRowCount();\n  }\n});\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nmodule.exports = SchedulerWorkSpaceMonth;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.work_space_month.js"],"names":["$","require","noop","registerComponent","SchedulerWorkSpace","dateUtils","getBoundingRect","dateLocalization","MONTH_CLASS","DATE_TABLE_CURRENT_DATE_CLASS","DATE_TABLE_FIRST_OF_MONTH_CLASS","DATE_TABLE_OTHER_MONTH_DATE_CLASS","DATE_TABLE_SCROLLABLE_FIXED_CLASS","DAYS_IN_WEEK","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerWorkSpaceMonth","inherit","_toggleFixedScrollableClass","_dateTableScrollable","$content","toggleClass","_isWorkSpaceWithCount","_isVerticalGroupedWorkSpace","_getElementClass","_getRowCount","option","_getCellCount","_getDateByIndex","headerIndex","resultDate","Date","_firstViewDate","setDate","getDate","_getFormat","_formatWeekday","_calculateCellIndex","rowIndex","cellIndex","_getInterval","_getIntervalBetween","currentDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","getTime","_getDateByCellIndexes","date","callBase","_setStartDayHour","getCellWidth","averageWidth","_getCells","slice","each","index","element","width","_calculateHiddenInterval","_insertAllDayRowsIntoDateTable","_getCellCoordinatesByIndex","Math","floor","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_needCreateCrossScrolling","_renderTimePanel","_renderAllDayPanel","_getTableAllDay","_toggleAllDayVisibility","_changeAllDayVisibility","_setFirstViewDate","firstMonthDate","getFirstMonthDate","_getViewStartByOptions","getFirstWeekDate","firstDayOfWeekIndex","_minVisibleDate","_maxVisibleDate","setMonth","getMonth","startDate","_getStartViewDate","diff","endDate","_dateInRange","_renderTableBody","options","getCellText","_getCellText","bind","isGroupedByDate","_getGroupCount","_getDate","_isFirstDayOfMonth","_formatMonthAndDay","format","monthName","getMonthNames","join","week","day","result","lastRowInDay","_updateIndex","_prepareCellData","cell","data","$cell","_isCurrentDate","_isOtherMonth","cellDate","today","sameDate","dateInRange","needRenderDateTimeIndication","getCellDuration","_calculateDayDuration","getIntervalDuration","getTimePanelWidth","getPositionShift","timeShift","cellPosition","top","left","getCellCountToLastViewDate","firstDateTime","lastDateTime","getEndViewDate","dayDurationInMs","ceil","supportAllDayRow","keepOriginalHours","calculateEndDate","startDateCopy","setHours","getWorkSpaceLeftOffset","needApplyCollectorOffset","_getDateTableBorderOffset","_getDateTableBorder","_getCellPositionByIndex","groupIndex","position","calculatedTopOffset","getCellHeight","_getHeaderDate","_supportCompactDropDownAppointments","scrollToTime","_getRowCountWithAllDayRows","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar $ = require(\"../../../core/renderer\");\r\nvar noop = require(\"../../../core/utils/common\").noop;\r\nvar registerComponent = require(\"../../../core/component_registrator\");\r\nvar SchedulerWorkSpace = require(\"./ui.scheduler.work_space.indicator\");\r\nvar dateUtils = require(\"../../../core/utils/date\");\r\nvar getBoundingRect = require(\"../../../core/utils/position\").getBoundingRect;\r\nvar dateLocalization = require(\"../../../localization/date\");\r\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\r\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\r\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\r\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\r\nvar DATE_TABLE_SCROLLABLE_FIXED_CLASS = \"dx-scheduler-scrollable-fixed-content\";\r\nvar DAYS_IN_WEEK = 7;\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SchedulerWorkSpaceMonth = SchedulerWorkSpace.inherit({\r\n    _toggleFixedScrollableClass: function() {\r\n        this._dateTableScrollable.$content().toggleClass(DATE_TABLE_SCROLLABLE_FIXED_CLASS, !this._isWorkSpaceWithCount() && !this._isVerticalGroupedWorkSpace())\r\n    },\r\n    _getElementClass: function() {\r\n        return MONTH_CLASS\r\n    },\r\n    _getRowCount: function() {\r\n        return this._isWorkSpaceWithCount() ? 4 * this.option(\"intervalCount\") + 2 : 6\r\n    },\r\n    _getCellCount: function() {\r\n        return DAYS_IN_WEEK\r\n    },\r\n    _getDateByIndex: function(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    },\r\n    _getFormat: function() {\r\n        return this._formatWeekday\r\n    },\r\n    _calculateCellIndex: function(rowIndex, cellIndex) {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            rowIndex %= this._getRowCount()\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        return rowIndex * this._getCellCount() + cellIndex\r\n    },\r\n    _getInterval: function() {\r\n        return DAY_IN_MILLISECONDS\r\n    },\r\n    _getIntervalBetween: function(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    },\r\n    _getDateByCellIndexes: function(rowIndex, cellIndex) {\r\n        var date = this.callBase(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    },\r\n    getCellWidth: function() {\r\n        var DAYS_IN_WEEK = 7;\r\n        var averageWidth = 0;\r\n        this._getCells().slice(0, DAYS_IN_WEEK).each(function(index, element) {\r\n            return averageWidth += getBoundingRect(element).width\r\n        });\r\n        return averageWidth / DAYS_IN_WEEK\r\n    },\r\n    _calculateHiddenInterval: function() {\r\n        return 0\r\n    },\r\n    _insertAllDayRowsIntoDateTable: function() {\r\n        return false\r\n    },\r\n    _getCellCoordinatesByIndex: function(index) {\r\n        var rowIndex = Math.floor(index / this._getCellCount());\r\n        var cellIndex = index - this._getCellCount() * rowIndex;\r\n        return {\r\n            rowIndex: rowIndex,\r\n            cellIndex: cellIndex\r\n        }\r\n    },\r\n    _createWorkSpaceElements: function() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _needCreateCrossScrolling: function() {\r\n        return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace()\r\n    },\r\n    _renderTimePanel: noop,\r\n    _renderAllDayPanel: noop,\r\n    _getTableAllDay: noop,\r\n    _toggleAllDayVisibility: noop,\r\n    _changeAllDayVisibility: noop,\r\n    _setFirstViewDate: function() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this._getViewStartByOptions());\r\n        this._firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, this.option(\"firstDayOfWeek\") || dateLocalization.firstDayOfWeekIndex());\r\n        this._setStartDayHour(this._firstViewDate);\r\n        var date = this._getViewStartByOptions();\r\n        this._minVisibleDate = new Date(date.setDate(1));\r\n        this._maxVisibleDate = new Date(new Date(date.setMonth(date.getMonth() + this.option(\"intervalCount\"))).setDate(0))\r\n    },\r\n    _getViewStartByOptions: function() {\r\n        if (!this.option(\"startDate\")) {\r\n            return new Date(this.option(\"currentDate\").getTime())\r\n        } else {\r\n            var startDate = this._getStartViewDate();\r\n            var currentDate = this.option(\"currentDate\");\r\n            var diff = startDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n            var endDate = new Date(new Date(this._getStartViewDate().setMonth(this._getStartViewDate().getMonth() + diff * this.option(\"intervalCount\"))));\r\n            while (!this._dateInRange(currentDate, startDate, endDate, diff)) {\r\n                startDate = new Date(endDate);\r\n                if (diff > 0) {\r\n                    startDate.setDate(1)\r\n                }\r\n                endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * this.option(\"intervalCount\"))))\r\n            }\r\n            return diff > 0 ? startDate : endDate\r\n        }\r\n    },\r\n    _getStartViewDate: function() {\r\n        var firstMonthDate = dateUtils.getFirstMonthDate(this.option(\"startDate\"));\r\n        return firstMonthDate\r\n    },\r\n    _renderTableBody: function(options) {\r\n        options.getCellText = this._getCellText.bind(this);\r\n        this.callBase(options)\r\n    },\r\n    _getCellText: function(rowIndex, cellIndex) {\r\n        if (this.isGroupedByDate()) {\r\n            cellIndex = Math.floor(cellIndex / this._getGroupCount())\r\n        } else {\r\n            cellIndex %= this._getCellCount()\r\n        }\r\n        var date = this._getDate(rowIndex, cellIndex);\r\n        if (this._isWorkSpaceWithCount() && this._isFirstDayOfMonth(date)) {\r\n            return this._formatMonthAndDay(date)\r\n        }\r\n        return dateLocalization.format(date, \"dd\")\r\n    },\r\n    _formatMonthAndDay: function(date) {\r\n        var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, dateLocalization.format(date, \"day\")].join(\" \")\r\n    },\r\n    _getDate: function(week, day) {\r\n        var result = new Date(this._firstViewDate);\r\n        var lastRowInDay = this._getRowCount();\r\n        result.setDate(result.getDate() + week % lastRowInDay * DAYS_IN_WEEK + day);\r\n        return result\r\n    },\r\n    _updateIndex: function(index) {\r\n        return index\r\n    },\r\n    _prepareCellData: function(rowIndex, cellIndex, cell) {\r\n        var data = this.callBase(rowIndex, cellIndex, cell);\r\n        var $cell = $(cell);\r\n        $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, this._isCurrentDate(data.startDate)).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, this._isFirstDayOfMonth(data.startDate)).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, this._isOtherMonth(data.startDate));\r\n        return data\r\n    },\r\n    _isCurrentDate: function(cellDate) {\r\n        var today = new Date;\r\n        return dateUtils.sameDate(cellDate, today)\r\n    },\r\n    _isFirstDayOfMonth: function(cellDate) {\r\n        return this._isWorkSpaceWithCount() && 1 === cellDate.getDate()\r\n    },\r\n    _isOtherMonth: function(cellDate) {\r\n        return !dateUtils.dateInRange(cellDate, this._minVisibleDate, this._maxVisibleDate, \"date\")\r\n    },\r\n    needRenderDateTimeIndication: function() {\r\n        return false\r\n    },\r\n    getCellDuration: function() {\r\n        return 36e5 * this._calculateDayDuration()\r\n    },\r\n    getIntervalDuration: function() {\r\n        return toMs(\"day\")\r\n    },\r\n    getTimePanelWidth: function() {\r\n        return 0\r\n    },\r\n    getPositionShift: function(timeShift) {\r\n        return {\r\n            cellPosition: timeShift * this.getCellWidth(),\r\n            top: 0,\r\n            left: 0\r\n        }\r\n    },\r\n    getCellCountToLastViewDate: function(date) {\r\n        var firstDateTime = date.getTime();\r\n        var lastDateTime = this.getEndViewDate().getTime();\r\n        var dayDurationInMs = this.getCellDuration();\r\n        return Math.ceil((lastDateTime - firstDateTime) / dayDurationInMs)\r\n    },\r\n    supportAllDayRow: function() {\r\n        return false\r\n    },\r\n    keepOriginalHours: function() {\r\n        return true\r\n    },\r\n    calculateEndDate: function(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    },\r\n    getWorkSpaceLeftOffset: function() {\r\n        return 0\r\n    },\r\n    needApplyCollectorOffset: function() {\r\n        return true\r\n    },\r\n    _getDateTableBorderOffset: function() {\r\n        return this._getDateTableBorder()\r\n    },\r\n    _getCellPositionByIndex: function(index, groupIndex) {\r\n        var position = this.callBase(index, groupIndex);\r\n        var rowIndex = this._getCellCoordinatesByIndex(index).rowIndex;\r\n        var calculatedTopOffset;\r\n        if (!this._isVerticalGroupedWorkSpace()) {\r\n            calculatedTopOffset = this.getCellHeight() * rowIndex\r\n        } else {\r\n            calculatedTopOffset = this.getCellHeight() * (rowIndex + groupIndex * this._getRowCount())\r\n        }\r\n        if (calculatedTopOffset) {\r\n            position.top = calculatedTopOffset\r\n        }\r\n        return position\r\n    },\r\n    _getHeaderDate: function() {\r\n        return this._getViewStartByOptions()\r\n    },\r\n    _supportCompactDropDownAppointments: function() {\r\n        return false\r\n    },\r\n    scrollToTime: noop,\r\n    _getRowCountWithAllDayRows: function() {\r\n        return this._getRowCount()\r\n    }\r\n});\r\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\r\nmodule.exports = SchedulerWorkSpaceMonth;\r\n"]},"metadata":{},"sourceType":"script"}