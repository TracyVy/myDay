{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar registerComponent = require(\"../../../core/component_registrator\");\n\nvar SchedulerTimeline = require(\"./ui.scheduler.timeline\");\n\nvar dateUtils = require(\"../../../core/utils/date\");\n\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\nvar DAY_IN_MILLISECONDS = 864e5;\nvar toMs = dateUtils.dateToMilliseconds;\nvar SchedulerTimelineMonth = SchedulerTimeline.inherit({\n  _renderView: function _renderView() {\n    this.callBase();\n\n    this._updateScrollable();\n  },\n  _getElementClass: function _getElementClass() {\n    return TIMELINE_CLASS;\n  },\n  _getDateHeaderTemplate: function _getDateHeaderTemplate() {\n    return this.option(\"dateCellTemplate\");\n  },\n  _getHiddenInterval: function _getHiddenInterval() {\n    return 0;\n  },\n  _getIndicationFirstViewDate: function _getIndicationFirstViewDate() {\n    return dateUtils.trimTime(new Date(this._firstViewDate));\n  },\n  getCellDuration: function getCellDuration() {\n    return toMs(\"day\");\n  },\n  calculateEndViewDate: function calculateEndViewDate(dateOfLastViewCell) {\n    return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"));\n  },\n  _getCellCount: function _getCellCount() {\n    var currentDate = this.option(\"currentDate\");\n    var cellCount = 0;\n\n    if (this._isWorkSpaceWithCount()) {\n      var intervalCount = this.option(\"intervalCount\");\n\n      for (var i = 1; i <= intervalCount; i++) {\n        cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate();\n      }\n    } else {\n      cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n    }\n\n    return cellCount;\n  },\n  _setFirstViewDate: function _setFirstViewDate() {\n    this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\n\n    this._setStartDayHour(this._firstViewDate);\n  },\n  _getFormat: function _getFormat() {\n    return this._formatWeekdayAndDay;\n  },\n  _getDateByIndex: function _getDateByIndex(headerIndex) {\n    var resultDate = new Date(this._firstViewDate);\n    resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\n    return resultDate;\n  },\n  _getInterval: function _getInterval() {\n    return DAY_IN_MILLISECONDS;\n  },\n  _getIntervalBetween: function _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  },\n  calculateEndDate: function calculateEndDate(startDate) {\n    var startDateCopy = new Date(startDate);\n    return new Date(startDateCopy.setHours(this.option(\"endDayHour\")));\n  },\n  _calculateHiddenInterval: function _calculateHiddenInterval() {\n    return 0;\n  },\n  _getDateByCellIndexes: function _getDateByCellIndexes(rowIndex, cellIndex) {\n    var date = this.callBase(rowIndex, cellIndex);\n\n    this._setStartDayHour(date);\n\n    return date;\n  },\n  needUpdateScrollPosition: function needUpdateScrollPosition(hours, minutes, bounds, date) {\n    return this._dateWithinBounds(bounds, date);\n  },\n  getPositionShift: function getPositionShift() {\n    return {\n      top: 0,\n      left: 0,\n      cellPosition: 0\n    };\n  }\n});\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\nmodule.exports = SchedulerTimelineMonth;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/node_modules/devextreme/ui/scheduler/workspaces/ui.scheduler.timeline_month.js"],"names":["registerComponent","require","SchedulerTimeline","dateUtils","TIMELINE_CLASS","DAY_IN_MILLISECONDS","toMs","dateToMilliseconds","SchedulerTimelineMonth","inherit","_renderView","callBase","_updateScrollable","_getElementClass","_getDateHeaderTemplate","option","_getHiddenInterval","_getIndicationFirstViewDate","trimTime","Date","_firstViewDate","getCellDuration","calculateEndViewDate","dateOfLastViewCell","getTime","_calculateDayDuration","_getCellCount","currentDate","cellCount","_isWorkSpaceWithCount","intervalCount","i","getFullYear","getMonth","getDate","_setFirstViewDate","getFirstMonthDate","_setStartDayHour","_getFormat","_formatWeekdayAndDay","_getDateByIndex","headerIndex","resultDate","setDate","_getInterval","_getIntervalBetween","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","calculateEndDate","startDate","startDateCopy","setHours","_calculateHiddenInterval","_getDateByCellIndexes","rowIndex","cellIndex","date","needUpdateScrollPosition","hours","minutes","bounds","_dateWithinBounds","getPositionShift","top","left","cellPosition","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/workspaces/ui.scheduler.timeline_month.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar registerComponent = require(\"../../../core/component_registrator\");\r\nvar SchedulerTimeline = require(\"./ui.scheduler.timeline\");\r\nvar dateUtils = require(\"../../../core/utils/date\");\r\nvar TIMELINE_CLASS = \"dx-scheduler-timeline-month\";\r\nvar DAY_IN_MILLISECONDS = 864e5;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SchedulerTimelineMonth = SchedulerTimeline.inherit({\r\n    _renderView: function() {\r\n        this.callBase();\r\n        this._updateScrollable()\r\n    },\r\n    _getElementClass: function() {\r\n        return TIMELINE_CLASS\r\n    },\r\n    _getDateHeaderTemplate: function() {\r\n        return this.option(\"dateCellTemplate\")\r\n    },\r\n    _getHiddenInterval: function() {\r\n        return 0\r\n    },\r\n    _getIndicationFirstViewDate: function() {\r\n        return dateUtils.trimTime(new Date(this._firstViewDate))\r\n    },\r\n    getCellDuration: function() {\r\n        return toMs(\"day\")\r\n    },\r\n    calculateEndViewDate: function(dateOfLastViewCell) {\r\n        return new Date(dateOfLastViewCell.getTime() + this._calculateDayDuration() * toMs(\"hour\"))\r\n    },\r\n    _getCellCount: function() {\r\n        var currentDate = this.option(\"currentDate\");\r\n        var cellCount = 0;\r\n        if (this._isWorkSpaceWithCount()) {\r\n            var intervalCount = this.option(\"intervalCount\");\r\n            for (var i = 1; i <= intervalCount; i++) {\r\n                cellCount += new Date(currentDate.getFullYear(), currentDate.getMonth() + i, 0).getDate()\r\n            }\r\n        } else {\r\n            cellCount = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate()\r\n        }\r\n        return cellCount\r\n    },\r\n    _setFirstViewDate: function() {\r\n        this._firstViewDate = dateUtils.getFirstMonthDate(this.option(\"currentDate\"));\r\n        this._setStartDayHour(this._firstViewDate)\r\n    },\r\n    _getFormat: function() {\r\n        return this._formatWeekdayAndDay\r\n    },\r\n    _getDateByIndex: function(headerIndex) {\r\n        var resultDate = new Date(this._firstViewDate);\r\n        resultDate.setDate(this._firstViewDate.getDate() + headerIndex);\r\n        return resultDate\r\n    },\r\n    _getInterval: function() {\r\n        return DAY_IN_MILLISECONDS\r\n    },\r\n    _getIntervalBetween: function(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    },\r\n    calculateEndDate: function(startDate) {\r\n        var startDateCopy = new Date(startDate);\r\n        return new Date(startDateCopy.setHours(this.option(\"endDayHour\")))\r\n    },\r\n    _calculateHiddenInterval: function() {\r\n        return 0\r\n    },\r\n    _getDateByCellIndexes: function(rowIndex, cellIndex) {\r\n        var date = this.callBase(rowIndex, cellIndex);\r\n        this._setStartDayHour(date);\r\n        return date\r\n    },\r\n    needUpdateScrollPosition: function(hours, minutes, bounds, date) {\r\n        return this._dateWithinBounds(bounds, date)\r\n    },\r\n    getPositionShift: function() {\r\n        return {\r\n            top: 0,\r\n            left: 0,\r\n            cellPosition: 0\r\n        }\r\n    }\r\n});\r\nregisterComponent(\"dxSchedulerTimelineMonth\", SchedulerTimelineMonth);\r\nmodule.exports = SchedulerTimelineMonth;\r\n"]},"metadata":{},"sourceType":"script"}