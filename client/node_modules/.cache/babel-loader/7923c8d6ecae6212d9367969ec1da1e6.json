{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/utils.timeZone.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _date = require(\"../../core/utils/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _uiScheduler = require(\"./timezones/ui.scheduler.timezones\");\n\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar toMs = _date2.default.dateToMilliseconds;\nvar MINUTES_IN_HOUR = 60;\n\nvar getTimezoneOffsetChangeInMinutes = function (startDate, endDate, updatedStartDate, updatedEndDate) {\n  return getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\n};\n\nvar getTimezoneOffsetChangeInMs = function (startDate, endDate, updatedStartDate, updatedEndDate) {\n  return getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\n};\n\nvar getDaylightOffset = function (startDate, endDate) {\n  return new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\n};\n\nvar getDaylightOffsetInMs = function (startDate, endDate) {\n  return getDaylightOffset(startDate, endDate) * toMs(\"minute\");\n};\n\nvar calculateTimezoneByValue = function (timezone, date) {\n  if (\"string\" === typeof timezone) {\n    date = date || new Date();\n    var dateUtc = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());\n    timezone = _uiScheduler2.default.getTimezoneOffsetById(timezone, dateUtc);\n  }\n\n  return timezone;\n};\n\nvar _getDaylightOffsetByTimezone = function (startDate, endDate, timeZone) {\n  return calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\n};\n\nvar getCorrectedDateByDaylightOffsets = function (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) {\n  var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\n\n  var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\n\n  var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\n  return new Date(date.getTime() - diff * toMs(\"hour\"));\n};\n\nvar correctRecurrenceExceptionByTimezone = function (exception, exceptionByStartDate, timeZone, startDateTimeZone) {\n  var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n  var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\n\n  if (startDateTimeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone);\n  } else {\n    if (timeZone) {\n      timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone);\n    }\n  }\n\n  return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"));\n};\n\nvar isTimezoneChangeInDate = function (date) {\n  var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\n  var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\n  return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0;\n};\n\nvar isSameAppointmentDates = function (startDate, endDate) {\n  endDate = new Date(endDate.getTime() - 1);\n  return _date2.default.sameDate(startDate, endDate);\n};\n\nvar utils = {\n  getDaylightOffset: getDaylightOffset,\n  getDaylightOffsetInMs: getDaylightOffsetInMs,\n  getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\n  getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\n  calculateTimezoneByValue: calculateTimezoneByValue,\n  getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\n  isTimezoneChangeInDate: isTimezoneChangeInDate,\n  isSameAppointmentDates: isSameAppointmentDates,\n  correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone\n};\nmodule.exports = utils;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/node_modules/devextreme/ui/scheduler/utils.timeZone.js"],"names":["_date","require","_date2","_interopRequireDefault","_uiScheduler","_uiScheduler2","obj","__esModule","toMs","default","dateToMilliseconds","MINUTES_IN_HOUR","getTimezoneOffsetChangeInMinutes","startDate","endDate","updatedStartDate","updatedEndDate","getDaylightOffset","getTimezoneOffsetChangeInMs","Date","getTimezoneOffset","getDaylightOffsetInMs","calculateTimezoneByValue","timezone","date","dateUtc","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getTimezoneOffsetById","_getDaylightOffsetByTimezone","timeZone","getCorrectedDateByDaylightOffsets","convertedOriginalStartDate","convertedDate","startDateTimezone","daylightOffsetByCommonTimezone","daylightOffsetByAppointmentTimezone","diff","getTime","correctRecurrenceExceptionByTimezone","exception","exceptionByStartDate","startDateTimeZone","isBackConversion","arguments","length","timezoneOffset","isTimezoneChangeInDate","startDayDate","setHours","endDayDate","isSameAppointmentDates","sameDate","utils","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/utils.timeZone.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _date = require(\"../../core/utils/date\");\r\nvar _date2 = _interopRequireDefault(_date);\r\nvar _uiScheduler = require(\"./timezones/ui.scheduler.timezones\");\r\nvar _uiScheduler2 = _interopRequireDefault(_uiScheduler);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar toMs = _date2.default.dateToMilliseconds;\r\nvar MINUTES_IN_HOUR = 60;\r\nvar getTimezoneOffsetChangeInMinutes = function(startDate, endDate, updatedStartDate, updatedEndDate) {\r\n    return getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate)\r\n};\r\nvar getTimezoneOffsetChangeInMs = function(startDate, endDate, updatedStartDate, updatedEndDate) {\r\n    return getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\")\r\n};\r\nvar getDaylightOffset = function(startDate, endDate) {\r\n    return new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset()\r\n};\r\nvar getDaylightOffsetInMs = function(startDate, endDate) {\r\n    return getDaylightOffset(startDate, endDate) * toMs(\"minute\")\r\n};\r\nvar calculateTimezoneByValue = function(timezone, date) {\r\n    if (\"string\" === typeof timezone) {\r\n        date = date || new Date;\r\n        var dateUtc = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());\r\n        timezone = _uiScheduler2.default.getTimezoneOffsetById(timezone, dateUtc)\r\n    }\r\n    return timezone\r\n};\r\nvar _getDaylightOffsetByTimezone = function(startDate, endDate, timeZone) {\r\n    return calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate)\r\n};\r\nvar getCorrectedDateByDaylightOffsets = function(convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) {\r\n    var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\r\n    var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\r\n    var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\r\n    return new Date(date.getTime() - diff * toMs(\"hour\"))\r\n};\r\nvar correctRecurrenceExceptionByTimezone = function(exception, exceptionByStartDate, timeZone, startDateTimeZone) {\r\n    var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n    var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\r\n    if (startDateTimeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone)\r\n    } else {\r\n        if (timeZone) {\r\n            timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone)\r\n        }\r\n    }\r\n    return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"))\r\n};\r\nvar isTimezoneChangeInDate = function(date) {\r\n    var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\r\n    var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\r\n    return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0\r\n};\r\nvar isSameAppointmentDates = function(startDate, endDate) {\r\n    endDate = new Date(endDate.getTime() - 1);\r\n    return _date2.default.sameDate(startDate, endDate)\r\n};\r\nvar utils = {\r\n    getDaylightOffset: getDaylightOffset,\r\n    getDaylightOffsetInMs: getDaylightOffsetInMs,\r\n    getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\r\n    getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\r\n    calculateTimezoneByValue: calculateTimezoneByValue,\r\n    getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\r\n    isTimezoneChangeInDate: isTimezoneChangeInDate,\r\n    isSameAppointmentDates: isSameAppointmentDates,\r\n    correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone\r\n};\r\nmodule.exports = utils;\r\n"]},"metadata":{},"sourceType":"script"}