{"ast":null,"code":"/**\r\n * DevExtreme (ui/scheduler/utils.recurrence.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar errors = require(\"../../core/errors\");\n\nvar extend = require(\"../../core/utils/extend\").extend;\n\nvar each = require(\"../../core/utils/iterator\").each;\n\nvar inArray = require(\"../../core/utils/array\").inArray;\n\nvar isDefined = require(\"../../core/utils/type\").isDefined;\n\nvar dateUtils = require(\"../../core/utils/date\");\n\nvar toMs = dateUtils.dateToMilliseconds;\nvar leastDaysInWeek = 4;\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\nvar days = {\n  SU: 0,\n  MO: 1,\n  TU: 2,\n  WE: 3,\n  TH: 4,\n  FR: 5,\n  SA: 6\n};\nvar daysNames = {\n  0: \"SU\",\n  1: \"MO\",\n  2: \"TU\",\n  3: \"WE\",\n  4: \"TH\",\n  5: \"FR\",\n  6: \"SA\"\n};\nvar intervalMap = {\n  secondly: \"seconds\",\n  minutely: \"minutes\",\n  hourly: \"hours\",\n  daily: \"days\",\n  weekly: \"weeks\",\n  monthly: \"months\",\n  yearly: \"years\"\n};\nvar resultUtils = {};\nvar dateSetterMap = {\n  bysecond: function (date, value) {\n    date.setSeconds(value);\n  },\n  byminute: function (date, value) {\n    date.setMinutes(value);\n  },\n  byhour: function (date, value) {\n    date.setHours(value);\n  },\n  bymonth: function (date, value) {\n    date.setMonth(value);\n  },\n  bymonthday: function (date, value) {\n    if (value < 0) {\n      var initialDate = new Date(date);\n      setDateByNegativeValue(initialDate, 1, -1);\n      var daysInMonth = initialDate.getDate();\n\n      if (daysInMonth >= Math.abs(value)) {\n        setDateByNegativeValue(date, 1, value);\n      } else {\n        setDateByNegativeValue(date, 2, value);\n      }\n    } else {\n      if (value <= dateUtils.getLastMonthDay(date)) {\n        date.setDate(value);\n      } else {\n        markWrongDate(date);\n      }\n    }\n  },\n  byday: function (date, byDay, appointmentWeekStart, frequency, firstDayOfWeek) {\n    var appointmentDayOfWeek = date.getDay();\n    var weekStart = days[appointmentWeekStart];\n    byDay += byDay >= weekStart === weekStart > appointmentDayOfWeek ? 7 : 0;\n    date.setDate(date.getDate() - appointmentDayOfWeek + byDay);\n  },\n  byweekno: function (date, weekNumber, weekStart) {\n    var initialDate = new Date(date);\n    var firstYearDate = new Date(initialDate.setMonth(0, 1));\n    var dayShift = firstYearDate.getDay() - days[weekStart];\n    var firstDayOfYear = firstYearDate.getTime() - dayShift * toMs(\"day\");\n    var newFirstYearDate = dayShift + 1;\n\n    if (newFirstYearDate > leastDaysInWeek) {\n      date.setTime(firstDayOfYear + 7 * weekNumber * toMs(\"day\"));\n    } else {\n      date.setTime(firstDayOfYear + 7 * (weekNumber - 1) * toMs(\"day\"));\n    }\n\n    var timezoneDiff = (date.getTimezoneOffset() - firstYearDate.getTimezoneOffset()) * toMs(\"minute\");\n    timezoneDiff && date.setTime(date.getTime() + timezoneDiff);\n  },\n  byyearday: function (date, dayOfYear) {\n    date.setMonth(0, 1);\n    date.setDate(dayOfYear);\n  }\n};\n\nfunction setDateByNegativeValue(date, month, value) {\n  var initialDate = new Date(date);\n  date.setMonth(date.getMonth() + month);\n\n  if (date.getMonth() - initialDate.getMonth() > month) {\n    date.setDate(value + 1);\n  }\n\n  date.setDate(value + 1);\n}\n\nvar dateGetterMap = {\n  bysecond: function (date) {\n    return date.getSeconds();\n  },\n  byminute: function (date) {\n    return date.getMinutes();\n  },\n  byhour: function (date) {\n    return date.getHours();\n  },\n  bymonth: function (date) {\n    return date.getMonth();\n  },\n  bymonthday: function (date) {\n    return date.getDate();\n  },\n  byday: function (date) {\n    return date.getDay();\n  },\n  byweekno: function (date, weekStart) {\n    var current = new Date(date);\n    var diff = leastDaysInWeek - current.getDay() + days[weekStart] - 1;\n    var dayInMilliseconds = toMs(\"day\");\n\n    if (date.getDay() < days[weekStart]) {\n      diff -= 7;\n    }\n\n    current.setHours(0, 0, 0);\n    current.setDate(current.getDate() + diff);\n    var yearStart = new Date(current.getFullYear(), 0, 1);\n    var timezoneDiff = (yearStart.getTimezoneOffset() - current.getTimezoneOffset()) * toMs(\"minute\");\n    var daysFromYearStart = 1 + (current - yearStart + timezoneDiff) / dayInMilliseconds;\n    return Math.ceil(daysFromYearStart / 7);\n  },\n  byyearday: function (date) {\n    var yearStart = new Date(date.getFullYear(), 0, 0);\n    var timezoneDiff = date.getTimezoneOffset() - yearStart.getTimezoneOffset();\n    var diff = date - yearStart - timezoneDiff * toMs(\"minute\");\n    var dayLength = toMs(\"day\");\n    return Math.floor(diff / dayLength);\n  }\n};\n\nfunction getTimeZoneOffset() {\n  return new Date().getTimezoneOffset();\n}\n\nvar dateInRecurrenceRange = function (options) {\n  var result = [];\n\n  if (options.rule) {\n    result = getDatesByRecurrence(options);\n  }\n\n  return !!result.length;\n};\n\nvar normalizeInterval = function (rule) {\n  var interval = rule.interval;\n  var freq = rule.freq;\n  var intervalObject = {};\n  var intervalField = intervalMap[freq.toLowerCase()];\n\n  if (\"MONTHLY\" === freq && rule.byday) {\n    intervalField = intervalMap.daily;\n  }\n\n  intervalObject[intervalField] = interval;\n  return intervalObject;\n};\n\nvar getDatesByRecurrenceException = function (ruleValues, date) {\n  var result = [];\n\n  for (var i = 0, len = ruleValues.length; i < len; i++) {\n    result[i] = getDateByAsciiString(ruleValues[i], date);\n  }\n\n  return result;\n};\n\nvar dateIsRecurrenceException = function (date, recurrenceException) {\n  var result = false;\n\n  if (!recurrenceException) {\n    return result;\n  }\n\n  var splitDates = recurrenceException.split(\",\");\n  var exceptDates = getDatesByRecurrenceException(splitDates, date);\n  var shortFormat = /\\d{8}$/;\n\n  for (var i = 0, len = exceptDates.length; i < len; i++) {\n    if (splitDates[i].match(shortFormat)) {\n      var diffs = getDatePartDiffs(date, exceptDates[i]);\n\n      if (0 === diffs.years && 0 === diffs.months && 0 === diffs.days) {\n        result = true;\n      }\n    } else {\n      if (date.getTime() === exceptDates[i].getTime()) {\n        result = true;\n      }\n    }\n  }\n\n  return result;\n};\n\nvar doNextIteration = function (date, startIntervalDate, endIntervalDate, recurrenceRule, iterationCount) {\n  var matchCountIsCorrect = true;\n  endIntervalDate = endIntervalDate.getTime();\n\n  if (recurrenceRule.until) {\n    if (recurrenceRule.until.getTime() < endIntervalDate) {\n      endIntervalDate = recurrenceRule.until.getTime();\n    }\n  }\n\n  if (recurrenceRule.count) {\n    if (iterationCount === recurrenceRule.count) {\n      matchCountIsCorrect = false;\n    }\n  }\n\n  var dateInInterval = date.getTime() <= endIntervalDate;\n  return dateInInterval && matchCountIsCorrect;\n};\n\nfunction getDatesByRecurrence(options) {\n  var result = [];\n  var recurrenceRule = getRecurrenceRule(options.rule);\n  var iterationResult = {};\n  var rule = recurrenceRule.rule;\n  var recurrenceStartDate = options.start;\n  var maxDate = correctMaxDate(options.max, rule);\n\n  if (!recurrenceRule.isValid || !rule.freq) {\n    return result;\n  }\n\n  rule.interval = normalizeInterval(rule);\n  var dateRules = splitDateRules(rule, options.firstDayOfWeek);\n  var duration = options.end ? options.end.getTime() - options.start.getTime() : toMs(\"day\");\n  var config = {\n    exception: options.exception,\n    min: options.min,\n    dateRules: dateRules,\n    rule: rule,\n    recurrenceStartDate: recurrenceStartDate,\n    recurrenceEndDate: options.end,\n    duration: duration\n  };\n\n  if (dateRules.length && rule.count) {\n    var iteration = 0;\n    getDatesByCount(dateRules, new Date(recurrenceStartDate), new Date(recurrenceStartDate), rule).forEach(function (currentDate, i) {\n      if (currentDate < maxDate) {\n        iteration++;\n        iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config, true);\n      }\n    });\n  } else {\n    getDatesByRules(dateRules, new Date(recurrenceStartDate), rule).forEach(function (currentDate, i) {\n      var iteration = 0;\n\n      while (doNextIteration(currentDate, recurrenceStartDate, maxDate, rule, iteration)) {\n        iteration++;\n        iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config);\n        currentDate = incrementDate(currentDate, recurrenceStartDate, rule, i);\n      }\n    });\n  }\n\n  if (rule.bysetpos) {\n    each(iterationResult, function (iterationIndex, iterationDates) {\n      iterationResult[iterationIndex] = filterDatesBySetPos(iterationDates, rule.bysetpos);\n    });\n  }\n\n  each(iterationResult, function (_, iterationDates) {\n    result = result.concat(iterationDates);\n  });\n  result = result.filter(function (date) {\n    return date <= options.max;\n  });\n  result.sort(function (a, b) {\n    return a - b;\n  });\n  return result;\n}\n\nfunction pushToResult(iteration, iterationResult, currentDate, i, config, verifiedField) {\n  if (!iterationResult[iteration]) {\n    iterationResult[iteration] = [];\n  }\n\n  if (checkDate(currentDate, i, config, verifiedField)) {\n    iterationResult[iteration].push(currentDate);\n  }\n\n  return iterationResult;\n}\n\nfunction checkDate(currentDate, i, config, verifiedField) {\n  if (!dateIsRecurrenceException(currentDate, config.exception)) {\n    var duration = dateUtils.sameDate(currentDate, config.recurrenceEndDate) && config.recurrenceEndDate.getTime() > currentDate.getTime() ? config.recurrenceEndDate.getTime() - currentDate.getTime() : config.duration;\n\n    if (currentDate.getTime() >= config.recurrenceStartDate.getTime() && currentDate.getTime() + duration > config.min.getTime()) {\n      return verifiedField || checkDateByRule(currentDate, [config.dateRules[i]], config.rule.wkst);\n    }\n  }\n\n  return false;\n}\n\nfunction filterDatesBySetPos(dates, bySetPos) {\n  var resultArray = [];\n  bySetPos.split(\",\").forEach(function (index) {\n    index = Number(index);\n    var dateIndex = index > 0 ? index - 1 : dates.length + index;\n\n    if (dates[dateIndex]) {\n      resultArray.push(dates[dateIndex]);\n    }\n  });\n  return resultArray;\n}\n\nfunction correctMaxDate(maxDate, rule) {\n  var newMaxDate = new Date(maxDate);\n\n  switch (rule.freq) {\n    case \"MONTHLY\":\n      newMaxDate.setMonth(newMaxDate.getMonth() + 1);\n      break;\n\n    case \"YEARLY\":\n      newMaxDate.setYear(newMaxDate.getYear() + 1);\n  }\n\n  return newMaxDate > maxDate ? newMaxDate : maxDate;\n}\n\nfunction correctDate(originalDate, date) {\n  if (originalDate.getDate() !== date) {\n    originalDate.setDate(date);\n  }\n}\n\nfunction incrementDate(date, originalStartDate, rule, iterationStep) {\n  var initialDate = new Date(date);\n  var needCorrect = true;\n  date = dateUtils.addInterval(date, rule.interval);\n\n  if (\"DAILY\" === rule.freq && !isDefined(rule.byhour) && originalStartDate.getHours() !== date.getHours()) {\n    date = new Date(date.getTime() - (initialDate.getHours() - originalStartDate.getHours()) * toMs(\"hour\"));\n  }\n\n  if (\"MONTHLY\" === rule.freq && !rule.byday) {\n    var expectedDate = originalStartDate.getDate();\n\n    if (rule.bymonthday) {\n      expectedDate = Number(rule.bymonthday.split(\",\")[iterationStep]);\n\n      if (expectedDate < 0) {\n        initialDate.setMonth(initialDate.getMonth() + 1, 1);\n        dateSetterMap.bymonthday(initialDate, expectedDate);\n        date = initialDate;\n        needCorrect = false;\n      }\n    }\n\n    needCorrect && correctDate(date, expectedDate);\n  }\n\n  if (\"YEARLY\" === rule.freq) {\n    if (rule.byyearday) {\n      var dayNumber = Number(rule.byyearday.split(\",\")[iterationStep]);\n      dateSetterMap.byyearday(date, dayNumber);\n    }\n\n    var dateRules = splitDateRules(rule);\n\n    for (var field in dateRules[iterationStep]) {\n      dateSetterMap[field] && dateSetterMap[field](date, dateRules[iterationStep][field], rule.wkst);\n    }\n  }\n\n  return date;\n}\n\nfunction getDatePartDiffs(date1, date2) {\n  return {\n    years: date1.getFullYear() - date2.getFullYear(),\n    months: date1.getMonth() - date2.getMonth(),\n    days: date1.getDate() - date2.getDate(),\n    hours: date1.getHours() - date2.getHours(),\n    minutes: date1.getMinutes() - date2.getMinutes(),\n    seconds: date1.getSeconds() - date2.getSeconds()\n  };\n}\n\nfunction getRecurrenceRule(recurrence) {\n  var result = {\n    rule: {},\n    isValid: false\n  };\n\n  if (recurrence) {\n    result.rule = parseRecurrenceRule(recurrence);\n    result.isValid = validateRRule(result.rule, recurrence);\n  }\n\n  return result;\n}\n\nvar loggedWarnings = [];\n\nfunction validateRRule(rule, recurrence) {\n  if (brokenRuleNameExists(rule) || inArray(rule.freq, freqNames) === -1 || wrongCountRule(rule) || wrongIntervalRule(rule) || wrongDayOfWeek(rule) || wrongByMonthDayRule(rule) || wrongByMonth(rule) || wrongUntilRule(rule)) {\n    logBrokenRule(recurrence);\n    return false;\n  }\n\n  return true;\n}\n\nfunction wrongUntilRule(rule) {\n  var wrongUntil = false;\n  var until = rule.until;\n\n  if (void 0 !== until && !(until instanceof Date)) {\n    wrongUntil = true;\n  }\n\n  return wrongUntil;\n}\n\nfunction wrongCountRule(rule) {\n  var wrongCount = false;\n  var count = rule.count;\n\n  if (count && \"string\" === typeof count) {\n    wrongCount = true;\n  }\n\n  return wrongCount;\n}\n\nfunction wrongByMonthDayRule(rule) {\n  var wrongByMonthDay = false;\n  var byMonthDay = rule.bymonthday;\n\n  if (byMonthDay && isNaN(parseInt(byMonthDay))) {\n    wrongByMonthDay = true;\n  }\n\n  return wrongByMonthDay;\n}\n\nfunction wrongByMonth(rule) {\n  var wrongByMonth = false;\n  var byMonth = rule.bymonth;\n\n  if (byMonth && isNaN(parseInt(byMonth))) {\n    wrongByMonth = true;\n  }\n\n  return wrongByMonth;\n}\n\nfunction wrongIntervalRule(rule) {\n  var wrongInterval = false;\n  var interval = rule.interval;\n\n  if (interval && \"string\" === typeof interval) {\n    wrongInterval = true;\n  }\n\n  return wrongInterval;\n}\n\nfunction wrongDayOfWeek(rule) {\n  var daysByRule = daysFromByDayRule(rule);\n  var brokenDaysExist = false;\n  each(daysByRule, function (_, day) {\n    if (!Object.prototype.hasOwnProperty.call(days, day)) {\n      brokenDaysExist = true;\n      return false;\n    }\n  });\n  return brokenDaysExist;\n}\n\nfunction brokenRuleNameExists(rule) {\n  var brokenRuleExists = false;\n  each(rule, function (ruleName) {\n    if (inArray(ruleName, ruleNames) === -1) {\n      brokenRuleExists = true;\n      return false;\n    }\n  });\n  return brokenRuleExists;\n}\n\nfunction logBrokenRule(recurrence) {\n  if (inArray(recurrence, loggedWarnings) === -1) {\n    errors.log(\"W0006\", recurrence);\n    loggedWarnings.push(recurrence);\n  }\n}\n\nfunction parseRecurrenceRule(recurrence) {\n  var ruleObject = {};\n  var ruleParts = recurrence.split(\";\");\n\n  for (var i = 0, len = ruleParts.length; i < len; i++) {\n    var rule = ruleParts[i].split(\"=\");\n    var ruleName = rule[0].toLowerCase();\n    var ruleValue = rule[1];\n    ruleObject[ruleName] = ruleValue;\n  }\n\n  var count = parseInt(ruleObject.count);\n\n  if (!isNaN(count)) {\n    ruleObject.count = count;\n  }\n\n  if (ruleObject.interval) {\n    var interval = parseInt(ruleObject.interval);\n\n    if (!isNaN(interval)) {\n      ruleObject.interval = interval;\n    }\n  } else {\n    ruleObject.interval = 1;\n  }\n\n  if (ruleObject.freq && ruleObject.until) {\n    ruleObject.until = getDateByAsciiString(ruleObject.until);\n  }\n\n  return ruleObject;\n}\n\nfunction getDateByAsciiString(string, initialDate) {\n  if (\"string\" !== typeof string) {\n    return string;\n  }\n\n  var arrayDate = string.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/);\n\n  if (!arrayDate) {\n    return null;\n  }\n\n  var isUTC = void 0 !== arrayDate[8];\n  var currentOffset = initialDate ? initialDate.getTimezoneOffset() : resultUtils.getTimeZoneOffset();\n  var date = new (Function.prototype.bind.apply(Date, prepareDateArrayToParse(arrayDate)))();\n  currentOffset = 6e4 * currentOffset;\n\n  if (isUTC) {\n    date = new Date(date.getTime() - currentOffset);\n  }\n\n  return date;\n}\n\nfunction prepareDateArrayToParse(arrayDate) {\n  arrayDate.shift();\n\n  if (void 0 === arrayDate[3]) {\n    arrayDate.splice(3);\n  } else {\n    arrayDate.splice(3, 1);\n    arrayDate.splice(6);\n  }\n\n  arrayDate[1]--;\n  arrayDate.unshift(null);\n  return arrayDate;\n}\n\nfunction daysFromByDayRule(rule) {\n  var result = [];\n\n  if (rule.byday) {\n    if (Array.isArray(rule.byday)) {\n      result = rule.byday;\n    } else {\n      result = rule.byday.split(\",\");\n    }\n  }\n\n  return result;\n}\n\nfunction getAsciiStringByDate(date) {\n  var currentOffset = 6e4 * resultUtils.getTimeZoneOffset();\n  date = new Date(date.getTime() + currentOffset);\n  return date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + date.getDate()).slice(-2) + \"T\" + (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2) + (\"0\" + date.getSeconds()).slice(-2) + \"Z\";\n}\n\nfunction splitDateRules(rule) {\n  var firstDayOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\n  var result = [];\n\n  if (isDefined(firstDayOfWeek)) {\n    rule.fdow = firstDayOfWeek;\n  }\n\n  if (!rule.wkst) {\n    rule.wkst = isDefined(firstDayOfWeek) ? daysNames[firstDayOfWeek] : \"MO\";\n  }\n\n  if (rule.byweekno && !rule.byday) {\n    var dayNames = Object.keys(days);\n\n    for (var i = 0; i < days[rule.wkst]; i++) {\n      dayNames.push(dayNames.shift());\n    }\n\n    rule.byday = dayNames.join(\",\");\n  }\n\n  for (var field in dateSetterMap) {\n    if (!rule[field]) {\n      continue;\n    }\n\n    var ruleFieldValues = rule[field].split(\",\");\n    var ruleArray = getDateRuleArray(field, ruleFieldValues);\n    result = result.length ? extendObjectArray(ruleArray, result) : ruleArray;\n  }\n\n  return result;\n}\n\nfunction getDateRuleArray(field, values) {\n  var result = [];\n\n  for (var i = 0, length = values.length; i < length; i++) {\n    var dateRule = {};\n    dateRule[field] = handleRuleFieldValue(field, values[i]);\n    result.push(dateRule);\n  }\n\n  return result;\n}\n\nfunction handleRuleFieldValue(field, value) {\n  var result = parseInt(value);\n\n  if (\"bymonth\" === field) {\n    result -= 1;\n  }\n\n  if (\"byday\" === field) {\n    result = days[value];\n  }\n\n  return result;\n}\n\nfunction extendObjectArray(firstArray, secondArray) {\n  var result = [];\n\n  for (var i = 0, firstArrayLength = firstArray.length; i < firstArrayLength; i++) {\n    for (var j = 0, secondArrayLength = secondArray.length; j < secondArrayLength; j++) {\n      result.push(extend({}, firstArray[i], secondArray[j]));\n    }\n  }\n\n  return result;\n}\n\nfunction getDatesByRules(dateRules, startDate, rule) {\n  var result = [];\n\n  for (var i = 0, len = dateRules.length; i < len; i++) {\n    var current = dateRules[i];\n    var updatedDate = prepareDate(startDate, dateRules, rule.wkst);\n\n    for (var field in current) {\n      dateSetterMap[field] && dateSetterMap[field](updatedDate, current[field], rule.wkst, rule.freq, rule.fdow);\n    }\n\n    if (Array.isArray(updatedDate)) {\n      result = result.concat(updatedDate);\n    } else {\n      var date = !isWrongDate(updatedDate) ? new Date(updatedDate) : updatedDate;\n      result.push(date);\n    }\n  }\n\n  if (!result.length) {\n    result.push(startDate);\n  }\n\n  return result;\n}\n\nfunction getDatesByCount(dateRules, startDate, recurrenceStartDate, rule) {\n  var result = [];\n  var count = rule.count;\n  var counter = 0;\n  var date = prepareDate(startDate, dateRules, rule.wkst);\n\n  var _loop = function () {\n    var dates = getDatesByRules(dateRules, date, rule);\n    var checkedDates = [];\n    dates.forEach(function (checkedDate) {\n      if (!isWrongDate(checkedDate)) {\n        if (checkedDate.getTime() >= recurrenceStartDate.getTime()) {\n          checkedDates.push(checkedDate);\n        }\n      }\n    });\n    var length = checkedDates.length;\n    counter += length;\n    var delCount = counter - count;\n\n    if (counter > count) {\n      checkedDates.splice(length - delCount, delCount);\n    }\n\n    checkedDates.forEach(function (checkedDate) {\n      return result.push(checkedDate);\n    });\n    var interval = rule.interval;\n\n    if (\"days\" === Object.keys(interval)[0]) {\n      interval = {\n        weeks: 1\n      };\n    }\n\n    date = dateUtils.addInterval(date, interval);\n  };\n\n  while (counter < count) {\n    _loop();\n  }\n\n  return result;\n}\n\nfunction prepareDate(startDate, dateRules, weekStartRule) {\n  var date = new Date(startDate);\n  var day = date.getDay();\n\n  if (dateRules.length && isDefined(dateRules[0].byday)) {\n    date.setDate(date.getDate() - day + days[weekStartRule] - (day < days[weekStartRule] ? 7 : 0));\n  } else {\n    date.setDate(1);\n  }\n\n  return date;\n}\n\nfunction checkDateByRule(date, rules, weekStart) {\n  var result = false;\n\n  for (var i = 0; i < rules.length; i++) {\n    var current = rules[i];\n    var currentRuleResult = true;\n\n    for (var field in current) {\n      var processNegative = \"bymonthday\" === field && current[field] < 0;\n\n      if (dateGetterMap[field] && !processNegative && current[field] !== dateGetterMap[field](date, weekStart)) {\n        currentRuleResult = false;\n      }\n    }\n\n    result = result || currentRuleResult;\n  }\n\n  return result || !rules.length;\n}\n\nfunction markWrongDate(date) {\n  date.isWrongDate = true;\n}\n\nfunction isWrongDate(date) {\n  return date.isWrongDate;\n}\n\nvar getRecurrenceString = function (object) {\n  if (!object || !object.freq) {\n    return;\n  }\n\n  var result = \"\";\n\n  for (var field in object) {\n    var value = object[field];\n\n    if (\"interval\" === field && value < 2) {\n      continue;\n    }\n\n    if (\"until\" === field) {\n      value = getAsciiStringByDate(value);\n    }\n\n    result += field + \"=\" + value + \";\";\n  }\n\n  result = result.substring(0, result.length - 1);\n  return result.toUpperCase();\n};\n\nextend(resultUtils, {\n  getRecurrenceString: getRecurrenceString,\n  getRecurrenceRule: getRecurrenceRule,\n  getAsciiStringByDate: getAsciiStringByDate,\n  getDatesByRecurrence: getDatesByRecurrence,\n  dateInRecurrenceRange: dateInRecurrenceRange,\n  getDateByAsciiString: getDateByAsciiString,\n  daysFromByDayRule: daysFromByDayRule,\n  getTimeZoneOffset: getTimeZoneOffset\n});\nmodule.exports = resultUtils;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/node_modules/devextreme/ui/scheduler/utils.recurrence.js"],"names":["errors","require","extend","each","inArray","isDefined","dateUtils","toMs","dateToMilliseconds","leastDaysInWeek","ruleNames","freqNames","days","SU","MO","TU","WE","TH","FR","SA","daysNames","intervalMap","secondly","minutely","hourly","daily","weekly","monthly","yearly","resultUtils","dateSetterMap","bysecond","date","value","setSeconds","byminute","setMinutes","byhour","setHours","bymonth","setMonth","bymonthday","initialDate","Date","setDateByNegativeValue","daysInMonth","getDate","Math","abs","getLastMonthDay","setDate","markWrongDate","byday","byDay","appointmentWeekStart","frequency","firstDayOfWeek","appointmentDayOfWeek","getDay","weekStart","byweekno","weekNumber","firstYearDate","dayShift","firstDayOfYear","getTime","newFirstYearDate","setTime","timezoneDiff","getTimezoneOffset","byyearday","dayOfYear","month","getMonth","dateGetterMap","getSeconds","getMinutes","getHours","current","diff","dayInMilliseconds","yearStart","getFullYear","daysFromYearStart","ceil","dayLength","floor","getTimeZoneOffset","dateInRecurrenceRange","options","result","rule","getDatesByRecurrence","length","normalizeInterval","interval","freq","intervalObject","intervalField","toLowerCase","getDatesByRecurrenceException","ruleValues","i","len","getDateByAsciiString","dateIsRecurrenceException","recurrenceException","splitDates","split","exceptDates","shortFormat","match","diffs","getDatePartDiffs","years","months","doNextIteration","startIntervalDate","endIntervalDate","recurrenceRule","iterationCount","matchCountIsCorrect","until","count","dateInInterval","getRecurrenceRule","iterationResult","recurrenceStartDate","start","maxDate","correctMaxDate","max","isValid","dateRules","splitDateRules","duration","end","config","exception","min","recurrenceEndDate","iteration","getDatesByCount","forEach","currentDate","pushToResult","getDatesByRules","incrementDate","bysetpos","iterationIndex","iterationDates","filterDatesBySetPos","_","concat","filter","sort","a","b","verifiedField","checkDate","push","sameDate","checkDateByRule","wkst","dates","bySetPos","resultArray","index","Number","dateIndex","newMaxDate","setYear","getYear","correctDate","originalDate","originalStartDate","iterationStep","needCorrect","addInterval","expectedDate","dayNumber","field","date1","date2","hours","minutes","seconds","recurrence","parseRecurrenceRule","validateRRule","loggedWarnings","brokenRuleNameExists","wrongCountRule","wrongIntervalRule","wrongDayOfWeek","wrongByMonthDayRule","wrongByMonth","wrongUntilRule","logBrokenRule","wrongUntil","wrongCount","wrongByMonthDay","byMonthDay","isNaN","parseInt","byMonth","wrongInterval","daysByRule","daysFromByDayRule","brokenDaysExist","day","Object","prototype","hasOwnProperty","call","brokenRuleExists","ruleName","log","ruleObject","ruleParts","ruleValue","string","arrayDate","isUTC","currentOffset","Function","bind","apply","prepareDateArrayToParse","shift","splice","unshift","Array","isArray","getAsciiStringByDate","slice","arguments","fdow","dayNames","keys","join","ruleFieldValues","ruleArray","getDateRuleArray","extendObjectArray","values","dateRule","handleRuleFieldValue","firstArray","secondArray","firstArrayLength","j","secondArrayLength","startDate","updatedDate","prepareDate","isWrongDate","counter","_loop","checkedDates","checkedDate","delCount","weeks","weekStartRule","rules","currentRuleResult","processNegative","getRecurrenceString","object","substring","toUpperCase","module","exports"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/scheduler/utils.recurrence.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar errors = require(\"../../core/errors\");\r\nvar extend = require(\"../../core/utils/extend\").extend;\r\nvar each = require(\"../../core/utils/iterator\").each;\r\nvar inArray = require(\"../../core/utils/array\").inArray;\r\nvar isDefined = require(\"../../core/utils/type\").isDefined;\r\nvar dateUtils = require(\"../../core/utils/date\");\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar leastDaysInWeek = 4;\r\nvar ruleNames = [\"freq\", \"interval\", \"byday\", \"byweekno\", \"byyearday\", \"bymonth\", \"bymonthday\", \"count\", \"until\", \"byhour\", \"byminute\", \"bysecond\", \"bysetpos\", \"wkst\"];\r\nvar freqNames = [\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\", \"SECONDLY\", \"MINUTELY\", \"HOURLY\"];\r\nvar days = {\r\n    SU: 0,\r\n    MO: 1,\r\n    TU: 2,\r\n    WE: 3,\r\n    TH: 4,\r\n    FR: 5,\r\n    SA: 6\r\n};\r\nvar daysNames = {\r\n    0: \"SU\",\r\n    1: \"MO\",\r\n    2: \"TU\",\r\n    3: \"WE\",\r\n    4: \"TH\",\r\n    5: \"FR\",\r\n    6: \"SA\"\r\n};\r\nvar intervalMap = {\r\n    secondly: \"seconds\",\r\n    minutely: \"minutes\",\r\n    hourly: \"hours\",\r\n    daily: \"days\",\r\n    weekly: \"weeks\",\r\n    monthly: \"months\",\r\n    yearly: \"years\"\r\n};\r\nvar resultUtils = {};\r\nvar dateSetterMap = {\r\n    bysecond: function(date, value) {\r\n        date.setSeconds(value)\r\n    },\r\n    byminute: function(date, value) {\r\n        date.setMinutes(value)\r\n    },\r\n    byhour: function(date, value) {\r\n        date.setHours(value)\r\n    },\r\n    bymonth: function(date, value) {\r\n        date.setMonth(value)\r\n    },\r\n    bymonthday: function(date, value) {\r\n        if (value < 0) {\r\n            var initialDate = new Date(date);\r\n            setDateByNegativeValue(initialDate, 1, -1);\r\n            var daysInMonth = initialDate.getDate();\r\n            if (daysInMonth >= Math.abs(value)) {\r\n                setDateByNegativeValue(date, 1, value)\r\n            } else {\r\n                setDateByNegativeValue(date, 2, value)\r\n            }\r\n        } else {\r\n            if (value <= dateUtils.getLastMonthDay(date)) {\r\n                date.setDate(value)\r\n            } else {\r\n                markWrongDate(date)\r\n            }\r\n        }\r\n    },\r\n    byday: function(date, byDay, appointmentWeekStart, frequency, firstDayOfWeek) {\r\n        var appointmentDayOfWeek = date.getDay();\r\n        var weekStart = days[appointmentWeekStart];\r\n        byDay += byDay >= weekStart === weekStart > appointmentDayOfWeek ? 7 : 0;\r\n        date.setDate(date.getDate() - appointmentDayOfWeek + byDay)\r\n    },\r\n    byweekno: function(date, weekNumber, weekStart) {\r\n        var initialDate = new Date(date);\r\n        var firstYearDate = new Date(initialDate.setMonth(0, 1));\r\n        var dayShift = firstYearDate.getDay() - days[weekStart];\r\n        var firstDayOfYear = firstYearDate.getTime() - dayShift * toMs(\"day\");\r\n        var newFirstYearDate = dayShift + 1;\r\n        if (newFirstYearDate > leastDaysInWeek) {\r\n            date.setTime(firstDayOfYear + 7 * weekNumber * toMs(\"day\"))\r\n        } else {\r\n            date.setTime(firstDayOfYear + 7 * (weekNumber - 1) * toMs(\"day\"))\r\n        }\r\n        var timezoneDiff = (date.getTimezoneOffset() - firstYearDate.getTimezoneOffset()) * toMs(\"minute\");\r\n        timezoneDiff && date.setTime(date.getTime() + timezoneDiff)\r\n    },\r\n    byyearday: function(date, dayOfYear) {\r\n        date.setMonth(0, 1);\r\n        date.setDate(dayOfYear)\r\n    }\r\n};\r\n\r\nfunction setDateByNegativeValue(date, month, value) {\r\n    var initialDate = new Date(date);\r\n    date.setMonth(date.getMonth() + month);\r\n    if (date.getMonth() - initialDate.getMonth() > month) {\r\n        date.setDate(value + 1)\r\n    }\r\n    date.setDate(value + 1)\r\n}\r\nvar dateGetterMap = {\r\n    bysecond: function(date) {\r\n        return date.getSeconds()\r\n    },\r\n    byminute: function(date) {\r\n        return date.getMinutes()\r\n    },\r\n    byhour: function(date) {\r\n        return date.getHours()\r\n    },\r\n    bymonth: function(date) {\r\n        return date.getMonth()\r\n    },\r\n    bymonthday: function(date) {\r\n        return date.getDate()\r\n    },\r\n    byday: function(date) {\r\n        return date.getDay()\r\n    },\r\n    byweekno: function(date, weekStart) {\r\n        var current = new Date(date);\r\n        var diff = leastDaysInWeek - current.getDay() + days[weekStart] - 1;\r\n        var dayInMilliseconds = toMs(\"day\");\r\n        if (date.getDay() < days[weekStart]) {\r\n            diff -= 7\r\n        }\r\n        current.setHours(0, 0, 0);\r\n        current.setDate(current.getDate() + diff);\r\n        var yearStart = new Date(current.getFullYear(), 0, 1);\r\n        var timezoneDiff = (yearStart.getTimezoneOffset() - current.getTimezoneOffset()) * toMs(\"minute\");\r\n        var daysFromYearStart = 1 + (current - yearStart + timezoneDiff) / dayInMilliseconds;\r\n        return Math.ceil(daysFromYearStart / 7)\r\n    },\r\n    byyearday: function(date) {\r\n        var yearStart = new Date(date.getFullYear(), 0, 0);\r\n        var timezoneDiff = date.getTimezoneOffset() - yearStart.getTimezoneOffset();\r\n        var diff = date - yearStart - timezoneDiff * toMs(\"minute\");\r\n        var dayLength = toMs(\"day\");\r\n        return Math.floor(diff / dayLength)\r\n    }\r\n};\r\n\r\nfunction getTimeZoneOffset() {\r\n    return (new Date).getTimezoneOffset()\r\n}\r\nvar dateInRecurrenceRange = function(options) {\r\n    var result = [];\r\n    if (options.rule) {\r\n        result = getDatesByRecurrence(options)\r\n    }\r\n    return !!result.length\r\n};\r\nvar normalizeInterval = function(rule) {\r\n    var interval = rule.interval;\r\n    var freq = rule.freq;\r\n    var intervalObject = {};\r\n    var intervalField = intervalMap[freq.toLowerCase()];\r\n    if (\"MONTHLY\" === freq && rule.byday) {\r\n        intervalField = intervalMap.daily\r\n    }\r\n    intervalObject[intervalField] = interval;\r\n    return intervalObject\r\n};\r\nvar getDatesByRecurrenceException = function(ruleValues, date) {\r\n    var result = [];\r\n    for (var i = 0, len = ruleValues.length; i < len; i++) {\r\n        result[i] = getDateByAsciiString(ruleValues[i], date)\r\n    }\r\n    return result\r\n};\r\nvar dateIsRecurrenceException = function(date, recurrenceException) {\r\n    var result = false;\r\n    if (!recurrenceException) {\r\n        return result\r\n    }\r\n    var splitDates = recurrenceException.split(\",\");\r\n    var exceptDates = getDatesByRecurrenceException(splitDates, date);\r\n    var shortFormat = /\\d{8}$/;\r\n    for (var i = 0, len = exceptDates.length; i < len; i++) {\r\n        if (splitDates[i].match(shortFormat)) {\r\n            var diffs = getDatePartDiffs(date, exceptDates[i]);\r\n            if (0 === diffs.years && 0 === diffs.months && 0 === diffs.days) {\r\n                result = true\r\n            }\r\n        } else {\r\n            if (date.getTime() === exceptDates[i].getTime()) {\r\n                result = true\r\n            }\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar doNextIteration = function(date, startIntervalDate, endIntervalDate, recurrenceRule, iterationCount) {\r\n    var matchCountIsCorrect = true;\r\n    endIntervalDate = endIntervalDate.getTime();\r\n    if (recurrenceRule.until) {\r\n        if (recurrenceRule.until.getTime() < endIntervalDate) {\r\n            endIntervalDate = recurrenceRule.until.getTime()\r\n        }\r\n    }\r\n    if (recurrenceRule.count) {\r\n        if (iterationCount === recurrenceRule.count) {\r\n            matchCountIsCorrect = false\r\n        }\r\n    }\r\n    var dateInInterval = date.getTime() <= endIntervalDate;\r\n    return dateInInterval && matchCountIsCorrect\r\n};\r\n\r\nfunction getDatesByRecurrence(options) {\r\n    var result = [];\r\n    var recurrenceRule = getRecurrenceRule(options.rule);\r\n    var iterationResult = {};\r\n    var rule = recurrenceRule.rule;\r\n    var recurrenceStartDate = options.start;\r\n    var maxDate = correctMaxDate(options.max, rule);\r\n    if (!recurrenceRule.isValid || !rule.freq) {\r\n        return result\r\n    }\r\n    rule.interval = normalizeInterval(rule);\r\n    var dateRules = splitDateRules(rule, options.firstDayOfWeek);\r\n    var duration = options.end ? options.end.getTime() - options.start.getTime() : toMs(\"day\");\r\n    var config = {\r\n        exception: options.exception,\r\n        min: options.min,\r\n        dateRules: dateRules,\r\n        rule: rule,\r\n        recurrenceStartDate: recurrenceStartDate,\r\n        recurrenceEndDate: options.end,\r\n        duration: duration\r\n    };\r\n    if (dateRules.length && rule.count) {\r\n        var iteration = 0;\r\n        getDatesByCount(dateRules, new Date(recurrenceStartDate), new Date(recurrenceStartDate), rule).forEach(function(currentDate, i) {\r\n            if (currentDate < maxDate) {\r\n                iteration++;\r\n                iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config, true)\r\n            }\r\n        })\r\n    } else {\r\n        getDatesByRules(dateRules, new Date(recurrenceStartDate), rule).forEach(function(currentDate, i) {\r\n            var iteration = 0;\r\n            while (doNextIteration(currentDate, recurrenceStartDate, maxDate, rule, iteration)) {\r\n                iteration++;\r\n                iterationResult = pushToResult(iteration, iterationResult, currentDate, i, config);\r\n                currentDate = incrementDate(currentDate, recurrenceStartDate, rule, i)\r\n            }\r\n        })\r\n    }\r\n    if (rule.bysetpos) {\r\n        each(iterationResult, function(iterationIndex, iterationDates) {\r\n            iterationResult[iterationIndex] = filterDatesBySetPos(iterationDates, rule.bysetpos)\r\n        })\r\n    }\r\n    each(iterationResult, function(_, iterationDates) {\r\n        result = result.concat(iterationDates)\r\n    });\r\n    result = result.filter(function(date) {\r\n        return date <= options.max\r\n    });\r\n    result.sort(function(a, b) {\r\n        return a - b\r\n    });\r\n    return result\r\n}\r\n\r\nfunction pushToResult(iteration, iterationResult, currentDate, i, config, verifiedField) {\r\n    if (!iterationResult[iteration]) {\r\n        iterationResult[iteration] = []\r\n    }\r\n    if (checkDate(currentDate, i, config, verifiedField)) {\r\n        iterationResult[iteration].push(currentDate)\r\n    }\r\n    return iterationResult\r\n}\r\n\r\nfunction checkDate(currentDate, i, config, verifiedField) {\r\n    if (!dateIsRecurrenceException(currentDate, config.exception)) {\r\n        var duration = dateUtils.sameDate(currentDate, config.recurrenceEndDate) && config.recurrenceEndDate.getTime() > currentDate.getTime() ? config.recurrenceEndDate.getTime() - currentDate.getTime() : config.duration;\r\n        if (currentDate.getTime() >= config.recurrenceStartDate.getTime() && currentDate.getTime() + duration > config.min.getTime()) {\r\n            return verifiedField || checkDateByRule(currentDate, [config.dateRules[i]], config.rule.wkst)\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction filterDatesBySetPos(dates, bySetPos) {\r\n    var resultArray = [];\r\n    bySetPos.split(\",\").forEach(function(index) {\r\n        index = Number(index);\r\n        var dateIndex = index > 0 ? index - 1 : dates.length + index;\r\n        if (dates[dateIndex]) {\r\n            resultArray.push(dates[dateIndex])\r\n        }\r\n    });\r\n    return resultArray\r\n}\r\n\r\nfunction correctMaxDate(maxDate, rule) {\r\n    var newMaxDate = new Date(maxDate);\r\n    switch (rule.freq) {\r\n        case \"MONTHLY\":\r\n            newMaxDate.setMonth(newMaxDate.getMonth() + 1);\r\n            break;\r\n        case \"YEARLY\":\r\n            newMaxDate.setYear(newMaxDate.getYear() + 1)\r\n    }\r\n    return newMaxDate > maxDate ? newMaxDate : maxDate\r\n}\r\n\r\nfunction correctDate(originalDate, date) {\r\n    if (originalDate.getDate() !== date) {\r\n        originalDate.setDate(date)\r\n    }\r\n}\r\n\r\nfunction incrementDate(date, originalStartDate, rule, iterationStep) {\r\n    var initialDate = new Date(date);\r\n    var needCorrect = true;\r\n    date = dateUtils.addInterval(date, rule.interval);\r\n    if (\"DAILY\" === rule.freq && !isDefined(rule.byhour) && originalStartDate.getHours() !== date.getHours()) {\r\n        date = new Date(date.getTime() - (initialDate.getHours() - originalStartDate.getHours()) * toMs(\"hour\"))\r\n    }\r\n    if (\"MONTHLY\" === rule.freq && !rule.byday) {\r\n        var expectedDate = originalStartDate.getDate();\r\n        if (rule.bymonthday) {\r\n            expectedDate = Number(rule.bymonthday.split(\",\")[iterationStep]);\r\n            if (expectedDate < 0) {\r\n                initialDate.setMonth(initialDate.getMonth() + 1, 1);\r\n                dateSetterMap.bymonthday(initialDate, expectedDate);\r\n                date = initialDate;\r\n                needCorrect = false\r\n            }\r\n        }\r\n        needCorrect && correctDate(date, expectedDate)\r\n    }\r\n    if (\"YEARLY\" === rule.freq) {\r\n        if (rule.byyearday) {\r\n            var dayNumber = Number(rule.byyearday.split(\",\")[iterationStep]);\r\n            dateSetterMap.byyearday(date, dayNumber)\r\n        }\r\n        var dateRules = splitDateRules(rule);\r\n        for (var field in dateRules[iterationStep]) {\r\n            dateSetterMap[field] && dateSetterMap[field](date, dateRules[iterationStep][field], rule.wkst)\r\n        }\r\n    }\r\n    return date\r\n}\r\n\r\nfunction getDatePartDiffs(date1, date2) {\r\n    return {\r\n        years: date1.getFullYear() - date2.getFullYear(),\r\n        months: date1.getMonth() - date2.getMonth(),\r\n        days: date1.getDate() - date2.getDate(),\r\n        hours: date1.getHours() - date2.getHours(),\r\n        minutes: date1.getMinutes() - date2.getMinutes(),\r\n        seconds: date1.getSeconds() - date2.getSeconds()\r\n    }\r\n}\r\n\r\nfunction getRecurrenceRule(recurrence) {\r\n    var result = {\r\n        rule: {},\r\n        isValid: false\r\n    };\r\n    if (recurrence) {\r\n        result.rule = parseRecurrenceRule(recurrence);\r\n        result.isValid = validateRRule(result.rule, recurrence)\r\n    }\r\n    return result\r\n}\r\nvar loggedWarnings = [];\r\n\r\nfunction validateRRule(rule, recurrence) {\r\n    if (brokenRuleNameExists(rule) || inArray(rule.freq, freqNames) === -1 || wrongCountRule(rule) || wrongIntervalRule(rule) || wrongDayOfWeek(rule) || wrongByMonthDayRule(rule) || wrongByMonth(rule) || wrongUntilRule(rule)) {\r\n        logBrokenRule(recurrence);\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nfunction wrongUntilRule(rule) {\r\n    var wrongUntil = false;\r\n    var until = rule.until;\r\n    if (void 0 !== until && !(until instanceof Date)) {\r\n        wrongUntil = true\r\n    }\r\n    return wrongUntil\r\n}\r\n\r\nfunction wrongCountRule(rule) {\r\n    var wrongCount = false;\r\n    var count = rule.count;\r\n    if (count && \"string\" === typeof count) {\r\n        wrongCount = true\r\n    }\r\n    return wrongCount\r\n}\r\n\r\nfunction wrongByMonthDayRule(rule) {\r\n    var wrongByMonthDay = false;\r\n    var byMonthDay = rule.bymonthday;\r\n    if (byMonthDay && isNaN(parseInt(byMonthDay))) {\r\n        wrongByMonthDay = true\r\n    }\r\n    return wrongByMonthDay\r\n}\r\n\r\nfunction wrongByMonth(rule) {\r\n    var wrongByMonth = false;\r\n    var byMonth = rule.bymonth;\r\n    if (byMonth && isNaN(parseInt(byMonth))) {\r\n        wrongByMonth = true\r\n    }\r\n    return wrongByMonth\r\n}\r\n\r\nfunction wrongIntervalRule(rule) {\r\n    var wrongInterval = false;\r\n    var interval = rule.interval;\r\n    if (interval && \"string\" === typeof interval) {\r\n        wrongInterval = true\r\n    }\r\n    return wrongInterval\r\n}\r\n\r\nfunction wrongDayOfWeek(rule) {\r\n    var daysByRule = daysFromByDayRule(rule);\r\n    var brokenDaysExist = false;\r\n    each(daysByRule, function(_, day) {\r\n        if (!Object.prototype.hasOwnProperty.call(days, day)) {\r\n            brokenDaysExist = true;\r\n            return false\r\n        }\r\n    });\r\n    return brokenDaysExist\r\n}\r\n\r\nfunction brokenRuleNameExists(rule) {\r\n    var brokenRuleExists = false;\r\n    each(rule, function(ruleName) {\r\n        if (inArray(ruleName, ruleNames) === -1) {\r\n            brokenRuleExists = true;\r\n            return false\r\n        }\r\n    });\r\n    return brokenRuleExists\r\n}\r\n\r\nfunction logBrokenRule(recurrence) {\r\n    if (inArray(recurrence, loggedWarnings) === -1) {\r\n        errors.log(\"W0006\", recurrence);\r\n        loggedWarnings.push(recurrence)\r\n    }\r\n}\r\n\r\nfunction parseRecurrenceRule(recurrence) {\r\n    var ruleObject = {};\r\n    var ruleParts = recurrence.split(\";\");\r\n    for (var i = 0, len = ruleParts.length; i < len; i++) {\r\n        var rule = ruleParts[i].split(\"=\");\r\n        var ruleName = rule[0].toLowerCase();\r\n        var ruleValue = rule[1];\r\n        ruleObject[ruleName] = ruleValue\r\n    }\r\n    var count = parseInt(ruleObject.count);\r\n    if (!isNaN(count)) {\r\n        ruleObject.count = count\r\n    }\r\n    if (ruleObject.interval) {\r\n        var interval = parseInt(ruleObject.interval);\r\n        if (!isNaN(interval)) {\r\n            ruleObject.interval = interval\r\n        }\r\n    } else {\r\n        ruleObject.interval = 1\r\n    }\r\n    if (ruleObject.freq && ruleObject.until) {\r\n        ruleObject.until = getDateByAsciiString(ruleObject.until)\r\n    }\r\n    return ruleObject\r\n}\r\n\r\nfunction getDateByAsciiString(string, initialDate) {\r\n    if (\"string\" !== typeof string) {\r\n        return string\r\n    }\r\n    var arrayDate = string.match(/(\\d{4})(\\d{2})(\\d{2})(T(\\d{2})(\\d{2})(\\d{2}))?(Z)?/);\r\n    if (!arrayDate) {\r\n        return null\r\n    }\r\n    var isUTC = void 0 !== arrayDate[8];\r\n    var currentOffset = initialDate ? initialDate.getTimezoneOffset() : resultUtils.getTimeZoneOffset();\r\n    var date = new(Function.prototype.bind.apply(Date, prepareDateArrayToParse(arrayDate)));\r\n    currentOffset = 6e4 * currentOffset;\r\n    if (isUTC) {\r\n        date = new Date(date.getTime() - currentOffset)\r\n    }\r\n    return date\r\n}\r\n\r\nfunction prepareDateArrayToParse(arrayDate) {\r\n    arrayDate.shift();\r\n    if (void 0 === arrayDate[3]) {\r\n        arrayDate.splice(3)\r\n    } else {\r\n        arrayDate.splice(3, 1);\r\n        arrayDate.splice(6)\r\n    }\r\n    arrayDate[1]--;\r\n    arrayDate.unshift(null);\r\n    return arrayDate\r\n}\r\n\r\nfunction daysFromByDayRule(rule) {\r\n    var result = [];\r\n    if (rule.byday) {\r\n        if (Array.isArray(rule.byday)) {\r\n            result = rule.byday\r\n        } else {\r\n            result = rule.byday.split(\",\")\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getAsciiStringByDate(date) {\r\n    var currentOffset = 6e4 * resultUtils.getTimeZoneOffset();\r\n    date = new Date(date.getTime() + currentOffset);\r\n    return date.getFullYear() + (\"0\" + (date.getMonth() + 1)).slice(-2) + (\"0\" + date.getDate()).slice(-2) + \"T\" + (\"0\" + date.getHours()).slice(-2) + (\"0\" + date.getMinutes()).slice(-2) + (\"0\" + date.getSeconds()).slice(-2) + \"Z\"\r\n}\r\n\r\nfunction splitDateRules(rule) {\r\n    var firstDayOfWeek = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null;\r\n    var result = [];\r\n    if (isDefined(firstDayOfWeek)) {\r\n        rule.fdow = firstDayOfWeek\r\n    }\r\n    if (!rule.wkst) {\r\n        rule.wkst = isDefined(firstDayOfWeek) ? daysNames[firstDayOfWeek] : \"MO\"\r\n    }\r\n    if (rule.byweekno && !rule.byday) {\r\n        var dayNames = Object.keys(days);\r\n        for (var i = 0; i < days[rule.wkst]; i++) {\r\n            dayNames.push(dayNames.shift())\r\n        }\r\n        rule.byday = dayNames.join(\",\")\r\n    }\r\n    for (var field in dateSetterMap) {\r\n        if (!rule[field]) {\r\n            continue\r\n        }\r\n        var ruleFieldValues = rule[field].split(\",\");\r\n        var ruleArray = getDateRuleArray(field, ruleFieldValues);\r\n        result = result.length ? extendObjectArray(ruleArray, result) : ruleArray\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getDateRuleArray(field, values) {\r\n    var result = [];\r\n    for (var i = 0, length = values.length; i < length; i++) {\r\n        var dateRule = {};\r\n        dateRule[field] = handleRuleFieldValue(field, values[i]);\r\n        result.push(dateRule)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction handleRuleFieldValue(field, value) {\r\n    var result = parseInt(value);\r\n    if (\"bymonth\" === field) {\r\n        result -= 1\r\n    }\r\n    if (\"byday\" === field) {\r\n        result = days[value]\r\n    }\r\n    return result\r\n}\r\n\r\nfunction extendObjectArray(firstArray, secondArray) {\r\n    var result = [];\r\n    for (var i = 0, firstArrayLength = firstArray.length; i < firstArrayLength; i++) {\r\n        for (var j = 0, secondArrayLength = secondArray.length; j < secondArrayLength; j++) {\r\n            result.push(extend({}, firstArray[i], secondArray[j]))\r\n        }\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getDatesByRules(dateRules, startDate, rule) {\r\n    var result = [];\r\n    for (var i = 0, len = dateRules.length; i < len; i++) {\r\n        var current = dateRules[i];\r\n        var updatedDate = prepareDate(startDate, dateRules, rule.wkst);\r\n        for (var field in current) {\r\n            dateSetterMap[field] && dateSetterMap[field](updatedDate, current[field], rule.wkst, rule.freq, rule.fdow)\r\n        }\r\n        if (Array.isArray(updatedDate)) {\r\n            result = result.concat(updatedDate)\r\n        } else {\r\n            var date = !isWrongDate(updatedDate) ? new Date(updatedDate) : updatedDate;\r\n            result.push(date)\r\n        }\r\n    }\r\n    if (!result.length) {\r\n        result.push(startDate)\r\n    }\r\n    return result\r\n}\r\n\r\nfunction getDatesByCount(dateRules, startDate, recurrenceStartDate, rule) {\r\n    var result = [];\r\n    var count = rule.count;\r\n    var counter = 0;\r\n    var date = prepareDate(startDate, dateRules, rule.wkst);\r\n    var _loop = function() {\r\n        var dates = getDatesByRules(dateRules, date, rule);\r\n        var checkedDates = [];\r\n        dates.forEach(function(checkedDate) {\r\n            if (!isWrongDate(checkedDate)) {\r\n                if (checkedDate.getTime() >= recurrenceStartDate.getTime()) {\r\n                    checkedDates.push(checkedDate)\r\n                }\r\n            }\r\n        });\r\n        var length = checkedDates.length;\r\n        counter += length;\r\n        var delCount = counter - count;\r\n        if (counter > count) {\r\n            checkedDates.splice(length - delCount, delCount)\r\n        }\r\n        checkedDates.forEach(function(checkedDate) {\r\n            return result.push(checkedDate)\r\n        });\r\n        var interval = rule.interval;\r\n        if (\"days\" === Object.keys(interval)[0]) {\r\n            interval = {\r\n                weeks: 1\r\n            }\r\n        }\r\n        date = dateUtils.addInterval(date, interval)\r\n    };\r\n    while (counter < count) {\r\n        _loop()\r\n    }\r\n    return result\r\n}\r\n\r\nfunction prepareDate(startDate, dateRules, weekStartRule) {\r\n    var date = new Date(startDate);\r\n    var day = date.getDay();\r\n    if (dateRules.length && isDefined(dateRules[0].byday)) {\r\n        date.setDate(date.getDate() - day + days[weekStartRule] - (day < days[weekStartRule] ? 7 : 0))\r\n    } else {\r\n        date.setDate(1)\r\n    }\r\n    return date\r\n}\r\n\r\nfunction checkDateByRule(date, rules, weekStart) {\r\n    var result = false;\r\n    for (var i = 0; i < rules.length; i++) {\r\n        var current = rules[i];\r\n        var currentRuleResult = true;\r\n        for (var field in current) {\r\n            var processNegative = \"bymonthday\" === field && current[field] < 0;\r\n            if (dateGetterMap[field] && !processNegative && current[field] !== dateGetterMap[field](date, weekStart)) {\r\n                currentRuleResult = false\r\n            }\r\n        }\r\n        result = result || currentRuleResult\r\n    }\r\n    return result || !rules.length\r\n}\r\n\r\nfunction markWrongDate(date) {\r\n    date.isWrongDate = true\r\n}\r\n\r\nfunction isWrongDate(date) {\r\n    return date.isWrongDate\r\n}\r\nvar getRecurrenceString = function(object) {\r\n    if (!object || !object.freq) {\r\n        return\r\n    }\r\n    var result = \"\";\r\n    for (var field in object) {\r\n        var value = object[field];\r\n        if (\"interval\" === field && value < 2) {\r\n            continue\r\n        }\r\n        if (\"until\" === field) {\r\n            value = getAsciiStringByDate(value)\r\n        }\r\n        result += field + \"=\" + value + \";\"\r\n    }\r\n    result = result.substring(0, result.length - 1);\r\n    return result.toUpperCase()\r\n};\r\nextend(resultUtils, {\r\n    getRecurrenceString: getRecurrenceString,\r\n    getRecurrenceRule: getRecurrenceRule,\r\n    getAsciiStringByDate: getAsciiStringByDate,\r\n    getDatesByRecurrence: getDatesByRecurrence,\r\n    dateInRecurrenceRange: dateInRecurrenceRange,\r\n    getDateByAsciiString: getDateByAsciiString,\r\n    daysFromByDayRule: daysFromByDayRule,\r\n    getTimeZoneOffset: getTimeZoneOffset\r\n});\r\nmodule.exports = resultUtils;\r\n"]},"metadata":{},"sourceType":"script"}