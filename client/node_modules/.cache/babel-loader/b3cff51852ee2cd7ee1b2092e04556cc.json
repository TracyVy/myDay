{"ast":null,"code":"var _jsxFileName = \"/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/src/components/Weather/Forecast.js\";\nimport React, { useState } from \"react\";\nimport Conditions from \"./Conditions\";\nimport classes from \"./Forecast.module.css\";\n\nconst Forecast = () => {\n  let [city, setCity] = useState(\"\");\n  let [unit, setUnit] = useState(\"imperial\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // Clear state in preparation for new data\n\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    fetch( // Current Forecast\n    `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, // `https://community-open-weather-map.p.rapidapi.com/forecast?q=${uriEncodedCity}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n      }\n    }).then(response => response.json()).then(response => {\n      console.log(response);\n\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"Find Current Weather Conditions\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getForecast,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter City\",\n    maxLength: \"50\",\n    className: classes.textInput,\n    value: city,\n    onChange: e => setCity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"imperial\",\n    value: \"imperial\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), \"Fahrenheit\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"metric\",\n    value: \"metric\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }), \"Celcius\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.Button,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Get Forecast\")), /*#__PURE__*/React.createElement(Conditions, {\n    responseObj: responseObj,\n    error: error,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/src/components/Weather/Forecast.js"],"names":["React","useState","Conditions","classes","Forecast","city","setCity","unit","setUnit","responseObj","setResponseObj","error","setError","loading","setLoading","uriEncodedCity","encodeURIComponent","getForecast","e","preventDefault","length","fetch","method","headers","process","env","REACT_APP_API_KEY","then","response","json","console","log","cod","Error","catch","err","message","textInput","target","value","Radio","Button"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Conditions from \"./Conditions\";\nimport classes from \"./Forecast.module.css\";\n\nconst Forecast = () => {\n  let [city, setCity] = useState(\"\");\n  let [unit, setUnit] = useState(\"imperial\");\n  let [responseObj, setResponseObj] = useState({});\n  let [error, setError] = useState(false);\n  let [loading, setLoading] = useState(false);\n\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n\n    setLoading(true);\n\n    fetch(\n      // Current Forecast\n      `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`,\n      // `https://community-open-weather-map.p.rapidapi.com/forecast?q=${uriEncodedCity}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n        },\n      }\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        if (response.cod !== 200) {\n          throw new Error();\n        }\n        setResponseObj(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(true);\n        setLoading(false);\n        console.log(err.message);\n      });\n  }\n\n  return (\n    <div>\n      <h2>Find Current Weather Conditions</h2>\n\n      <form onSubmit={getForecast}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter City\"\n          maxLength=\"50\"\n          className={classes.textInput}\n          value={city}\n          onChange={(e) => setCity(e.target.value)}\n        />\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"imperial\"}\n            value=\"imperial\"\n            onChange={(e) => setUnit(e.target.value)}\n          />\n          Fahrenheit\n        </label>\n        <label className={classes.Radio}>\n          <input\n            type=\"radio\"\n            name=\"units\"\n            checked={unit === \"metric\"}\n            value=\"metric\"\n            onChange={(e) => setUnit(e.target.value)}\n          />\n          Celcius\n        </label>\n\n        <button className={classes.Button} type=\"submit\">\n          Get Forecast\n        </button>\n      </form>\n\n      <Conditions responseObj={responseObj} error={error} loading={loading} />\n    </div>\n  );\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}