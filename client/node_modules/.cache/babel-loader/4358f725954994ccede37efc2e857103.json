{"ast":null,"code":"var _jsxFileName = \"/Users/tracyvy/Desktop/calendar/client/src/components/login-form/login-form.js\";\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, { Item, Label, ButtonItem, ButtonOptions, RequiredRule, EmailRule } from 'devextreme-react/form';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport notify from 'devextreme/ui/notify';\nimport { useAuth } from '../../contexts/auth';\nimport './login-form.scss';\nexport default function () {\n  const history = useHistory();\n  const {\n    signIn\n  } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n  const onSubmit = useCallback(async e => {\n    e.preventDefault();\n    const {\n      email,\n      password\n    } = formData.current;\n    setLoading(true);\n    const result = await signIn(email, password);\n\n    if (!result.isOk) {\n      setLoading(false);\n      notify(result.message, 'error', 2000);\n    }\n  }, [signIn]);\n  const onCreateAccountClick = useCallback(() => {\n    history.push('/create-account');\n  }, [history]);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: 'login-form',\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    formData: formData.current,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Item, {\n    dataField: 'email',\n    editorType: 'dxTextBox',\n    editorOptions: emailEditorOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RequiredRule, {\n    message: \"Email is required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(EmailRule, {\n    message: \"Email is invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    visible: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Item, {\n    dataField: 'password',\n    editorType: 'dxTextBox',\n    editorOptions: passwordEditorOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(RequiredRule, {\n    message: \"Password is required\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Label, {\n    visible: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Item, {\n    dataField: 'rememberMe',\n    editorType: 'dxCheckBox',\n    editorOptions: rememberMeEditorOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    visible: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(ButtonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOptions, {\n    width: '100%',\n    type: 'default',\n    useSubmitBehavior: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"dx-button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadIndicator, {\n    width: '24px',\n    height: '24px',\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }) : 'Sign In'))), /*#__PURE__*/React.createElement(Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: 'link',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: '/reset-password',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, \"Forgot password?\"))), /*#__PURE__*/React.createElement(ButtonItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ButtonOptions, {\n    text: 'Create an account',\n    width: '100%',\n    onClick: onCreateAccountClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }))));\n}\nconst emailEditorOptions = {\n  stylingMode: 'filled',\n  placeholder: 'Email',\n  mode: 'email'\n};\nconst passwordEditorOptions = {\n  stylingMode: 'filled',\n  placeholder: 'Password',\n  mode: 'password'\n};\nconst rememberMeEditorOptions = {\n  text: 'Remember me',\n  elementAttr: {\n    class: 'form-text'\n  }\n};","map":{"version":3,"sources":["/Users/tracyvy/Desktop/calendar/client/src/components/login-form/login-form.js"],"names":["React","useState","useRef","useCallback","Link","useHistory","Form","Item","Label","ButtonItem","ButtonOptions","RequiredRule","EmailRule","LoadIndicator","notify","useAuth","history","signIn","loading","setLoading","formData","onSubmit","e","preventDefault","email","password","current","result","isOk","message","onCreateAccountClick","push","emailEditorOptions","passwordEditorOptions","rememberMeEditorOptions","stylingMode","placeholder","mode","text","elementAttr","class"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,EAAkCC,WAAlC,QAAqD,OAArD;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AACA,OAAOC,IAAP,IACEC,IADF,EAEEC,KAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,SANF,QAOO,uBAPP;AAQA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AAEA,OAAO,mBAAP;AAEA,eAAe,YAAY;AACzB,QAAMC,OAAO,GAAGX,UAAU,EAA1B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAaF,OAAO,EAA1B;AACA,QAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAMmB,QAAQ,GAAGlB,MAAM,CAAC,EAAD,CAAvB;AAEA,QAAMmB,QAAQ,GAAGlB,WAAW,CAAC,MAAOmB,CAAP,IAAa;AACxCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,QAAQ,CAACM,OAArC;AACAP,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAMQ,MAAM,GAAG,MAAMV,MAAM,CAACO,KAAD,EAAQC,QAAR,CAA3B;;AACA,QAAI,CAACE,MAAM,CAACC,IAAZ,EAAkB;AAChBT,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAL,MAAAA,MAAM,CAACa,MAAM,CAACE,OAAR,EAAiB,OAAjB,EAA0B,IAA1B,CAAN;AACD;AACF,GAV2B,EAUzB,CAACZ,MAAD,CAVyB,CAA5B;AAYA,QAAMa,oBAAoB,GAAG3B,WAAW,CAAC,MAAM;AAC7Ca,IAAAA,OAAO,CAACe,IAAR,CAAa,iBAAb;AACD,GAFuC,EAErC,CAACf,OAAD,CAFqC,CAAxC;AAIA,sBACE;AAAM,IAAA,SAAS,EAAE,YAAjB;AAA+B,IAAA,QAAQ,EAAEK,QAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAED,QAAQ,CAACM,OAAzB;AAAkC,IAAA,QAAQ,EAAER,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAE,OADb;AAEE,IAAA,UAAU,EAAE,WAFd;AAGE,IAAA,aAAa,EAAEc,kBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAC,mBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAME,oBAAC,SAAD;AAAW,IAAA,OAAO,EAAC,kBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAOE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,CADF,eAUE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAE,UADb;AAEE,IAAA,UAAU,EAAE,WAFd;AAGE,IAAA,aAAa,EAAEC,qBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAC,sBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAME,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAVF,eAkBE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAE,YADb;AAEE,IAAA,UAAU,EAAE,YAFd;AAGE,IAAA,aAAa,EAAEC,uBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CAlBF,eAyBE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,KAAK,EAAE,MADT;AAEE,IAAA,IAAI,EAAE,SAFR;AAGE,IAAA,iBAAiB,EAAE,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIhB,OAAO,gBACH,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAE,MAAtB;AAA8B,IAAA,MAAM,EAAE,MAAtC;AAA8C,IAAA,OAAO,EAAE,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,GAEH,SAJR,CALF,CADF,CAzBF,eAwCE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,CAxCF,eA6CE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,IAAI,EAAE,mBADR;AAEE,IAAA,KAAK,EAAE,MAFT;AAGE,IAAA,OAAO,EAAEY,oBAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7CF,CADF,CADF;AAyDD;AAED,MAAME,kBAAkB,GAAG;AAAEG,EAAAA,WAAW,EAAE,QAAf;AAAyBC,EAAAA,WAAW,EAAE,OAAtC;AAA+CC,EAAAA,IAAI,EAAE;AAArD,CAA3B;AACA,MAAMJ,qBAAqB,GAAG;AAAEE,EAAAA,WAAW,EAAE,QAAf;AAAyBC,EAAAA,WAAW,EAAE,UAAtC;AAAkDC,EAAAA,IAAI,EAAE;AAAxD,CAA9B;AACA,MAAMH,uBAAuB,GAAG;AAAEI,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT;AAApC,CAAhC","sourcesContent":["import React, { useState, useRef, useCallback } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport Form, {\n  Item,\n  Label,\n  ButtonItem,\n  ButtonOptions,\n  RequiredRule,\n  EmailRule\n} from 'devextreme-react/form';\nimport LoadIndicator from 'devextreme-react/load-indicator';\nimport notify from 'devextreme/ui/notify';\nimport { useAuth } from '../../contexts/auth';\n\nimport './login-form.scss';\n\nexport default function () {\n  const history = useHistory();\n  const { signIn } = useAuth();\n  const [loading, setLoading] = useState(false);\n  const formData = useRef({});\n\n  const onSubmit = useCallback(async (e) => {\n    e.preventDefault();\n    const { email, password } = formData.current;\n    setLoading(true);\n\n    const result = await signIn(email, password);\n    if (!result.isOk) {\n      setLoading(false);\n      notify(result.message, 'error', 2000);\n    }\n  }, [signIn]);\n\n  const onCreateAccountClick = useCallback(() => {\n    history.push('/create-account');\n  }, [history]);\n\n  return (\n    <form className={'login-form'} onSubmit={onSubmit}>\n      <Form formData={formData.current} disabled={loading}>\n        <Item\n          dataField={'email'}\n          editorType={'dxTextBox'}\n          editorOptions={emailEditorOptions}\n        >\n          <RequiredRule message=\"Email is required\" />\n          <EmailRule message=\"Email is invalid\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'password'}\n          editorType={'dxTextBox'}\n          editorOptions={passwordEditorOptions}\n        >\n          <RequiredRule message=\"Password is required\" />\n          <Label visible={false} />\n        </Item>\n        <Item\n          dataField={'rememberMe'}\n          editorType={'dxCheckBox'}\n          editorOptions={rememberMeEditorOptions}\n        >\n          <Label visible={false} />\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            width={'100%'}\n            type={'default'}\n            useSubmitBehavior={true}\n          >\n            <span className=\"dx-button-text\">\n              {\n                loading\n                  ? <LoadIndicator width={'24px'} height={'24px'} visible={true} />\n                  : 'Sign In'\n              }\n            </span>\n          </ButtonOptions>\n        </ButtonItem>\n        <Item>\n          <div className={'link'}>\n            <Link to={'/reset-password'}>Forgot password?</Link>\n          </div>\n        </Item>\n        <ButtonItem>\n          <ButtonOptions\n            text={'Create an account'}\n            width={'100%'}\n            onClick={onCreateAccountClick}\n          />\n        </ButtonItem>\n      </Form>\n    </form>\n  );\n}\n\nconst emailEditorOptions = { stylingMode: 'filled', placeholder: 'Email', mode: 'email' };\nconst passwordEditorOptions = { stylingMode: 'filled', placeholder: 'Password', mode: 'password' };\nconst rememberMeEditorOptions = { text: 'Remember me', elementAttr: { class: 'form-text' } };\n"]},"metadata":{},"sourceType":"module"}