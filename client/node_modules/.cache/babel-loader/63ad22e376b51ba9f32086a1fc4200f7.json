{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _callbacks = require(\"../../core/utils/callbacks\");\n\nvar _callbacks2 = _interopRequireDefault(_callbacks);\n\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\n\nvar _data = require(\"../../core/utils/data\");\n\nvar _data2 = _interopRequireDefault(_data);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _iterator2 = _interopRequireDefault(_iterator);\n\nvar _position = require(\"../../core/utils/position\");\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _array = require(\"../../core/utils/array\");\n\nvar _config = require(\"../../core/config\");\n\nvar _config2 = _interopRequireDefault(_config);\n\nvar _object = require(\"../../core/utils/object\");\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _inflector = require(\"../../core/utils/inflector\");\n\nvar _inflector2 = _interopRequireDefault(_inflector);\n\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\n\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\n\nvar _number = require(\"../../localization/number\");\n\nvar _number2 = _interopRequireDefault(_number);\n\nvar _date = require(\"../../localization/date\");\n\nvar _date2 = _interopRequireDefault(_date);\n\nvar _message = require(\"../../localization/message\");\n\nvar _message2 = _interopRequireDefault(_message);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _abstract_store = require(\"../../data/abstract_store\");\n\nvar _abstract_store2 = _interopRequireDefault(_abstract_store);\n\nvar _data_source = require(\"../../data/data_source/data_source\");\n\nvar _utils = require(\"../../data/data_source/utils\");\n\nvar _filtering = require(\"../shared/filtering\");\n\nvar _filtering2 = _interopRequireDefault(_filtering);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"selectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\nvar IGNORE_COLUMN_OPTION_NAMES = {\n  visibleWidth: true,\n  bestFitWidth: true,\n  bufferedFilterValue: true\n};\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\nvar globalColumnId = 1;\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      commonColumnSettings: {\n        allowFiltering: true,\n        allowHiding: true,\n        allowSorting: true,\n        allowEditing: true,\n        encodeHtml: true,\n        trueText: _message2.default.format(\"dxDataGrid-trueText\"),\n        falseText: _message2.default.format(\"dxDataGrid-falseText\")\n      },\n      allowColumnReordering: false,\n      allowColumnResizing: false,\n      columnResizingMode: \"nextColumn\",\n      columnMinWidth: void 0,\n      columnWidth: void 0,\n      adaptColumnWidthByRatio: true,\n      columns: void 0,\n      regenerateColumnsByVisibleItems: false,\n      customizeColumns: null,\n      dateSerializationFormat: void 0\n    };\n  },\n  controllers: {\n    columns: _uiGrid_core2.default.Controller.inherit(function () {\n      var DEFAULT_COLUMN_OPTIONS = {\n        visible: true,\n        showInColumnChooser: true\n      };\n      var DATATYPE_OPERATIONS = {\n        number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\n        date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\n        datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\n      };\n      var COLUMN_INDEX_OPTIONS = {\n        visibleIndex: true,\n        groupIndex: true,\n        grouped: true,\n        sortIndex: true,\n        sortOrder: true\n      };\n      var GROUP_LOCATION = \"group\";\n      var COLUMN_CHOOSER_LOCATION = \"columnChooser\";\n\n      var setFilterOperationsAsDefaultValues = function (column) {\n        column.filterOperations = column.defaultFilterOperations;\n      };\n\n      var createColumn = function (that, columnOptions, userStateColumnOptions, bandColumn) {\n        var commonColumnOptions = {};\n\n        if (columnOptions) {\n          if ((0, _type.isString)(columnOptions)) {\n            columnOptions = {\n              dataField: columnOptions\n            };\n          }\n\n          var result = {};\n\n          if (columnOptions.command) {\n            result = (0, _object.deepExtendArraySafe)(commonColumnOptions, columnOptions);\n          } else {\n            commonColumnOptions = that.getCommonSettings(columnOptions);\n\n            if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\n              columnOptions = (0, _extend.extend)({}, columnOptions, {\n                dataField: userStateColumnOptions.dataField\n              });\n            }\n\n            var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\n\n            if (!columnOptions.type) {\n              result = {\n                headerId: \"dx-col-\".concat(globalColumnId++)\n              };\n            }\n\n            result = (0, _object.deepExtendArraySafe)(result, DEFAULT_COLUMN_OPTIONS);\n            (0, _object.deepExtendArraySafe)(result, commonColumnOptions);\n            (0, _object.deepExtendArraySafe)(result, calculatedColumnOptions);\n            (0, _object.deepExtendArraySafe)(result, columnOptions);\n            (0, _object.deepExtendArraySafe)(result, {\n              selector: null\n            });\n          }\n\n          if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\n            setFilterOperationsAsDefaultValues(result);\n          }\n\n          return result;\n        }\n      };\n\n      var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\n        var result = [];\n\n        if (columnsOptions) {\n          _iterator2.default.each(columnsOptions, function (index, columnOptions) {\n            var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\n\n            var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\n\n            if (column) {\n              if (bandColumn) {\n                column.ownerBand = bandColumn;\n              }\n\n              result.push(column);\n\n              if (column.columns) {\n                result = result.concat(createColumnsFromOptions(that, column.columns, column));\n                delete column.columns;\n                column.hasColumns = true;\n              }\n            }\n          });\n        }\n\n        return result;\n      };\n\n      var getParentBandColumns = function (columnIndex, columnParentByIndex) {\n        var result = [];\n        var parent = columnParentByIndex[columnIndex];\n\n        while (parent) {\n          result.unshift(parent);\n          columnIndex = parent.index;\n          parent = columnParentByIndex[columnIndex];\n        }\n\n        return result;\n      };\n\n      var _getChildrenByBandColumn = function (columnIndex, columnChildrenByIndex, recursive) {\n        var result = [];\n        var children = columnChildrenByIndex[columnIndex];\n\n        if (children) {\n          for (var i = 0; i < children.length; i++) {\n            var column = children[i];\n\n            if (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped) {\n              result.push(column);\n\n              if (recursive && column.isBand) {\n                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive));\n              }\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var getColumnByIndexes = function (that, columnIndexes) {\n        var result;\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var callbackFilter = function (column) {\n          var ownerBand = result ? result.index : void 0;\n          return column.ownerBand === ownerBand;\n        };\n\n        if (bandColumnsCache.isPlain) {\n          result = that._columns[columnIndexes[0]];\n        } else {\n          columns = that._columns.filter(callbackFilter);\n\n          for (var i = 0; i < columnIndexes.length; i++) {\n            result = columns[columnIndexes[i]];\n\n            if (result) {\n              columns = that._columns.filter(callbackFilter);\n            }\n          }\n        }\n\n        return result;\n      };\n\n      var getColumnFullPath = function (that, column) {\n        var result = [];\n        var columns;\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var callbackFilter = function (item) {\n          return item.ownerBand === column.ownerBand;\n        };\n\n        if (bandColumnsCache.isPlain) {\n          var columnIndex = that._columns.indexOf(column);\n\n          if (columnIndex >= 0) {\n            result = [\"columns[\".concat(columnIndex, \"]\")];\n          }\n        } else {\n          columns = that._columns.filter(callbackFilter);\n\n          while (columns.length && columns.indexOf(column) !== -1) {\n            result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\n            column = bandColumnsCache.columnParentByIndex[column.index];\n            columns = column ? that._columns.filter(callbackFilter) : [];\n          }\n        }\n\n        return result.join(\".\");\n      };\n\n      var calculateColspan = function calculateColspan(that, columnID) {\n        var colspan = 0;\n        var columns = that.getChildrenByBandColumn(columnID, true);\n\n        _iterator2.default.each(columns, function (_, column) {\n          if (column.isBand) {\n            column.colspan = column.colspan || calculateColspan(that, column.index);\n            colspan += column.colspan || 1;\n          } else {\n            colspan += 1;\n          }\n        });\n\n        return colspan;\n      };\n\n      var processBandColumns = function (that, columns, bandColumnsCache) {\n        var rowspan;\n\n        for (var i = 0; i < columns.length; i++) {\n          var column = columns[i];\n\n          if (column.visible || column.command) {\n            if (column.isBand) {\n              column.colspan = column.colspan || calculateColspan(that, column.index);\n            }\n\n            if (!column.isBand || !column.colspan) {\n              rowspan = that.getRowCount();\n\n              if (!column.command && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\n                rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length;\n              }\n\n              if (rowspan > 1) {\n                column.rowspan = rowspan;\n              }\n            }\n          }\n        }\n      };\n\n      var getValueDataType = function (value) {\n        var dataType = (0, _type.type)(value);\n\n        if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\n          dataType = void 0;\n        }\n\n        return dataType;\n      };\n\n      var getSerializationFormat = function (dataType, value) {\n        switch (dataType) {\n          case \"date\":\n          case \"datetime\":\n            return _date_serialization2.default.getDateSerializationFormat(value);\n\n          case \"number\":\n            if ((0, _type.isString)(value)) {\n              return \"string\";\n            }\n\n            if ((0, _type.isNumeric)(value)) {\n              return null;\n            }\n\n        }\n      };\n\n      var updateSerializers = function (options, dataType) {\n        if (!options.deserializeValue) {\n          if ((0, _uiGrid_core3.isDateType)(dataType)) {\n            options.deserializeValue = function (value) {\n              return _date_serialization2.default.deserializeDate(value);\n            };\n\n            options.serializeValue = function (value) {\n              return (0, _type.isString)(value) ? value : _date_serialization2.default.serializeDate(value, this.serializationFormat);\n            };\n          }\n\n          if (\"number\" === dataType) {\n            options.deserializeValue = function (value) {\n              var parsedValue = parseFloat(value);\n              return isNaN(parsedValue) ? value : parsedValue;\n            };\n\n            options.serializeValue = function (value, target) {\n              if (\"filter\" === target) {\n                return value;\n              }\n\n              return (0, _type.isDefined)(value) && \"string\" === this.serializationFormat ? value.toString() : value;\n            };\n          }\n        }\n      };\n\n      var getAlignmentByDataType = function (dataType, isRTL) {\n        switch (dataType) {\n          case \"number\":\n            return \"right\";\n\n          case \"boolean\":\n            return \"center\";\n\n          default:\n            return (0, _position.getDefaultAlignment)(isRTL);\n        }\n      };\n\n      var customizeTextForBooleanDataType = function (e) {\n        if (true === e.value) {\n          return this.trueText || \"true\";\n        } else {\n          if (false === e.value) {\n            return this.falseText || \"false\";\n          } else {\n            return e.valueText || \"\";\n          }\n        }\n      };\n\n      var getCustomizeTextByDataType = function (dataType) {\n        if (\"boolean\" === dataType) {\n          return customizeTextForBooleanDataType;\n        }\n      };\n\n      var createColumnsFromDataSource = function (that, dataSource) {\n        var firstItems = that._getFirstItems(dataSource);\n\n        var fieldName;\n        var processedFields = {};\n        var result = [];\n\n        for (var i = 0; i < firstItems.length; i++) {\n          if (firstItems[i]) {\n            for (fieldName in firstItems[i]) {\n              if (!(0, _type.isFunction)(firstItems[i][fieldName]) || (0, _variable_wrapper.isWrapped)(firstItems[i][fieldName])) {\n                processedFields[fieldName] = true;\n              }\n            }\n          }\n        }\n\n        for (fieldName in processedFields) {\n          if (0 !== fieldName.indexOf(\"__\")) {\n            var column = createColumn(that, fieldName);\n            result.push(column);\n          }\n        }\n\n        return result;\n      };\n\n      var updateColumnIndexes = function (that) {\n        _iterator2.default.each(that._columns, function (index, column) {\n          column.index = index;\n        });\n\n        _iterator2.default.each(that._columns, function (index, column) {\n          if ((0, _type.isObject)(column.ownerBand)) {\n            column.ownerBand = column.ownerBand.index;\n          }\n        });\n\n        _iterator2.default.each(that._commandColumns, function (index, column) {\n          column.index = -(index + 1);\n        });\n      };\n\n      var updateColumnGroupIndexes = function (that, currentColumn) {\n        (0, _array.normalizeIndexes)(that._columns, \"groupIndex\", currentColumn, function (column) {\n          var grouped = column.grouped;\n          delete column.grouped;\n          return grouped;\n        });\n      };\n\n      var updateColumnSortIndexes = function (that, currentColumn) {\n        _iterator2.default.each(that._columns, function (index, column) {\n          if ((0, _type.isDefined)(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\n            delete column.sortIndex;\n          }\n        });\n\n        (0, _array.normalizeIndexes)(that._columns, \"sortIndex\", currentColumn, function (column) {\n          return !(0, _type.isDefined)(column.groupIndex) && isSortOrderValid(column.sortOrder);\n        });\n      };\n\n      var updateColumnVisibleIndexes = function (that, currentColumn) {\n        var key;\n        var column;\n        var bandColumns = {};\n        var result = [];\n        var bandColumnsCache = that.getBandColumnsCache();\n\n        var columns = that._columns.filter(function (column) {\n          return !column.command;\n        });\n\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\n\n          if (parentBandColumns.length) {\n            var bandColumnIndex = parentBandColumns[parentBandColumns.length - 1].index;\n            bandColumns[bandColumnIndex] = bandColumns[bandColumnIndex] || [];\n            bandColumns[bandColumnIndex].push(column);\n          } else {\n            result.push(column);\n          }\n        }\n\n        for (key in bandColumns) {\n          (0, _array.normalizeIndexes)(bandColumns[key], \"visibleIndex\", currentColumn);\n        }\n\n        (0, _array.normalizeIndexes)(result, \"visibleIndex\", currentColumn);\n      };\n\n      var getColumnIndexByVisibleIndex = function (that, visibleIndex, location) {\n        var rowIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.rowIndex : null;\n        var columns = location === GROUP_LOCATION ? that.getGroupColumns() : location === COLUMN_CHOOSER_LOCATION ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\n        var column;\n        visibleIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\n        column = columns[visibleIndex];\n\n        if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\n          column = that._columns.filter(function (col) {\n            return column.type === col.type;\n          })[0] || column;\n        }\n\n        return column && (0, _type.isDefined)(column.index) ? column.index : -1;\n      };\n\n      var moveColumnToGroup = function (that, column, groupIndex) {\n        var groupColumns = that.getGroupColumns();\n        var i;\n\n        if (groupIndex >= 0) {\n          for (i = 0; i < groupColumns.length; i++) {\n            if (groupColumns[i].groupIndex >= groupIndex) {\n              groupColumns[i].groupIndex++;\n            }\n          }\n        } else {\n          groupIndex = 0;\n\n          for (i = 0; i < groupColumns.length; i++) {\n            groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1);\n          }\n        }\n\n        return groupIndex;\n      };\n\n      function checkUserStateColumn(column, userStateColumn) {\n        return column && userStateColumn && userStateColumn.name === column.name && (userStateColumn.dataField === column.dataField || column.name);\n      }\n\n      var applyUserState = function (that) {\n        var columnsUserState = that._columnsUserState;\n        var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\n        var columns = that._columns;\n        var columnCountById = {};\n        var resultColumns = [];\n        var allColumnsHaveState = true;\n        var userStateColumnIndexes = [];\n        var column;\n        var userStateColumnIndex;\n        var i;\n\n        function applyFieldsState(column, userStateColumn) {\n          if (!userStateColumn) {\n            return;\n          }\n\n          for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\n            var fieldName = USER_STATE_FIELD_NAMES[index];\n\n            if ((0, _array.inArray)(fieldName, ignoreColumnOptionNames) >= 0) {\n              continue;\n            }\n\n            if (\"dataType\" === fieldName) {\n              column[fieldName] = column[fieldName] || userStateColumn[fieldName];\n            } else {\n              if ((0, _array.inArray)(fieldName, USER_STATE_FIELD_NAMES_15_1) >= 0) {\n                if (fieldName in userStateColumn) {\n                  column[fieldName] = userStateColumn[fieldName];\n                }\n              } else {\n                if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\n                  column.defaultSelectedFilterOperation = column[fieldName] || null;\n                }\n\n                column[fieldName] = userStateColumn[fieldName];\n              }\n            }\n          }\n        }\n\n        function findUserStateColumn(columnsUserState, column) {\n          var id = column.name || column.dataField;\n          var count = columnCountById[id] || 0;\n\n          for (var j = 0; j < columnsUserState.length; j++) {\n            if (checkUserStateColumn(column, columnsUserState[j])) {\n              if (count) {\n                count--;\n              } else {\n                columnCountById[id] = columnCountById[id] || 0;\n                columnCountById[id]++;\n                return j;\n              }\n            }\n          }\n\n          return -1;\n        }\n\n        if (columnsUserState) {\n          for (i = 0; i < columns.length; i++) {\n            userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\n            allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\n            userStateColumnIndexes.push(userStateColumnIndex);\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            column = columns[i];\n            userStateColumnIndex = userStateColumnIndexes[i];\n\n            if (that._hasUserState || allColumnsHaveState) {\n              applyFieldsState(column, columnsUserState[userStateColumnIndex]);\n            }\n\n            if (userStateColumnIndex >= 0 && (0, _type.isDefined)(columnsUserState[userStateColumnIndex].initialIndex)) {\n              resultColumns[userStateColumnIndex] = column;\n            } else {\n              resultColumns.push(column);\n            }\n          }\n\n          var hasAddedBands = false;\n\n          for (i = 0; i < columnsUserState.length; i++) {\n            var columnUserState = columnsUserState[i];\n\n            if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\n              column = createColumn(that, columnUserState.added);\n              applyFieldsState(column, columnUserState);\n              resultColumns.push(column);\n\n              if (columnUserState.added.columns) {\n                hasAddedBands = true;\n              }\n            }\n          }\n\n          if (hasAddedBands) {\n            updateColumnIndexes(that);\n            resultColumns = createColumnsFromOptions(that, resultColumns);\n          }\n\n          assignColumns(that, resultColumns);\n        }\n      };\n\n      var updateIndexes = function (that, column) {\n        updateColumnIndexes(that);\n        updateColumnGroupIndexes(that, column);\n        updateColumnSortIndexes(that, column);\n        resetBandColumnsCache(that);\n        updateColumnVisibleIndexes(that, column);\n      };\n\n      var resetColumnsCache = function (that) {\n        that.resetColumnsCache();\n      };\n\n      function assignColumns(that, columns) {\n        that._columns = columns;\n        resetColumnsCache(that);\n        that.updateColumnDataTypes();\n      }\n\n      var updateColumnChanges = function (that, changeType, optionName, columnIndex) {\n        var columnChanges = that._columnChanges || {\n          optionNames: {\n            length: 0\n          },\n          changeTypes: {\n            length: 0\n          },\n          columnIndex: columnIndex\n        };\n        optionName = optionName || \"all\";\n        optionName = optionName.split(\".\")[0];\n        var changeTypes = columnChanges.changeTypes;\n\n        if (changeType && !changeTypes[changeType]) {\n          changeTypes[changeType] = true;\n          changeTypes.length++;\n        }\n\n        var optionNames = columnChanges.optionNames;\n\n        if (optionName && !optionNames[optionName]) {\n          optionNames[optionName] = true;\n          optionNames.length++;\n        }\n\n        if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\n          delete columnChanges.columnIndex;\n        }\n\n        that._columnChanges = columnChanges;\n        resetColumnsCache(that);\n      };\n\n      var fireColumnsChanged = function (that) {\n        var onColumnsChanging = that.option(\"onColumnsChanging\");\n        var columnChanges = that._columnChanges;\n        var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\n\n        var needReinit = function (options) {\n          return options && reinitOptionNames.some(function (name) {\n            return options[name];\n          });\n        };\n\n        if (that.isInitialized() && !that._updateLockCount && columnChanges) {\n          if (onColumnsChanging) {\n            that._updateLockCount++;\n            onColumnsChanging((0, _extend.extend)({\n              component: that.component\n            }, columnChanges));\n            that._updateLockCount--;\n          }\n\n          that._columnChanges = void 0;\n\n          if (needReinit(columnChanges.optionNames)) {\n            that.reinit();\n          } else {\n            that.columnsChanged.fire(columnChanges);\n          }\n        }\n      };\n\n      var updateSortOrderWhenGrouping = function (column, groupIndex, prevGroupIndex) {\n        var columnWasGrouped = prevGroupIndex >= 0;\n\n        if (groupIndex >= 0) {\n          if (!columnWasGrouped) {\n            column.lastSortOrder = column.sortOrder;\n          }\n        } else {\n          column.sortOrder = column.lastSortOrder;\n        }\n      };\n\n      var fireOptionChanged = function (that, options) {\n        var value = options.value;\n        var optionName = options.optionName;\n        var prevValue = options.prevValue;\n        var fullOptionName = options.fullOptionName;\n        var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\n\n        if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\n          that._skipProcessingColumnsChange = fullOptionPath;\n\n          that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\n\n          that._skipProcessingColumnsChange = false;\n        }\n      };\n\n      var columnOptionCore = function (that, column, optionName, value, notFireEvent) {\n        var optionGetter = _data2.default.compileGetter(optionName);\n\n        var columnIndex = column.index;\n        var columns;\n        var changeType;\n        var initialColumn;\n\n        if (3 === arguments.length) {\n          return optionGetter(column, {\n            functionsAsIs: true\n          });\n        }\n\n        var prevValue = optionGetter(column, {\n          functionsAsIs: true\n        });\n\n        if (prevValue !== value) {\n          if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\n            changeType = \"grouping\";\n            updateSortOrderWhenGrouping(column, value, prevValue);\n          } else {\n            if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\n              changeType = \"sorting\";\n            } else {\n              changeType = \"columns\";\n            }\n          }\n\n          var optionSetter = _data2.default.compileSetter(optionName);\n\n          optionSetter(column, value, {\n            functionsAsIs: true\n          });\n          var fullOptionName = getColumnFullPath(that, column);\n\n          if (COLUMN_INDEX_OPTIONS[optionName]) {\n            updateIndexes(that, column);\n            value = optionGetter(column);\n          }\n\n          fullOptionName && fireOptionChanged(that, {\n            fullOptionName: fullOptionName,\n            optionName: optionName,\n            value: value,\n            prevValue: prevValue\n          });\n\n          if (!(0, _type.isDefined)(prevValue) && !(0, _type.isDefined)(value) && 0 !== optionName.indexOf(\"buffer\")) {\n            notFireEvent = true;\n          }\n\n          if (!notFireEvent) {\n            if ((0, _array.inArray)(optionName, USER_STATE_FIELD_NAMES) < 0 && \"visibleWidth\" !== optionName) {\n              columns = that.option(\"columns\");\n              initialColumn = that.getColumnByPath(fullOptionName, columns);\n\n              if ((0, _type.isString)(initialColumn)) {\n                initialColumn = columns[columnIndex] = {\n                  dataField: initialColumn\n                };\n              }\n\n              if (initialColumn && checkUserStateColumn(initialColumn, column)) {\n                optionSetter(initialColumn, value, {\n                  functionsAsIs: true\n                });\n              }\n            }\n\n            updateColumnChanges(that, changeType, optionName, columnIndex);\n          } else {\n            resetColumnsCache(that);\n          }\n        }\n      };\n\n      function isSortOrderValid(sortOrder) {\n        return \"asc\" === sortOrder || \"desc\" === sortOrder;\n      }\n\n      var addExpandColumn = function (that) {\n        var options = that._getExpandColumnOptions();\n\n        that.addCommandColumn(options);\n      };\n\n      var defaultSetCellValue = function (data, value) {\n        var path = this.dataField.split(\".\");\n        var dotCount = path.length - 1;\n\n        if (this.serializeValue) {\n          value = this.serializeValue(value);\n        }\n\n        for (var i = 0; i < dotCount; i++) {\n          var name = path[i];\n          data = data[name] = data[name] || {};\n        }\n\n        data[path[dotCount]] = value;\n      };\n\n      var getDataColumns = function getDataColumns(columns, rowIndex, bandColumnID) {\n        var result = [];\n        rowIndex = rowIndex || 0;\n        columns[rowIndex] && _iterator2.default.each(columns[rowIndex], function (_, column) {\n          if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (!column.isBand || !column.colspan) {\n              if (!column.command || rowIndex < 1) {\n                result.push(column);\n              }\n            } else {\n              result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index));\n            }\n          }\n        });\n        return result;\n      };\n\n      var _getRowCount = function (that) {\n        var rowCount = 1;\n        var bandColumnsCache = that.getBandColumnsCache();\n        var columnParentByIndex = bandColumnsCache.columnParentByIndex;\n\n        that._columns.forEach(function (column) {\n          var parents = getParentBandColumns(column.index, columnParentByIndex);\n          var invisibleParents = parents.filter(function (column) {\n            return !column.visible;\n          });\n\n          if (column.visible && !invisibleParents.length) {\n            rowCount = Math.max(rowCount, parents.length + 1);\n          }\n        });\n\n        return rowCount;\n      };\n\n      var isCustomCommandColumn = function (that, commandColumn) {\n        return !!that._columns.filter(function (column) {\n          return column.type === commandColumn.type;\n        }).length;\n      };\n\n      var getFixedPosition = function (that, column) {\n        var rtlEnabled = that.option(\"rtlEnabled\");\n\n        if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\n          return rtlEnabled ? \"right\" : \"left\";\n        }\n\n        return column.fixedPosition;\n      };\n\n      var processExpandColumns = function (columns, expandColumns, type, columnIndex) {\n        var customColumnIndex;\n        var rowCount = this.getRowCount();\n        var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\n        var expandColumnsByType = expandColumns.filter(function (column) {\n          return column.type === type;\n        });\n        columns.forEach(function (column, index) {\n          if (column.type === type) {\n            customColumnIndex = index;\n            rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount;\n          }\n        });\n\n        if (rowspan > 1) {\n          expandColumnsByType = _iterator2.default.map(expandColumnsByType, function (expandColumn) {\n            return (0, _extend.extend)({}, expandColumn, {\n              rowspan: rowspan\n            });\n          });\n        }\n\n        expandColumnsByType.unshift.apply(expandColumnsByType, (0, _type.isDefined)(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\n        columns.splice.apply(columns, expandColumnsByType);\n        return rowspan || 1;\n      };\n\n      var digitsCount = function (number) {\n        var i;\n\n        for (i = 0; number > 1; i++) {\n          number /= 10;\n        }\n\n        return i;\n      };\n\n      var numberToString = function (number, digitsCount) {\n        var str = number ? number.toString() : \"0\";\n\n        while (str.length < digitsCount) {\n          str = \"0\" + str;\n        }\n\n        return str;\n      };\n\n      var mergeColumns = function (that, columns, commandColumns, needToExtend) {\n        var column;\n        var commandColumnIndex;\n        var result = columns.slice().map(function (column) {\n          return (0, _extend.extend)({}, column);\n        });\n\n        var isColumnFixing = that._isColumnFixing();\n\n        var defaultCommandColumns = commandColumns.slice().map(function (column) {\n          return (0, _extend.extend)({\n            fixed: isColumnFixing\n          }, column);\n        });\n\n        var getCommandColumnIndex = function (column) {\n          return commandColumns.reduce(function (result, commandColumn, index) {\n            var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\n            return commandColumn.type === columnType || commandColumn.command === column.command ? index : result;\n          }, -1);\n        };\n\n        var callbackFilter = function (commandColumn) {\n          return commandColumn.command !== commandColumns[commandColumnIndex].command;\n        };\n\n        for (var i = 0; i < columns.length; i++) {\n          column = columns[i];\n          commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\n\n          if (commandColumnIndex >= 0) {\n            if (needToExtend) {\n              result[i] = (0, _extend.extend)({\n                fixed: isColumnFixing\n              }, commandColumns[commandColumnIndex], column);\n\n              if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\n                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter);\n              }\n            } else {\n              var columnOptions = {\n                visibleIndex: column.visibleIndex,\n                index: column.index,\n                headerId: column.headerId,\n                allowFixing: 0 === column.groupIndex,\n                allowReordering: 0 === column.groupIndex,\n                groupIndex: column.groupIndex\n              };\n              result[i] = (0, _extend.extend)({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions);\n            }\n          }\n        }\n\n        if (columns.length && needToExtend && defaultCommandColumns.length) {\n          result = result.concat(defaultCommandColumns);\n        }\n\n        return result;\n      };\n\n      var isColumnFixed = function (that, column) {\n        return (0, _type.isDefined)(column.fixed) || !column.type ? column.fixed : that._isColumnFixing();\n      };\n\n      var convertOwnerBandToColumnReference = function (columns) {\n        columns.forEach(function (column) {\n          if ((0, _type.isDefined)(column.ownerBand)) {\n            column.ownerBand = columns[column.ownerBand];\n          }\n        });\n      };\n\n      var resetBandColumnsCache = function (that) {\n        that._bandColumnsCache = void 0;\n      };\n\n      var findColumn = function (columns, identifier) {\n        var identifierOptionName = (0, _type.isString)(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\n        var column;\n\n        if (void 0 === identifier) {\n          return;\n        }\n\n        if (identifierOptionName) {\n          identifier = identifier.substr(identifierOptionName.length + 1);\n        }\n\n        if (identifierOptionName) {\n          column = columns.filter(function (column) {\n            return \"\" + column[identifierOptionName] === identifier;\n          })[0];\n        } else {\n          [\"index\", \"name\", \"dataField\", \"caption\"].some(function (optionName) {\n            column = columns.filter(function (column) {\n              return column[optionName] === identifier;\n            })[0];\n            return !!column;\n          });\n        }\n\n        return column;\n      };\n\n      return {\n        _getExpandColumnOptions: function () {\n          return {\n            type: \"expand\",\n            command: \"expand\",\n            width: \"auto\",\n            cssClass: COMMAND_EXPAND_CLASS,\n            allowEditing: false,\n            allowGrouping: false,\n            allowSorting: false,\n            allowResizing: false,\n            allowReordering: false,\n            allowHiding: false\n          };\n        },\n        _getFirstItems: function (dataSource) {\n          var groupsCount;\n          var items = [];\n\n          var getFirstItemsCore = function getFirstItemsCore(items, groupsCount) {\n            if (!items || !groupsCount) {\n              return items;\n            }\n\n            for (var i = 0; i < items.length; i++) {\n              var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\n\n              if (childItems && childItems.length) {\n                return childItems;\n              }\n            }\n          };\n\n          if (dataSource && dataSource.items().length > 0) {\n            groupsCount = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group()).length;\n            items = getFirstItemsCore(dataSource.items(), groupsCount) || [];\n          }\n\n          return items;\n        },\n        _endUpdateCore: function () {\n          !this._skipProcessingColumnsChange && fireColumnsChanged(this);\n        },\n        init: function () {\n          var that = this;\n          var columns = that.option(\"columns\");\n          that._commandColumns = that._commandColumns || [];\n          that._columns = that._columns || [];\n          that._isColumnsFromOptions = !!columns;\n\n          if (that._isColumnsFromOptions) {\n            assignColumns(that, columns ? createColumnsFromOptions(that, columns) : []);\n            applyUserState(that);\n          } else {\n            assignColumns(that, that._columnsUserState ? createColumnsFromOptions(that, that._columnsUserState) : that._columns);\n          }\n\n          addExpandColumn(that);\n\n          if (that._dataSourceApplied) {\n            that.applyDataSource(that._dataSource, true);\n          } else {\n            updateIndexes(that);\n          }\n        },\n        callbackNames: function () {\n          return [\"columnsChanged\"];\n        },\n        getColumnByPath: function (path, columns) {\n          var that = this;\n          var column;\n          var columnIndexes = [];\n          path.replace(regExp, function (_, columnIndex) {\n            columnIndexes.push(parseInt(columnIndex));\n            return \"\";\n          });\n\n          if (columnIndexes.length) {\n            if (columns) {\n              column = columnIndexes.reduce(function (column, index) {\n                return column && column.columns && column.columns[index];\n              }, {\n                columns: columns\n              });\n            } else {\n              column = getColumnByIndexes(that, columnIndexes);\n            }\n          }\n\n          return column;\n        },\n        optionChanged: function (args) {\n          var needUpdateRequireResize;\n\n          switch (args.name) {\n            case \"adaptColumnWidthByRatio\":\n              args.handled = true;\n              break;\n\n            case \"dataSource\":\n              if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\n                this._columns = [];\n              }\n\n              break;\n\n            case \"columns\":\n              needUpdateRequireResize = this._skipProcessingColumnsChange;\n              args.handled = true;\n\n              if (!this._skipProcessingColumnsChange) {\n                if (args.name === args.fullName) {\n                  this._columnsUserState = null;\n                  this._ignoreColumnOptionNames = null;\n                  this.init();\n                } else {\n                  this._columnOptionChanged(args);\n\n                  needUpdateRequireResize = true;\n                }\n              }\n\n              if (needUpdateRequireResize) {\n                this._updateRequireResize(args);\n              }\n\n              break;\n\n            case \"commonColumnSettings\":\n            case \"columnAutoWidth\":\n            case \"allowColumnResizing\":\n            case \"allowColumnReordering\":\n            case \"columnFixing\":\n            case \"grouping\":\n            case \"groupPanel\":\n            case \"regenerateColumnsByVisibleItems\":\n            case \"customizeColumns\":\n            case \"editing\":\n            case \"columnHidingEnabled\":\n            case \"dateSerializationFormat\":\n            case \"columnResizingMode\":\n            case \"columnMinWidth\":\n            case \"columnWidth\":\n              args.handled = true;\n              var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\n              var isEditingPopup = args.fullName && 0 === args.fullName.indexOf(\"editing.popup\");\n              var isEditingForm = args.fullName && 0 === args.fullName.indexOf(\"editing.form\");\n\n              if (!isEditingPopup && !isEditingForm) {\n                this.reinit(ignoreColumnOptionNames);\n              }\n\n              break;\n\n            case \"rtlEnabled\":\n              this.reinit();\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        _columnOptionChanged: function (args) {\n          var columnOptionValue = {};\n          var column = this.getColumnByPath(args.fullName);\n          var columnOptionName = args.fullName.replace(regExp, \"\");\n\n          if (column) {\n            if (columnOptionName) {\n              columnOptionValue[columnOptionName] = args.value;\n            } else {\n              columnOptionValue = args.value;\n            }\n\n            this._skipProcessingColumnsChange = args.fullName;\n            this.columnOption(column.index, columnOptionValue);\n            this._skipProcessingColumnsChange = false;\n          }\n        },\n        _updateRequireResize: function (args) {\n          var component = this.component;\n\n          if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\n            component._requireResize = true;\n          }\n        },\n        publicMethods: function () {\n          return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"];\n        },\n        applyDataSource: function (dataSource, forceApplying) {\n          var that = this;\n          var isDataSourceLoaded = dataSource && dataSource.isLoaded();\n          that._dataSource = dataSource;\n\n          if (!that._dataSourceApplied || 0 === that._dataSourceColumnsCount || forceApplying || that.option(\"regenerateColumnsByVisibleItems\")) {\n            if (isDataSourceLoaded) {\n              if (!that._isColumnsFromOptions) {\n                var columnsFromDataSource = createColumnsFromDataSource(that, dataSource);\n\n                if (columnsFromDataSource.length) {\n                  assignColumns(that, columnsFromDataSource);\n                  that._dataSourceColumnsCount = that._columns.length;\n                  applyUserState(that);\n                }\n              }\n\n              return that.updateColumns(dataSource, forceApplying);\n            } else {\n              that._dataSourceApplied = false;\n            }\n          } else {\n            if (isDataSourceLoaded && !that.isAllDataTypesDefined(true) && that.updateColumnDataTypes(dataSource)) {\n              updateColumnChanges(that, \"columns\");\n              fireColumnsChanged(that);\n              return new _deferred.Deferred().reject().promise();\n            }\n          }\n        },\n        reset: function () {\n          this._dataSourceApplied = false;\n          this._dataSourceColumnsCount = void 0;\n          this.reinit();\n        },\n        resetColumnsCache: function () {\n          var that = this;\n          that._visibleColumns = void 0;\n          that._fixedColumns = void 0;\n          that._rowCount = void 0;\n          resetBandColumnsCache(that);\n        },\n        reinit: function (ignoreColumnOptionNames) {\n          this._columnsUserState = this.getUserState();\n          this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\n          this.init();\n\n          if (ignoreColumnOptionNames) {\n            this._ignoreColumnOptionNames = null;\n          }\n        },\n        isInitialized: function () {\n          return !!this._columns.length || !!this.option(\"columns\");\n        },\n        isDataSourceApplied: function () {\n          return this._dataSourceApplied;\n        },\n        getCommonSettings: function (column) {\n          var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\n          var groupingOptions = this.option(\"grouping\") || {};\n          var groupPanelOptions = this.option(\"groupPanel\") || {};\n          return (0, _extend.extend)({\n            allowFixing: this.option(\"columnFixing.enabled\"),\n            allowResizing: this.option(\"allowColumnResizing\") || void 0,\n            allowReordering: this.option(\"allowColumnReordering\"),\n            minWidth: this.option(\"columnMinWidth\"),\n            width: this.option(\"columnWidth\"),\n            autoExpandGroup: groupingOptions.autoExpandAll,\n            allowCollapsing: groupingOptions.allowCollapsing,\n            allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\n          }, commonColumnSettings);\n        },\n        isColumnOptionUsed: function (optionName) {\n          for (var i = 0; i < this._columns.length; i++) {\n            if (this._columns[i][optionName]) {\n              return true;\n            }\n          }\n        },\n        isAllDataTypesDefined: function (checkSerializers) {\n          var columns = this._columns;\n\n          if (!columns.length) {\n            return false;\n          }\n\n          for (var i = 0; i < columns.length; i++) {\n            if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\n              continue;\n            }\n\n            if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        getColumns: function () {\n          return this._columns;\n        },\n        isBandColumnsUsed: function () {\n          return this.getColumns().some(function (column) {\n            return column.isBand;\n          });\n        },\n        getGroupColumns: function () {\n          var result = [];\n\n          _iterator2.default.each(this._columns, function () {\n            var column = this;\n\n            if ((0, _type.isDefined)(column.groupIndex)) {\n              result[column.groupIndex] = column;\n            }\n          });\n\n          return result;\n        },\n        getVisibleColumns: function (rowIndex) {\n          this._visibleColumns = this._visibleColumns || this._getVisibleColumnsCore();\n          rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\n          return this._visibleColumns[rowIndex] || [];\n        },\n        getFixedColumns: function (rowIndex) {\n          this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\n          rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\n          return this._fixedColumns[rowIndex] || [];\n        },\n        getFilteringColumns: function () {\n          return this.getColumns().filter(function (item) {\n            return (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering);\n          }).map(function (item) {\n            var field = (0, _extend.extend)(true, {}, item);\n\n            if (!(0, _type.isDefined)(field.dataField)) {\n              field.dataField = field.name;\n            }\n\n            field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\n            return field;\n          });\n        },\n        _getFixedColumnsCore: function () {\n          var that = this;\n          var result = [];\n          var rowCount = that.getRowCount();\n\n          var isColumnFixing = that._isColumnFixing();\n\n          var transparentColumn = {\n            command: \"transparent\"\n          };\n          var transparentColspan = 0;\n          var notFixedColumnCount;\n          var transparentColumnIndex;\n          var lastFixedPosition;\n\n          if (isColumnFixing) {\n            for (var i = 0; i <= rowCount; i++) {\n              notFixedColumnCount = 0;\n              lastFixedPosition = null;\n              transparentColumnIndex = null;\n              var visibleColumns = that.getVisibleColumns(i, true);\n\n              for (var j = 0; j < visibleColumns.length; j++) {\n                var prevColumn = visibleColumns[j - 1];\n                var column = visibleColumns[j];\n\n                if (!column.fixed) {\n                  if (0 === i) {\n                    if (column.isBand && column.colspan) {\n                      transparentColspan += column.colspan;\n                    } else {\n                      transparentColspan++;\n                    }\n                  }\n\n                  notFixedColumnCount++;\n\n                  if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                    transparentColumnIndex = j;\n                  }\n                } else {\n                  if (prevColumn && prevColumn.fixed && getFixedPosition(that, prevColumn) !== getFixedPosition(that, column)) {\n                    if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                      transparentColumnIndex = j;\n                    }\n                  } else {\n                    lastFixedPosition = column.fixedPosition;\n                  }\n                }\n              }\n\n              if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\n                return [];\n              }\n\n              if (!(0, _type.isDefined)(transparentColumnIndex)) {\n                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length;\n              }\n\n              result[i] = visibleColumns.slice(0);\n\n              if (!transparentColumn.colspan) {\n                transparentColumn.colspan = transparentColspan;\n              }\n\n              result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn);\n            }\n          }\n\n          return result;\n        },\n        _isColumnFixing: function () {\n          var isColumnFixing = this.option(\"columnFixing.enabled\");\n          !isColumnFixing && _iterator2.default.each(this._columns, function (_, column) {\n            if (column.fixed) {\n              isColumnFixing = true;\n              return false;\n            }\n          });\n          return isColumnFixing;\n        },\n        _getExpandColumnsCore: function () {\n          return this.getGroupColumns();\n        },\n        getExpandColumns: function () {\n          var expandColumns = this._getExpandColumnsCore();\n\n          var expandColumn;\n          var firstGroupColumn = expandColumns.filter(function (column) {\n            return 0 === column.groupIndex;\n          })[0];\n          var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\n\n          var isColumnFixing = this._isColumnFixing();\n\n          if (expandColumns.length) {\n            expandColumn = this.columnOption(\"command:expand\");\n          }\n\n          expandColumns = _iterator2.default.map(expandColumns, function (column) {\n            return (0, _extend.extend)({}, column, {\n              visibleWidth: null,\n              minWidth: null,\n              cellTemplate: !(0, _type.isDefined)(column.groupIndex) ? column.cellTemplate : null,\n              headerCellTemplate: null,\n              fixed: !(0, _type.isDefined)(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true\n            }, expandColumn, {\n              index: column.index,\n              type: column.type || GROUP_COMMAND_COLUMN_NAME\n            });\n          });\n          return expandColumns;\n        },\n        getBandColumnsCache: function () {\n          if (!this._bandColumnsCache) {\n            var columns = this._columns;\n            var columnChildrenByIndex = {};\n            var columnParentByIndex = {};\n            var isPlain = true;\n            columns.forEach(function (column) {\n              var parentIndex = column.ownerBand;\n              var parent = columns[parentIndex];\n\n              if (column.hasColumns) {\n                isPlain = false;\n              }\n\n              if (column.colspan) {\n                column.colspan = void 0;\n              }\n\n              if (column.rowspan) {\n                column.rowspan = void 0;\n              }\n\n              if (parent) {\n                columnParentByIndex[column.index] = parent;\n              } else {\n                parentIndex = -1;\n              }\n\n              columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\n              columnChildrenByIndex[parentIndex].push(column);\n            });\n            this._bandColumnsCache = {\n              isPlain: isPlain,\n              columnChildrenByIndex: columnChildrenByIndex,\n              columnParentByIndex: columnParentByIndex\n            };\n          }\n\n          return this._bandColumnsCache;\n        },\n        _isColumnVisible: function (column) {\n          return column.visible && this.isParentColumnVisible(column.index);\n        },\n        _getVisibleColumnsCore: function () {\n          var that = this;\n          var i;\n          var result = [];\n          var rowspanGroupColumns = 0;\n          var rowspanExpandColumns = 0;\n          var rowCount = that.getRowCount();\n          var positiveIndexedColumns = [];\n          var negativeIndexedColumns = [];\n          var notGroupedColumnsCount = 0;\n          var isFixedToEnd;\n          var rtlEnabled = that.option(\"rtlEnabled\");\n          var bandColumnsCache = that.getBandColumnsCache();\n          var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\n          var columns = mergeColumns(that, that._columns, that._commandColumns, true);\n          var columnDigitsCount = digitsCount(columns.length);\n          processBandColumns(that, columns, bandColumnsCache);\n\n          for (i = 0; i < rowCount; i++) {\n            result[i] = [];\n            negativeIndexedColumns[i] = [{}];\n            positiveIndexedColumns[i] = [{}, {}, {}];\n          }\n\n          _iterator2.default.each(columns, function () {\n            var column = this;\n            var visibleIndex = column.visibleIndex;\n            var indexedColumns;\n            var parentBandColumns = getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex);\n\n            var visible = that._isColumnVisible(column);\n\n            if (visible && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\n              var rowIndex = parentBandColumns.length;\n\n              if (visibleIndex < 0) {\n                visibleIndex = -visibleIndex;\n                indexedColumns = negativeIndexedColumns[rowIndex];\n              } else {\n                column.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : column.fixed;\n                column.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : column.fixedPosition;\n\n                if (column.fixed) {\n                  isFixedToEnd = \"right\" === column.fixedPosition;\n\n                  if (rtlEnabled && (!column.command || isCustomCommandColumn(that, column))) {\n                    isFixedToEnd = !isFixedToEnd;\n                  }\n\n                  if (isFixedToEnd) {\n                    indexedColumns = positiveIndexedColumns[rowIndex][2];\n                  } else {\n                    indexedColumns = positiveIndexedColumns[rowIndex][0];\n                  }\n                } else {\n                  indexedColumns = positiveIndexedColumns[rowIndex][1];\n                }\n              }\n\n              if (parentBandColumns.length) {\n                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\n\n                for (i = parentBandColumns.length - 1; i >= 0; i--) {\n                  visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex;\n                }\n              }\n\n              indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\n              indexedColumns[visibleIndex].push(column);\n              notGroupedColumnsCount++;\n            }\n          });\n\n          _iterator2.default.each(result, function (rowIndex) {\n            (0, _object.orderEach)(negativeIndexedColumns[rowIndex], function (_, columns) {\n              result[rowIndex].unshift.apply(result[rowIndex], columns);\n            });\n            var firstPositiveIndexColumn = result[rowIndex].length;\n\n            _iterator2.default.each(positiveIndexedColumns[rowIndex], function (index, columnsByFixing) {\n              (0, _object.orderEach)(columnsByFixing, function (_, columnsByVisibleIndex) {\n                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex);\n              });\n            });\n\n            if (rowspanExpandColumns < rowIndex + 1) {\n              rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn);\n            }\n\n            if (rowspanGroupColumns < rowIndex + 1) {\n              rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn);\n            }\n          });\n\n          result.push(getDataColumns(result));\n\n          if (!notGroupedColumnsCount && that._columns.length) {\n            result[rowCount].push({\n              command: \"empty\"\n            });\n          }\n\n          return result;\n        },\n        getInvisibleColumns: function (columns, bandColumnIndex) {\n          var that = this;\n          var result = [];\n          var hiddenColumnsByBand;\n          columns = columns || that._columns;\n\n          _iterator2.default.each(columns, function (_, column) {\n            if (column.ownerBand !== bandColumnIndex) {\n              return;\n            }\n\n            if (column.isBand) {\n              if (!column.visible) {\n                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index);\n              } else {\n                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index);\n              }\n\n              if (hiddenColumnsByBand.length) {\n                result.push(column);\n                result = result.concat(hiddenColumnsByBand);\n              }\n\n              return;\n            }\n\n            if (!column.visible) {\n              result.push(column);\n            }\n          });\n\n          return result;\n        },\n        getChooserColumns: function (getAllColumns) {\n          var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\n          return (0, _common.grep)(columns, function (column) {\n            return column.showInColumnChooser;\n          });\n        },\n        allowMoveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var that = this;\n          var columnIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\n          var sourceColumn = that._columns[columnIndex];\n\n          if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\n            if (sourceLocation === targetLocation) {\n              if (sourceLocation === COLUMN_CHOOSER_LOCATION) {\n                return false;\n              }\n\n              fromVisibleIndex = (0, _type.isObject)(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\n              toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n              return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex;\n            } else {\n              if (sourceLocation === GROUP_LOCATION && targetLocation !== COLUMN_CHOOSER_LOCATION || targetLocation === GROUP_LOCATION) {\n                return sourceColumn && sourceColumn.allowGrouping;\n              } else {\n                if (sourceLocation === COLUMN_CHOOSER_LOCATION || targetLocation === COLUMN_CHOOSER_LOCATION) {\n                  return sourceColumn && sourceColumn.allowHiding;\n                }\n              }\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n        moveColumn: function (fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\n          var that = this;\n          var options = {};\n          var prevGroupIndex;\n          var fromIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\n          var toIndex = getColumnIndexByVisibleIndex(that, toVisibleIndex, targetLocation);\n          var targetGroupIndex;\n\n          if (fromIndex >= 0) {\n            var column = that._columns[fromIndex];\n            toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\n            targetGroupIndex = toIndex >= 0 ? that._columns[toIndex].groupIndex : -1;\n\n            if ((0, _type.isDefined)(column.groupIndex) && sourceLocation === GROUP_LOCATION) {\n              if (targetGroupIndex > column.groupIndex) {\n                targetGroupIndex--;\n              }\n\n              if (targetLocation !== GROUP_LOCATION) {\n                options.groupIndex = void 0;\n              } else {\n                prevGroupIndex = column.groupIndex;\n                delete column.groupIndex;\n                updateColumnGroupIndexes(that);\n              }\n            }\n\n            if (targetLocation === GROUP_LOCATION) {\n              options.groupIndex = moveColumnToGroup(that, column, targetGroupIndex);\n              column.groupIndex = prevGroupIndex;\n            } else {\n              if (toVisibleIndex >= 0) {\n                var targetColumn = that._columns[toIndex];\n\n                if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\n                  options.visibleIndex = MAX_SAFE_INTEGER;\n                } else {\n                  if (isColumnFixed(that, column) ^ isColumnFixed(that, targetColumn)) {\n                    options.visibleIndex = MAX_SAFE_INTEGER;\n                  } else {\n                    options.visibleIndex = targetColumn.visibleIndex;\n                  }\n                }\n              }\n            }\n\n            var isVisible = targetLocation !== COLUMN_CHOOSER_LOCATION;\n\n            if (column.visible !== isVisible) {\n              options.visible = isVisible;\n            }\n\n            that.columnOption(column.index, options);\n          }\n        },\n        changeSortOrder: function (columnIndex, sortOrder) {\n          var that = this;\n          var options = {};\n          var sortingOptions = that.option(\"sorting\");\n          var sortingMode = sortingOptions && sortingOptions.mode;\n          var needResetSorting = \"single\" === sortingMode || !sortOrder;\n          var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\n          var column = that._columns[columnIndex];\n\n          var nextSortOrder = function (column) {\n            if (\"ctrl\" === sortOrder) {\n              if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\n                return false;\n              }\n\n              options.sortOrder = void 0;\n              options.sortIndex = void 0;\n            } else {\n              if ((0, _type.isDefined)(column.groupIndex) || (0, _type.isDefined)(column.sortIndex)) {\n                options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\";\n              } else {\n                options.sortOrder = \"asc\";\n              }\n            }\n\n            return true;\n          };\n\n          if (allowSorting && column && column.allowSorting) {\n            if (needResetSorting && !(0, _type.isDefined)(column.groupIndex)) {\n              _iterator2.default.each(that._columns, function (index) {\n                if (index !== columnIndex && this.sortOrder && !(0, _type.isDefined)(this.groupIndex)) {\n                  delete this.sortOrder;\n                  delete this.sortIndex;\n                }\n              });\n            }\n\n            if (isSortOrderValid(sortOrder)) {\n              if (column.sortOrder !== sortOrder) {\n                options.sortOrder = sortOrder;\n              }\n            } else {\n              if (\"none\" === sortOrder) {\n                if (column.sortOrder) {\n                  options.sortIndex = void 0;\n                  options.sortOrder = void 0;\n                }\n              } else {\n                nextSortOrder(column);\n              }\n            }\n          }\n\n          that.columnOption(column.index, options);\n        },\n        getSortDataSourceParameters: function (useLocalSelector) {\n          var that = this;\n          var sortColumns = [];\n          var sort = [];\n\n          _iterator2.default.each(that._columns, function () {\n            if ((this.dataField || this.selector || this.calculateCellValue) && (0, _type.isDefined)(this.sortIndex) && !(0, _type.isDefined)(this.groupIndex)) {\n              sortColumns[this.sortIndex] = this;\n            }\n          });\n\n          _iterator2.default.each(sortColumns, function () {\n            var sortOrder = this && this.sortOrder;\n\n            if (isSortOrderValid(sortOrder)) {\n              var sortItem = {\n                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\n                desc: \"desc\" === this.sortOrder\n              };\n\n              if (this.sortingMethod) {\n                sortItem.compare = this.sortingMethod.bind(this);\n              }\n\n              sort.push(sortItem);\n            }\n          });\n\n          return sort.length > 0 ? sort : null;\n        },\n        getGroupDataSourceParameters: function (useLocalSelector) {\n          var group = [];\n\n          _iterator2.default.each(this.getGroupColumns(), function () {\n            var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\n\n            if (selector) {\n              var groupItem = {\n                selector: selector,\n                desc: \"desc\" === this.sortOrder,\n                isExpanded: !!this.autoExpandGroup\n              };\n\n              if (this.sortingMethod) {\n                groupItem.compare = this.sortingMethod.bind(this);\n              }\n\n              group.push(groupItem);\n            }\n          });\n\n          return group.length > 0 ? group : null;\n        },\n        refresh: function (updateNewLookupsOnly) {\n          var deferreds = [];\n\n          _iterator2.default.each(this._columns, function () {\n            var lookup = this.lookup;\n\n            if (lookup && !this.calculateDisplayValue) {\n              if (updateNewLookupsOnly && lookup.valueMap) {\n                return;\n              }\n\n              if (lookup.update) {\n                deferreds.push(lookup.update());\n              }\n            }\n          });\n\n          return _deferred.when.apply(_renderer2.default, deferreds).done(resetColumnsCache.bind(null, this));\n        },\n        _updateColumnOptions: function (column, columnIndex) {\n          column.selector = column.selector || function (data) {\n            return column.calculateCellValue(data);\n          };\n\n          _iterator2.default.each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function (_, calculateCallbackName) {\n            var calculateCallback = column[calculateCallbackName];\n\n            if ((0, _type.isFunction)(calculateCallback) && !calculateCallback.originalCallback) {\n              column[calculateCallbackName] = function (data) {\n                return calculateCallback.call(column, data);\n              };\n\n              column[calculateCallbackName].originalCallback = calculateCallback;\n              column[calculateCallbackName].columnIndex = columnIndex;\n            }\n          });\n\n          if ((0, _type.isString)(column.calculateDisplayValue)) {\n            column.displayField = column.calculateDisplayValue;\n            column.calculateDisplayValue = _data2.default.compileGetter(column.displayField);\n          }\n\n          if (column.calculateDisplayValue) {\n            column.displayValueMap = column.displayValueMap || {};\n          }\n\n          updateSerializers(column, column.dataType);\n          var lookup = column.lookup;\n\n          if (lookup) {\n            updateSerializers(lookup, lookup.dataType);\n          }\n\n          var dataType = lookup ? lookup.dataType : column.dataType;\n\n          if (dataType) {\n            column.alignment = column.alignment || getAlignmentByDataType(dataType, this.option(\"rtlEnabled\"));\n            column.format = column.format || (0, _uiGrid_core3.getFormatByDataType)(dataType);\n            column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\n            column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\n\n            if (!(0, _type.isDefined)(column.filterOperations)) {\n              setFilterOperationsAsDefaultValues(column);\n            }\n\n            column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\n            column.showEditorAlways = (0, _type.isDefined)(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate;\n          }\n        },\n        updateColumnDataTypes: function (dataSource) {\n          var that = this;\n          var dateSerializationFormat = that.option(\"dateSerializationFormat\");\n\n          var firstItems = that._getFirstItems(dataSource);\n\n          var isColumnDataTypesUpdated = false;\n\n          _iterator2.default.each(that._columns, function (index, column) {\n            var i;\n            var value;\n            var dataType;\n            var lookupDataType;\n            var valueDataType;\n            var lookup = column.lookup;\n\n            if ((0, _uiGrid_core3.isDateType)(column.dataType) && void 0 === column.serializationFormat) {\n              column.serializationFormat = dateSerializationFormat;\n            }\n\n            if (lookup && (0, _uiGrid_core3.isDateType)(lookup.dataType) && void 0 === column.serializationFormat) {\n              lookup.serializationFormat = dateSerializationFormat;\n            }\n\n            if (column.calculateCellValue && firstItems.length) {\n              if (!column.dataType || lookup && !lookup.dataType) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i]);\n\n                  if (!column.dataType) {\n                    valueDataType = getValueDataType(value);\n                    dataType = dataType || valueDataType;\n\n                    if (dataType && valueDataType && dataType !== valueDataType) {\n                      dataType = \"string\";\n                    }\n                  }\n\n                  if (lookup && !lookup.dataType) {\n                    valueDataType = getValueDataType((0, _uiGrid_core3.getDisplayValue)(column, value, firstItems[i]));\n                    lookupDataType = lookupDataType || valueDataType;\n\n                    if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\n                      lookupDataType = \"string\";\n                    }\n                  }\n                }\n\n                if (dataType || lookupDataType) {\n                  if (dataType) {\n                    column.dataType = dataType;\n                  }\n\n                  if (lookup && lookupDataType) {\n                    lookup.dataType = lookupDataType;\n                  }\n\n                  isColumnDataTypesUpdated = true;\n                }\n              }\n\n              if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\n                for (i = 0; i < firstItems.length; i++) {\n                  value = column.calculateCellValue(firstItems[i], true);\n\n                  if (void 0 === column.serializationFormat) {\n                    column.serializationFormat = getSerializationFormat(column.dataType, value);\n                  }\n\n                  if (lookup && void 0 === lookup.serializationFormat) {\n                    lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true));\n                  }\n                }\n              }\n            }\n\n            that._updateColumnOptions(column, index);\n          });\n\n          return isColumnDataTypesUpdated;\n        },\n        _customizeColumns: function (columns) {\n          var that = this;\n          var customizeColumns = that.option(\"customizeColumns\");\n\n          if (customizeColumns) {\n            var hasOwnerBand = columns.some(function (column) {\n              return (0, _type.isObject)(column.ownerBand);\n            });\n\n            if (hasOwnerBand) {\n              updateIndexes(that);\n            }\n\n            customizeColumns(columns);\n            assignColumns(that, createColumnsFromOptions(that, columns));\n          }\n        },\n        updateColumns: function (dataSource, forceApplying) {\n          var _this = this;\n\n          if (!forceApplying) {\n            this.updateSortingGrouping(dataSource);\n          }\n\n          if (!dataSource || dataSource.isLoaded()) {\n            var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\n            var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\n            var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\n\n            this._customizeColumns(this._columns);\n\n            updateIndexes(this);\n            var columns = this._columns;\n            return (0, _deferred.when)(this.refresh(true)).always(function () {\n              if (_this._columns !== columns) {\n                return;\n              }\n\n              _this._updateChanges(dataSource, {\n                sorting: sortParameters,\n                grouping: groupParameters,\n                filtering: filterParameters\n              });\n\n              fireColumnsChanged(_this);\n            });\n          }\n        },\n        _updateChanges: function (dataSource, parameters) {\n          if (dataSource) {\n            this.updateColumnDataTypes(dataSource);\n            this._dataSourceApplied = true;\n          }\n\n          if (!(0, _uiGrid_core3.equalSortParameters)(parameters.sorting, this.getSortDataSourceParameters())) {\n            updateColumnChanges(this, \"sorting\");\n          }\n\n          if (!(0, _uiGrid_core3.equalSortParameters)(parameters.grouping, this.getGroupDataSourceParameters())) {\n            updateColumnChanges(this, \"grouping\");\n          }\n\n          var dataController = this.getController(\"data\");\n\n          if (dataController && !(0, _uiGrid_core3.equalFilterParameters)(parameters.filtering, dataController.getCombinedFilter())) {\n            updateColumnChanges(this, \"filtering\");\n          }\n\n          updateColumnChanges(this, \"columns\");\n        },\n        updateSortingGrouping: function (dataSource, fromDataSource) {\n          var that = this;\n          var sortParameters;\n          var isColumnsChanged;\n\n          var updateSortGroupParameterIndexes = function (columns, sortParameters, indexParameterName) {\n            _iterator2.default.each(columns, function (index, column) {\n              delete column[indexParameterName];\n\n              if (sortParameters) {\n                for (var i = 0; i < sortParameters.length; i++) {\n                  var selector = sortParameters[i].selector;\n                  var isExpanded = sortParameters[i].isExpanded;\n\n                  if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue) {\n                    column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\n\n                    if (void 0 !== isExpanded) {\n                      column.autoExpandGroup = isExpanded;\n                    }\n\n                    column[indexParameterName] = i;\n                    break;\n                  }\n                }\n              }\n            });\n          };\n\n          if (dataSource) {\n            sortParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.sort());\n            var groupParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group());\n            var columnsGroupParameters = that.getGroupDataSourceParameters();\n            var columnsSortParameters = that.getSortDataSourceParameters();\n\n            if (!that._columns.length) {\n              _iterator2.default.each(groupParameters, function (index, group) {\n                that._columns.push(group.selector);\n              });\n\n              _iterator2.default.each(sortParameters, function (index, sort) {\n                that._columns.push(sort.selector);\n              });\n\n              assignColumns(that, createColumnsFromOptions(that, that._columns));\n            }\n\n            if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(groupParameters, columnsGroupParameters)) {\n              updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\n\n              if (fromDataSource) {\n                updateColumnChanges(that, \"grouping\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(sortParameters, columnsSortParameters)) {\n              updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\n\n              if (fromDataSource) {\n                updateColumnChanges(that, \"sorting\");\n                isColumnsChanged = true;\n              }\n            }\n\n            if (isColumnsChanged) {\n              fireColumnsChanged(that);\n            }\n          }\n        },\n        updateFilter: function (filter, remoteFiltering, columnIndex, filterValue) {\n          var that = this;\n\n          if (!Array.isArray(filter)) {\n            return filter;\n          }\n\n          filter = (0, _extend.extend)([], filter);\n          columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\n          filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\n\n          if ((0, _type.isString)(filter[0]) && \"!\" !== filter[0]) {\n            var column = that.columnOption(filter[0]);\n\n            if (remoteFiltering) {\n              if ((0, _config2.default)().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\n                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\");\n              }\n            } else {\n              if (column && column.selector) {\n                filter[0] = column.selector;\n                filter[0].columnIndex = column.index;\n              }\n            }\n          } else {\n            if ((0, _type.isFunction)(filter[0])) {\n              filter[0].columnIndex = columnIndex;\n              filter[0].filterValue = filterValue;\n            }\n          }\n\n          for (var i = 0; i < filter.length; i++) {\n            filter[i] = that.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue);\n          }\n\n          return filter;\n        },\n        columnCount: function () {\n          return this._columns ? this._columns.length : 0;\n        },\n        columnOption: function (identifier, option, value, notFireEvent) {\n          var that = this;\n\n          var columns = that._columns.concat(that._commandColumns);\n\n          var column = findColumn(columns, identifier);\n\n          if (column) {\n            if (1 === arguments.length) {\n              return (0, _extend.extend)({}, column);\n            }\n\n            if ((0, _type.isString)(option)) {\n              if (2 === arguments.length) {\n                return columnOptionCore(that, column, option);\n              } else {\n                columnOptionCore(that, column, option, value, notFireEvent);\n              }\n            } else {\n              if ((0, _type.isObject)(option)) {\n                _iterator2.default.each(option, function (optionName, value) {\n                  columnOptionCore(that, column, optionName, value, notFireEvent);\n                });\n              }\n            }\n\n            fireColumnsChanged(that);\n          }\n        },\n        clearSorting: function () {\n          var that = this;\n          var columnCount = this.columnCount();\n          that.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            that.columnOption(i, \"sortOrder\", void 0);\n          }\n\n          that.endUpdate();\n        },\n        clearGrouping: function () {\n          var that = this;\n          var columnCount = this.columnCount();\n          that.beginUpdate();\n\n          for (var i = 0; i < columnCount; i++) {\n            that.columnOption(i, \"groupIndex\", void 0);\n          }\n\n          that.endUpdate();\n        },\n        getVisibleIndex: function (index, rowIndex) {\n          var columns = this.getVisibleColumns(rowIndex);\n\n          for (var i = columns.length - 1; i >= 0; i--) {\n            if (columns[i].index === index) {\n              return i;\n            }\n          }\n\n          return -1;\n        },\n        getVisibleColumnIndex: function (id, rowIndex) {\n          var index = this.columnOption(id, \"index\");\n          return this.getVisibleIndex(index, rowIndex);\n        },\n        addColumn: function (options) {\n          var that = this;\n          var column = createColumn(that, options);\n          var index = that._columns.length;\n\n          that._columns.push(column);\n\n          if (column.isBand) {\n            that._columns = createColumnsFromOptions(that, that._columns);\n            column = that._columns[index];\n          }\n\n          column.added = options;\n          updateIndexes(that, column);\n          that.updateColumns(that._dataSource);\n        },\n        deleteColumn: function (id) {\n          var that = this;\n          var column = that.columnOption(id);\n\n          if (column && column.index >= 0) {\n            convertOwnerBandToColumnReference(that._columns);\n\n            that._columns.splice(column.index, 1);\n\n            if (column.isBand) {\n              var childIndexes = that.getChildrenByBandColumn(column.index).map(function (column) {\n                return column.index;\n              });\n              that._columns = that._columns.filter(function (column) {\n                return childIndexes.indexOf(column.index) < 0;\n              });\n            }\n\n            updateIndexes(that);\n            that.updateColumns(that._dataSource);\n          }\n        },\n        addCommandColumn: function (options) {\n          var commandColumn = this._commandColumns.filter(function (column) {\n            return column.command === options.command;\n          })[0];\n\n          if (!commandColumn) {\n            commandColumn = options;\n\n            this._commandColumns.push(commandColumn);\n          }\n        },\n        getUserState: function () {\n          var columns = this._columns;\n          var result = [];\n          var i;\n\n          function handleStateField(index, value) {\n            if (void 0 !== columns[i][value]) {\n              result[i][value] = columns[i][value];\n            }\n          }\n\n          for (i = 0; i < columns.length; i++) {\n            result[i] = {};\n\n            _iterator2.default.each(USER_STATE_FIELD_NAMES, handleStateField);\n          }\n\n          return result;\n        },\n        setUserState: function (state) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var ignoreColumnOptionNames = that.option(\"stateStoring.ignoreColumnOptionNames\");\n\n          if (!ignoreColumnOptionNames) {\n            ignoreColumnOptionNames = [];\n            var commonColumnSettings = that.getCommonSettings();\n\n            if (!that.option(\"columnChooser.enabled\")) {\n              ignoreColumnOptionNames.push(\"visible\");\n            }\n\n            if (\"none\" === that.option(\"sorting.mode\")) {\n              ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\");\n            }\n\n            if (!commonColumnSettings.allowGrouping) {\n              ignoreColumnOptionNames.push(\"groupIndex\");\n            }\n\n            if (!commonColumnSettings.allowFixing) {\n              ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\");\n            }\n\n            if (!commonColumnSettings.allowResizing) {\n              ignoreColumnOptionNames.push(\"width\", \"visibleWidth\");\n            }\n\n            var isFilterPanelHidden = !that.option(\"filterPanel.visible\");\n\n            if (!that.option(\"filterRow.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\");\n            }\n\n            if (!that.option(\"headerFilter.visible\") && isFilterPanelHidden) {\n              ignoreColumnOptionNames.push(\"filterValues\", \"filterType\");\n            }\n          }\n\n          that._columnsUserState = state;\n          that._ignoreColumnOptionNames = ignoreColumnOptionNames;\n          that._hasUserState = !!state;\n          updateColumnChanges(that, \"filtering\");\n          that.init();\n\n          if (dataSource) {\n            dataSource.sort(that.getSortDataSourceParameters());\n            dataSource.group(that.getGroupDataSourceParameters());\n          }\n        },\n        _createCalculatedColumnOptions: function (columnOptions, bandColumn) {\n          var calculatedColumnOptions = {};\n          var dataField = columnOptions.dataField;\n\n          if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\n            calculatedColumnOptions.isBand = true;\n            dataField = null;\n          }\n\n          if (dataField) {\n            if ((0, _type.isString)(dataField)) {\n              var getter = _data2.default.compileGetter(dataField);\n\n              calculatedColumnOptions = {\n                caption: _inflector2.default.captionize(dataField),\n                calculateCellValue: function (data, skipDeserialization) {\n                  var value = getter(data);\n                  return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n                },\n                setCellValue: defaultSetCellValue,\n                parseValue: function (text) {\n                  var column = this;\n                  var result;\n                  var parsedValue;\n\n                  if (\"number\" === column.dataType) {\n                    if ((0, _type.isString)(text) && column.format) {\n                      parsedValue = _number2.default.parse(text);\n\n                      if ((0, _type.isNumeric)(parsedValue)) {\n                        result = parsedValue;\n                      }\n                    } else {\n                      if ((0, _type.isDefined)(text) && (0, _type.isNumeric)(text)) {\n                        result = Number(text);\n                      }\n                    }\n                  } else {\n                    if (\"boolean\" === column.dataType) {\n                      if (text === column.trueText) {\n                        result = true;\n                      } else {\n                        if (text === column.falseText) {\n                          result = false;\n                        }\n                      }\n                    } else {\n                      if ((0, _uiGrid_core3.isDateType)(column.dataType)) {\n                        parsedValue = _date2.default.parse(text, column.format);\n\n                        if (parsedValue) {\n                          result = parsedValue;\n                        }\n                      } else {\n                        result = text;\n                      }\n                    }\n                  }\n\n                  return result;\n                }\n              };\n            }\n\n            calculatedColumnOptions.allowFiltering = true;\n          } else {\n            calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression;\n          }\n\n          calculatedColumnOptions.calculateFilterExpression = function () {\n            return _filtering2.default.defaultCalculateFilterExpression.apply(this, arguments);\n          };\n\n          calculatedColumnOptions.createFilterExpression = function (filterValue) {\n            var result;\n\n            if (this.calculateFilterExpression) {\n              result = this.calculateFilterExpression.apply(this, arguments);\n            }\n\n            if ((0, _type.isFunction)(result)) {\n              result = [result, \"=\", true];\n            }\n\n            if (result) {\n              result.columnIndex = this.index;\n              result.filterValue = filterValue;\n            }\n\n            return result;\n          };\n\n          if (!dataField || !(0, _type.isString)(dataField)) {\n            (0, _extend.extend)(true, calculatedColumnOptions, {\n              allowSorting: false,\n              allowGrouping: false,\n              calculateCellValue: function () {\n                return null;\n              }\n            });\n          }\n\n          if (bandColumn) {\n            calculatedColumnOptions.allowFixing = false;\n          }\n\n          if (columnOptions.dataType) {\n            calculatedColumnOptions.userDataType = columnOptions.dataType;\n          }\n\n          if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\n            calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation;\n          }\n\n          if (columnOptions.lookup) {\n            calculatedColumnOptions.lookup = {\n              calculateCellValue: function (value, skipDeserialization) {\n                if (this.valueExpr) {\n                  value = this.valueMap && this.valueMap[value];\n                }\n\n                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value;\n              },\n              updateValueMap: function () {\n                this.valueMap = {};\n\n                if (this.items) {\n                  var calculateValue = _data2.default.compileGetter(this.valueExpr);\n\n                  var calculateDisplayValue = _data2.default.compileGetter(this.displayExpr);\n\n                  for (var i = 0; i < this.items.length; i++) {\n                    var item = this.items[i];\n                    var displayValue = calculateDisplayValue(item);\n                    this.valueMap[calculateValue(item)] = displayValue;\n                    this.dataType = this.dataType || getValueDataType(displayValue);\n                  }\n                }\n              },\n              update: function () {\n                var that = this;\n                var dataSource = that.dataSource;\n\n                if (dataSource) {\n                  if ((0, _type.isFunction)(dataSource) && !(0, _variable_wrapper.isWrapped)(dataSource)) {\n                    dataSource = dataSource({});\n                  }\n\n                  if ((0, _type.isPlainObject)(dataSource) || dataSource instanceof _abstract_store2.default || Array.isArray(dataSource)) {\n                    if (that.valueExpr) {\n                      var dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSource);\n                      dataSourceOptions.paginate = false;\n                      dataSource = new _data_source.DataSource(dataSourceOptions);\n                      return dataSource.load().done(function (data) {\n                        that.items = data;\n                        that.updateValueMap && that.updateValueMap();\n                      });\n                    }\n                  } else {\n                    _ui2.default.log(\"E1016\");\n                  }\n                } else {\n                  that.updateValueMap && that.updateValueMap();\n                }\n              }\n            };\n          }\n\n          calculatedColumnOptions.resizedCallbacks = (0, _callbacks2.default)();\n\n          if (columnOptions.resized) {\n            calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions));\n          }\n\n          _iterator2.default.each(calculatedColumnOptions, function (optionName) {\n            if ((0, _type.isFunction)(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\n              var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\n              calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName];\n            }\n          });\n\n          return calculatedColumnOptions;\n        },\n        getRowCount: function () {\n          this._rowCount = this._rowCount || _getRowCount(this);\n          return this._rowCount;\n        },\n        getRowIndex: function (columnIndex, alwaysGetRowIndex) {\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          return column && (alwaysGetRowIndex || column.visible && !(column.command || (0, _type.isDefined)(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0;\n        },\n        getChildrenByBandColumn: function (bandColumnIndex, onlyVisibleDirectChildren) {\n          var that = this;\n          var bandColumnsCache = that.getBandColumnsCache();\n\n          var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\n\n          if (onlyVisibleDirectChildren) {\n            return result.filter(function (column) {\n              return column.visible && !column.command;\n            }).sort(function (column1, column2) {\n              return column1.visibleIndex - column2.visibleIndex;\n            });\n          }\n\n          return result;\n        },\n        isParentBandColumn: function (columnIndex, bandColumnIndex) {\n          var result = false;\n          var column = this._columns[columnIndex];\n          var bandColumnsCache = this.getBandColumnsCache();\n          var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n\n          if (parentBandColumns) {\n            _iterator2.default.each(parentBandColumns, function (_, bandColumn) {\n              if (bandColumn.index === bandColumnIndex) {\n                result = true;\n                return false;\n              }\n            });\n          }\n\n          return result;\n        },\n        isParentColumnVisible: function (columnIndex) {\n          var result = true;\n          var bandColumnsCache = this.getBandColumnsCache();\n          var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\n          bandColumns && _iterator2.default.each(bandColumns, function (_, bandColumn) {\n            result = result && bandColumn.visible;\n            return result;\n          });\n          return result;\n        },\n        getColumnId: function (column) {\n          if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\n            if (isCustomCommandColumn(this, column)) {\n              return \"type:\" + column.type;\n            }\n\n            return \"command:\" + column.command;\n          }\n\n          return column.index;\n        },\n        getCustomizeTextByDataType: getCustomizeTextByDataType,\n        getHeaderContentAlignment: function (columnAlignment) {\n          var rtlEnabled = this.option(\"rtlEnabled\");\n\n          if (rtlEnabled) {\n            return \"left\" === columnAlignment ? \"right\" : \"left\";\n          }\n\n          return columnAlignment;\n        }\n      };\n    }())\n  }\n};","map":{"version":3,"sources":["/Users/tracyvy/Desktop/calendar/client/node_modules/devextreme/ui/grid_core/ui.grid_core.columns_controller.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_callbacks","_callbacks2","_variable_wrapper","_data","_data2","_common","_type","_iterator","_iterator2","_position","_extend","_array","_config","_config2","_object","_ui","_ui2","_uiGrid_core","_uiGrid_core2","_uiGrid_core3","_inflector","_inflector2","_date_serialization","_date_serialization2","_number","_number2","_date","_date2","_message","_message2","_deferred","_abstract_store","_abstract_store2","_data_source","_utils","_filtering","_filtering2","obj","__esModule","USER_STATE_FIELD_NAMES_15_1","USER_STATE_FIELD_NAMES","concat","IGNORE_COLUMN_OPTION_NAMES","visibleWidth","bestFitWidth","bufferedFilterValue","COMMAND_EXPAND_CLASS","MAX_SAFE_INTEGER","Number","GROUP_COMMAND_COLUMN_NAME","regExp","globalColumnId","module","exports","defaultOptions","commonColumnSettings","allowFiltering","allowHiding","allowSorting","allowEditing","encodeHtml","trueText","default","format","falseText","allowColumnReordering","allowColumnResizing","columnResizingMode","columnMinWidth","columnWidth","adaptColumnWidthByRatio","columns","regenerateColumnsByVisibleItems","customizeColumns","dateSerializationFormat","controllers","Controller","inherit","DEFAULT_COLUMN_OPTIONS","visible","showInColumnChooser","DATATYPE_OPERATIONS","number","string","date","datetime","COLUMN_INDEX_OPTIONS","visibleIndex","groupIndex","grouped","sortIndex","sortOrder","GROUP_LOCATION","COLUMN_CHOOSER_LOCATION","setFilterOperationsAsDefaultValues","column","filterOperations","defaultFilterOperations","createColumn","that","columnOptions","userStateColumnOptions","bandColumn","commonColumnOptions","isString","dataField","result","command","deepExtendArraySafe","getCommonSettings","name","extend","calculatedColumnOptions","_createCalculatedColumnOptions","type","headerId","selector","createColumnsFromOptions","columnsOptions","each","index","_columnsUserState","checkUserStateColumn","ownerBand","push","hasColumns","getParentBandColumns","columnIndex","columnParentByIndex","parent","unshift","_getChildrenByBandColumn","columnChildrenByIndex","recursive","children","i","length","isDefined","showWhenGrouped","isBand","getColumnByIndexes","columnIndexes","bandColumnsCache","getBandColumnsCache","callbackFilter","isPlain","_columns","filter","getColumnFullPath","item","indexOf","join","calculateColspan","columnID","colspan","getChildrenByBandColumn","_","processBandColumns","rowspan","getRowCount","getValueDataType","value","dataType","getSerializationFormat","getDateSerializationFormat","isNumeric","updateSerializers","options","deserializeValue","isDateType","deserializeDate","serializeValue","serializeDate","serializationFormat","parsedValue","parseFloat","isNaN","target","toString","getAlignmentByDataType","isRTL","getDefaultAlignment","customizeTextForBooleanDataType","e","valueText","getCustomizeTextByDataType","createColumnsFromDataSource","dataSource","firstItems","_getFirstItems","fieldName","processedFields","isFunction","isWrapped","updateColumnIndexes","isObject","_commandColumns","updateColumnGroupIndexes","currentColumn","normalizeIndexes","updateColumnSortIndexes","isSortOrderValid","updateColumnVisibleIndexes","key","bandColumns","parentBandColumns","bandColumnIndex","getColumnIndexByVisibleIndex","location","rowIndex","getGroupColumns","getChooserColumns","getVisibleColumns","col","moveColumnToGroup","groupColumns","Math","max","userStateColumn","applyUserState","columnsUserState","ignoreColumnOptionNames","_ignoreColumnOptionNames","columnCountById","resultColumns","allColumnsHaveState","userStateColumnIndexes","userStateColumnIndex","applyFieldsState","inArray","defaultSelectedFilterOperation","findUserStateColumn","id","count","j","_hasUserState","initialIndex","hasAddedBands","columnUserState","added","assignColumns","updateIndexes","resetBandColumnsCache","resetColumnsCache","updateColumnDataTypes","updateColumnChanges","changeType","optionName","columnChanges","_columnChanges","optionNames","changeTypes","split","fireColumnsChanged","onColumnsChanging","option","reinitOptionNames","needReinit","some","isInitialized","_updateLockCount","component","reinit","columnsChanged","fire","updateSortOrderWhenGrouping","prevGroupIndex","columnWasGrouped","lastSortOrder","fireOptionChanged","prevValue","fullOptionName","fullOptionPath","_skipProcessingColumnsChange","_notifyOptionChanged","columnOptionCore","notFireEvent","optionGetter","compileGetter","initialColumn","arguments","functionsAsIs","optionSetter","compileSetter","getColumnByPath","addExpandColumn","_getExpandColumnOptions","addCommandColumn","defaultSetCellValue","data","path","dotCount","getDataColumns","bandColumnID","apply","_getRowCount","rowCount","forEach","parents","invisibleParents","isCustomCommandColumn","commandColumn","getFixedPosition","rtlEnabled","fixedPosition","processExpandColumns","expandColumns","customColumnIndex","expandColumnsByType","map","expandColumn","splice","digitsCount","numberToString","str","mergeColumns","commandColumns","needToExtend","commandColumnIndex","slice","isColumnFixing","_isColumnFixing","defaultCommandColumns","fixed","getCommandColumnIndex","reduce","columnType","allowFixing","allowReordering","isColumnFixed","convertOwnerBandToColumnReference","_bandColumnsCache","findColumn","identifier","identifierOptionName","substr","width","cssClass","allowGrouping","allowResizing","groupsCount","items","getFirstItemsCore","childItems","collapsedItems","normalizeSortingInfo","group","_endUpdateCore","init","_isColumnsFromOptions","_dataSourceApplied","applyDataSource","_dataSource","callbackNames","replace","parseInt","optionChanged","args","needUpdateRequireResize","handled","previousValue","Array","isArray","fullName","_columnOptionChanged","_updateRequireResize","isEditingPopup","isEditingForm","callBase","columnOptionValue","columnOptionName","columnOption","_requireResize","publicMethods","forceApplying","isDataSourceLoaded","isLoaded","_dataSourceColumnsCount","columnsFromDataSource","updateColumns","isAllDataTypesDefined","Deferred","reject","promise","reset","_visibleColumns","_fixedColumns","_rowCount","getUserState","isDataSourceApplied","groupingOptions","groupPanelOptions","minWidth","autoExpandGroup","autoExpandAll","allowCollapsing","allowColumnDragging","contextMenuEnabled","isColumnOptionUsed","checkSerializers","calculateCellValue","defaultCalculateCellValue","getColumns","isBandColumnsUsed","_getVisibleColumnsCore","getFixedColumns","_getFixedColumnsCore","getFilteringColumns","allowHeaderFiltering","field","transparentColumn","transparentColspan","notFixedColumnCount","transparentColumnIndex","lastFixedPosition","visibleColumns","prevColumn","_getExpandColumnsCore","getExpandColumns","firstGroupColumn","isFixedFirstGroupColumn","cellTemplate","headerCellTemplate","parentIndex","_isColumnVisible","isParentColumnVisible","rowspanGroupColumns","rowspanExpandColumns","positiveIndexedColumns","negativeIndexedColumns","notGroupedColumnsCount","isFixedToEnd","columnDigitsCount","indexedColumns","orderEach","firstPositiveIndexColumn","columnsByFixing","columnsByVisibleIndex","call","getInvisibleColumns","hiddenColumnsByBand","getAllColumns","grep","allowMoveColumn","fromVisibleIndex","toVisibleIndex","sourceLocation","targetLocation","sourceColumn","moveColumn","fromIndex","toIndex","targetGroupIndex","targetColumn","isVisible","changeSortOrder","sortingOptions","sortingMode","mode","needResetSorting","nextSortOrder","getSortDataSourceParameters","useLocalSelector","sortColumns","sort","sortItem","calculateSortValue","displayField","calculateDisplayValue","desc","sortingMethod","compare","bind","getGroupDataSourceParameters","calculateGroupValue","groupItem","isExpanded","refresh","updateNewLookupsOnly","deferreds","lookup","valueMap","update","when","done","_updateColumnOptions","calculateCallbackName","calculateCallback","originalCallback","displayValueMap","alignment","getFormatByDataType","customizeText","defaultFilterOperation","showEditorAlways","isColumnDataTypesUpdated","lookupDataType","valueDataType","getDisplayValue","_customizeColumns","hasOwnerBand","_this","updateSortingGrouping","sortParameters","groupParameters","filterParameters","lastLoadOptions","always","_updateChanges","sorting","grouping","filtering","parameters","equalSortParameters","dataController","getController","equalFilterParameters","getCombinedFilter","fromDataSource","isColumnsChanged","updateSortGroupParameterIndexes","indexParameterName","columnsGroupParameters","columnsSortParameters","updateFilter","remoteFiltering","filterValue","forceIsoDateParsing","columnCount","clearSorting","beginUpdate","endUpdate","clearGrouping","getVisibleIndex","getVisibleColumnIndex","addColumn","deleteColumn","childIndexes","handleStateField","setUserState","state","isFilterPanelHidden","getter","caption","captionize","skipDeserialization","setCellValue","parseValue","text","parse","calculateFilterExpression","defaultCalculateFilterExpression","createFilterExpression","userDataType","selectedFilterOperation","valueExpr","updateValueMap","calculateValue","displayExpr","displayValue","isPlainObject","dataSourceOptions","normalizeDataSourceOptions","paginate","DataSource","load","log","resizedCallbacks","resized","add","defaultOptionName","charAt","toUpperCase","getRowIndex","alwaysGetRowIndex","onlyVisibleDirectChildren","column1","column2","isParentBandColumn","getColumnId","getHeaderContentAlignment","columnAlignment"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.columns_controller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _callbacks = require(\"../../core/utils/callbacks\");\r\nvar _callbacks2 = _interopRequireDefault(_callbacks);\r\nvar _variable_wrapper = require(\"../../core/utils/variable_wrapper\");\r\nvar _data = require(\"../../core/utils/data\");\r\nvar _data2 = _interopRequireDefault(_data);\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _iterator2 = _interopRequireDefault(_iterator);\r\nvar _position = require(\"../../core/utils/position\");\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _array = require(\"../../core/utils/array\");\r\nvar _config = require(\"../../core/config\");\r\nvar _config2 = _interopRequireDefault(_config);\r\nvar _object = require(\"../../core/utils/object\");\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _inflector = require(\"../../core/utils/inflector\");\r\nvar _inflector2 = _interopRequireDefault(_inflector);\r\nvar _date_serialization = require(\"../../core/utils/date_serialization\");\r\nvar _date_serialization2 = _interopRequireDefault(_date_serialization);\r\nvar _number = require(\"../../localization/number\");\r\nvar _number2 = _interopRequireDefault(_number);\r\nvar _date = require(\"../../localization/date\");\r\nvar _date2 = _interopRequireDefault(_date);\r\nvar _message = require(\"../../localization/message\");\r\nvar _message2 = _interopRequireDefault(_message);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _abstract_store = require(\"../../data/abstract_store\");\r\nvar _abstract_store2 = _interopRequireDefault(_abstract_store);\r\nvar _data_source = require(\"../../data/data_source/data_source\");\r\nvar _utils = require(\"../../data/data_source/utils\");\r\nvar _filtering = require(\"../shared/filtering\");\r\nvar _filtering2 = _interopRequireDefault(_filtering);\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nvar USER_STATE_FIELD_NAMES_15_1 = [\"filterValues\", \"filterType\", \"fixed\", \"fixedPosition\"];\r\nvar USER_STATE_FIELD_NAMES = [\"visibleIndex\", \"dataField\", \"name\", \"dataType\", \"width\", \"visible\", \"sortOrder\", \"lastSortOrder\", \"sortIndex\", \"groupIndex\", \"filterValue\", \"selectedFilterOperation\", \"added\"].concat(USER_STATE_FIELD_NAMES_15_1);\r\nvar IGNORE_COLUMN_OPTION_NAMES = {\r\n    visibleWidth: true,\r\n    bestFitWidth: true,\r\n    bufferedFilterValue: true\r\n};\r\nvar COMMAND_EXPAND_CLASS = \"dx-command-expand\";\r\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;\r\nvar GROUP_COMMAND_COLUMN_NAME = \"groupExpand\";\r\nvar regExp = /columns\\[(\\d+)\\]\\.?/gi;\r\nvar globalColumnId = 1;\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            commonColumnSettings: {\r\n                allowFiltering: true,\r\n                allowHiding: true,\r\n                allowSorting: true,\r\n                allowEditing: true,\r\n                encodeHtml: true,\r\n                trueText: _message2.default.format(\"dxDataGrid-trueText\"),\r\n                falseText: _message2.default.format(\"dxDataGrid-falseText\")\r\n            },\r\n            allowColumnReordering: false,\r\n            allowColumnResizing: false,\r\n            columnResizingMode: \"nextColumn\",\r\n            columnMinWidth: void 0,\r\n            columnWidth: void 0,\r\n            adaptColumnWidthByRatio: true,\r\n            columns: void 0,\r\n            regenerateColumnsByVisibleItems: false,\r\n            customizeColumns: null,\r\n            dateSerializationFormat: void 0\r\n        }\r\n    },\r\n    controllers: {\r\n        columns: _uiGrid_core2.default.Controller.inherit(function() {\r\n            var DEFAULT_COLUMN_OPTIONS = {\r\n                visible: true,\r\n                showInColumnChooser: true\r\n            };\r\n            var DATATYPE_OPERATIONS = {\r\n                number: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                string: [\"contains\", \"notcontains\", \"startswith\", \"endswith\", \"=\", \"<>\"],\r\n                date: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"],\r\n                datetime: [\"=\", \"<>\", \"<\", \">\", \"<=\", \">=\", \"between\"]\r\n            };\r\n            var COLUMN_INDEX_OPTIONS = {\r\n                visibleIndex: true,\r\n                groupIndex: true,\r\n                grouped: true,\r\n                sortIndex: true,\r\n                sortOrder: true\r\n            };\r\n            var GROUP_LOCATION = \"group\";\r\n            var COLUMN_CHOOSER_LOCATION = \"columnChooser\";\r\n            var setFilterOperationsAsDefaultValues = function(column) {\r\n                column.filterOperations = column.defaultFilterOperations\r\n            };\r\n            var createColumn = function(that, columnOptions, userStateColumnOptions, bandColumn) {\r\n                var commonColumnOptions = {};\r\n                if (columnOptions) {\r\n                    if ((0, _type.isString)(columnOptions)) {\r\n                        columnOptions = {\r\n                            dataField: columnOptions\r\n                        }\r\n                    }\r\n                    var result = {};\r\n                    if (columnOptions.command) {\r\n                        result = (0, _object.deepExtendArraySafe)(commonColumnOptions, columnOptions)\r\n                    } else {\r\n                        commonColumnOptions = that.getCommonSettings(columnOptions);\r\n                        if (userStateColumnOptions && userStateColumnOptions.name && userStateColumnOptions.dataField) {\r\n                            columnOptions = (0, _extend.extend)({}, columnOptions, {\r\n                                dataField: userStateColumnOptions.dataField\r\n                            })\r\n                        }\r\n                        var calculatedColumnOptions = that._createCalculatedColumnOptions(columnOptions, bandColumn);\r\n                        if (!columnOptions.type) {\r\n                            result = {\r\n                                headerId: \"dx-col-\".concat(globalColumnId++)\r\n                            }\r\n                        }\r\n                        result = (0, _object.deepExtendArraySafe)(result, DEFAULT_COLUMN_OPTIONS);\r\n                        (0, _object.deepExtendArraySafe)(result, commonColumnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, calculatedColumnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, columnOptions);\r\n                        (0, _object.deepExtendArraySafe)(result, {\r\n                            selector: null\r\n                        })\r\n                    }\r\n                    if (columnOptions.filterOperations === columnOptions.defaultFilterOperations) {\r\n                        setFilterOperationsAsDefaultValues(result)\r\n                    }\r\n                    return result\r\n                }\r\n            };\r\n            var createColumnsFromOptions = function createColumnsFromOptions(that, columnsOptions, bandColumn) {\r\n                var result = [];\r\n                if (columnsOptions) {\r\n                    _iterator2.default.each(columnsOptions, function(index, columnOptions) {\r\n                        var userStateColumnOptions = that._columnsUserState && checkUserStateColumn(columnOptions, that._columnsUserState[index]) && that._columnsUserState[index];\r\n                        var column = createColumn(that, columnOptions, userStateColumnOptions, bandColumn);\r\n                        if (column) {\r\n                            if (bandColumn) {\r\n                                column.ownerBand = bandColumn\r\n                            }\r\n                            result.push(column);\r\n                            if (column.columns) {\r\n                                result = result.concat(createColumnsFromOptions(that, column.columns, column));\r\n                                delete column.columns;\r\n                                column.hasColumns = true\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n                return result\r\n            };\r\n            var getParentBandColumns = function(columnIndex, columnParentByIndex) {\r\n                var result = [];\r\n                var parent = columnParentByIndex[columnIndex];\r\n                while (parent) {\r\n                    result.unshift(parent);\r\n                    columnIndex = parent.index;\r\n                    parent = columnParentByIndex[columnIndex]\r\n                }\r\n                return result\r\n            };\r\n            var _getChildrenByBandColumn = function(columnIndex, columnChildrenByIndex, recursive) {\r\n                var result = [];\r\n                var children = columnChildrenByIndex[columnIndex];\r\n                if (children) {\r\n                    for (var i = 0; i < children.length; i++) {\r\n                        var column = children[i];\r\n                        if (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped) {\r\n                            result.push(column);\r\n                            if (recursive && column.isBand) {\r\n                                result = result.concat(_getChildrenByBandColumn(column.index, columnChildrenByIndex, recursive))\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnByIndexes = function(that, columnIndexes) {\r\n                var result;\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(column) {\r\n                    var ownerBand = result ? result.index : void 0;\r\n                    return column.ownerBand === ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    result = that._columns[columnIndexes[0]]\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    for (var i = 0; i < columnIndexes.length; i++) {\r\n                        result = columns[columnIndexes[i]];\r\n                        if (result) {\r\n                            columns = that._columns.filter(callbackFilter)\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var getColumnFullPath = function(that, column) {\r\n                var result = [];\r\n                var columns;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var callbackFilter = function(item) {\r\n                    return item.ownerBand === column.ownerBand\r\n                };\r\n                if (bandColumnsCache.isPlain) {\r\n                    var columnIndex = that._columns.indexOf(column);\r\n                    if (columnIndex >= 0) {\r\n                        result = [\"columns[\".concat(columnIndex, \"]\")]\r\n                    }\r\n                } else {\r\n                    columns = that._columns.filter(callbackFilter);\r\n                    while (columns.length && columns.indexOf(column) !== -1) {\r\n                        result.unshift(\"columns[\".concat(columns.indexOf(column), \"]\"));\r\n                        column = bandColumnsCache.columnParentByIndex[column.index];\r\n                        columns = column ? that._columns.filter(callbackFilter) : []\r\n                    }\r\n                }\r\n                return result.join(\".\")\r\n            };\r\n            var calculateColspan = function calculateColspan(that, columnID) {\r\n                var colspan = 0;\r\n                var columns = that.getChildrenByBandColumn(columnID, true);\r\n                _iterator2.default.each(columns, function(_, column) {\r\n                    if (column.isBand) {\r\n                        column.colspan = column.colspan || calculateColspan(that, column.index);\r\n                        colspan += column.colspan || 1\r\n                    } else {\r\n                        colspan += 1\r\n                    }\r\n                });\r\n                return colspan\r\n            };\r\n            var processBandColumns = function(that, columns, bandColumnsCache) {\r\n                var rowspan;\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    var column = columns[i];\r\n                    if (column.visible || column.command) {\r\n                        if (column.isBand) {\r\n                            column.colspan = column.colspan || calculateColspan(that, column.index)\r\n                        }\r\n                        if (!column.isBand || !column.colspan) {\r\n                            rowspan = that.getRowCount();\r\n                            if (!column.command && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\r\n                                rowspan -= getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex).length\r\n                            }\r\n                            if (rowspan > 1) {\r\n                                column.rowspan = rowspan\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var getValueDataType = function(value) {\r\n                var dataType = (0, _type.type)(value);\r\n                if (\"string\" !== dataType && \"boolean\" !== dataType && \"number\" !== dataType && \"date\" !== dataType && \"object\" !== dataType) {\r\n                    dataType = void 0\r\n                }\r\n                return dataType\r\n            };\r\n            var getSerializationFormat = function(dataType, value) {\r\n                switch (dataType) {\r\n                    case \"date\":\r\n                    case \"datetime\":\r\n                        return _date_serialization2.default.getDateSerializationFormat(value);\r\n                    case \"number\":\r\n                        if ((0, _type.isString)(value)) {\r\n                            return \"string\"\r\n                        }\r\n                        if ((0, _type.isNumeric)(value)) {\r\n                            return null\r\n                        }\r\n                }\r\n            };\r\n            var updateSerializers = function(options, dataType) {\r\n                if (!options.deserializeValue) {\r\n                    if ((0, _uiGrid_core3.isDateType)(dataType)) {\r\n                        options.deserializeValue = function(value) {\r\n                            return _date_serialization2.default.deserializeDate(value)\r\n                        };\r\n                        options.serializeValue = function(value) {\r\n                            return (0, _type.isString)(value) ? value : _date_serialization2.default.serializeDate(value, this.serializationFormat)\r\n                        }\r\n                    }\r\n                    if (\"number\" === dataType) {\r\n                        options.deserializeValue = function(value) {\r\n                            var parsedValue = parseFloat(value);\r\n                            return isNaN(parsedValue) ? value : parsedValue\r\n                        };\r\n                        options.serializeValue = function(value, target) {\r\n                            if (\"filter\" === target) {\r\n                                return value\r\n                            }\r\n                            return (0, _type.isDefined)(value) && \"string\" === this.serializationFormat ? value.toString() : value\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            var getAlignmentByDataType = function(dataType, isRTL) {\r\n                switch (dataType) {\r\n                    case \"number\":\r\n                        return \"right\";\r\n                    case \"boolean\":\r\n                        return \"center\";\r\n                    default:\r\n                        return (0, _position.getDefaultAlignment)(isRTL)\r\n                }\r\n            };\r\n            var customizeTextForBooleanDataType = function(e) {\r\n                if (true === e.value) {\r\n                    return this.trueText || \"true\"\r\n                } else {\r\n                    if (false === e.value) {\r\n                        return this.falseText || \"false\"\r\n                    } else {\r\n                        return e.valueText || \"\"\r\n                    }\r\n                }\r\n            };\r\n            var getCustomizeTextByDataType = function(dataType) {\r\n                if (\"boolean\" === dataType) {\r\n                    return customizeTextForBooleanDataType\r\n                }\r\n            };\r\n            var createColumnsFromDataSource = function(that, dataSource) {\r\n                var firstItems = that._getFirstItems(dataSource);\r\n                var fieldName;\r\n                var processedFields = {};\r\n                var result = [];\r\n                for (var i = 0; i < firstItems.length; i++) {\r\n                    if (firstItems[i]) {\r\n                        for (fieldName in firstItems[i]) {\r\n                            if (!(0, _type.isFunction)(firstItems[i][fieldName]) || (0, _variable_wrapper.isWrapped)(firstItems[i][fieldName])) {\r\n                                processedFields[fieldName] = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (fieldName in processedFields) {\r\n                    if (0 !== fieldName.indexOf(\"__\")) {\r\n                        var column = createColumn(that, fieldName);\r\n                        result.push(column)\r\n                    }\r\n                }\r\n                return result\r\n            };\r\n            var updateColumnIndexes = function(that) {\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    column.index = index\r\n                });\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    if ((0, _type.isObject)(column.ownerBand)) {\r\n                        column.ownerBand = column.ownerBand.index\r\n                    }\r\n                });\r\n                _iterator2.default.each(that._commandColumns, function(index, column) {\r\n                    column.index = -(index + 1)\r\n                })\r\n            };\r\n            var updateColumnGroupIndexes = function(that, currentColumn) {\r\n                (0, _array.normalizeIndexes)(that._columns, \"groupIndex\", currentColumn, function(column) {\r\n                    var grouped = column.grouped;\r\n                    delete column.grouped;\r\n                    return grouped\r\n                })\r\n            };\r\n            var updateColumnSortIndexes = function(that, currentColumn) {\r\n                _iterator2.default.each(that._columns, function(index, column) {\r\n                    if ((0, _type.isDefined)(column.sortIndex) && !isSortOrderValid(column.sortOrder)) {\r\n                        delete column.sortIndex\r\n                    }\r\n                });\r\n                (0, _array.normalizeIndexes)(that._columns, \"sortIndex\", currentColumn, function(column) {\r\n                    return !(0, _type.isDefined)(column.groupIndex) && isSortOrderValid(column.sortOrder)\r\n                })\r\n            };\r\n            var updateColumnVisibleIndexes = function(that, currentColumn) {\r\n                var key;\r\n                var column;\r\n                var bandColumns = {};\r\n                var result = [];\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var columns = that._columns.filter(function(column) {\r\n                    return !column.command\r\n                });\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    var parentBandColumns = getParentBandColumns(i, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns.length) {\r\n                        var bandColumnIndex = parentBandColumns[parentBandColumns.length - 1].index;\r\n                        bandColumns[bandColumnIndex] = bandColumns[bandColumnIndex] || [];\r\n                        bandColumns[bandColumnIndex].push(column)\r\n                    } else {\r\n                        result.push(column)\r\n                    }\r\n                }\r\n                for (key in bandColumns) {\r\n                    (0, _array.normalizeIndexes)(bandColumns[key], \"visibleIndex\", currentColumn)\r\n                }(0, _array.normalizeIndexes)(result, \"visibleIndex\", currentColumn)\r\n            };\r\n            var getColumnIndexByVisibleIndex = function(that, visibleIndex, location) {\r\n                var rowIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.rowIndex : null;\r\n                var columns = location === GROUP_LOCATION ? that.getGroupColumns() : location === COLUMN_CHOOSER_LOCATION ? that.getChooserColumns() : that.getVisibleColumns(rowIndex);\r\n                var column;\r\n                visibleIndex = (0, _type.isObject)(visibleIndex) ? visibleIndex.columnIndex : visibleIndex;\r\n                column = columns[visibleIndex];\r\n                if (column && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                    column = that._columns.filter(function(col) {\r\n                        return column.type === col.type\r\n                    })[0] || column\r\n                }\r\n                return column && (0, _type.isDefined)(column.index) ? column.index : -1\r\n            };\r\n            var moveColumnToGroup = function(that, column, groupIndex) {\r\n                var groupColumns = that.getGroupColumns();\r\n                var i;\r\n                if (groupIndex >= 0) {\r\n                    for (i = 0; i < groupColumns.length; i++) {\r\n                        if (groupColumns[i].groupIndex >= groupIndex) {\r\n                            groupColumns[i].groupIndex++\r\n                        }\r\n                    }\r\n                } else {\r\n                    groupIndex = 0;\r\n                    for (i = 0; i < groupColumns.length; i++) {\r\n                        groupIndex = Math.max(groupIndex, groupColumns[i].groupIndex + 1)\r\n                    }\r\n                }\r\n                return groupIndex\r\n            };\r\n\r\n            function checkUserStateColumn(column, userStateColumn) {\r\n                return column && userStateColumn && userStateColumn.name === column.name && (userStateColumn.dataField === column.dataField || column.name)\r\n            }\r\n            var applyUserState = function(that) {\r\n                var columnsUserState = that._columnsUserState;\r\n                var ignoreColumnOptionNames = that._ignoreColumnOptionNames || [];\r\n                var columns = that._columns;\r\n                var columnCountById = {};\r\n                var resultColumns = [];\r\n                var allColumnsHaveState = true;\r\n                var userStateColumnIndexes = [];\r\n                var column;\r\n                var userStateColumnIndex;\r\n                var i;\r\n\r\n                function applyFieldsState(column, userStateColumn) {\r\n                    if (!userStateColumn) {\r\n                        return\r\n                    }\r\n                    for (var index = 0; index < USER_STATE_FIELD_NAMES.length; index++) {\r\n                        var fieldName = USER_STATE_FIELD_NAMES[index];\r\n                        if ((0, _array.inArray)(fieldName, ignoreColumnOptionNames) >= 0) {\r\n                            continue\r\n                        }\r\n                        if (\"dataType\" === fieldName) {\r\n                            column[fieldName] = column[fieldName] || userStateColumn[fieldName]\r\n                        } else {\r\n                            if ((0, _array.inArray)(fieldName, USER_STATE_FIELD_NAMES_15_1) >= 0) {\r\n                                if (fieldName in userStateColumn) {\r\n                                    column[fieldName] = userStateColumn[fieldName]\r\n                                }\r\n                            } else {\r\n                                if (\"selectedFilterOperation\" === fieldName && userStateColumn[fieldName]) {\r\n                                    column.defaultSelectedFilterOperation = column[fieldName] || null\r\n                                }\r\n                                column[fieldName] = userStateColumn[fieldName]\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function findUserStateColumn(columnsUserState, column) {\r\n                    var id = column.name || column.dataField;\r\n                    var count = columnCountById[id] || 0;\r\n                    for (var j = 0; j < columnsUserState.length; j++) {\r\n                        if (checkUserStateColumn(column, columnsUserState[j])) {\r\n                            if (count) {\r\n                                count--\r\n                            } else {\r\n                                columnCountById[id] = columnCountById[id] || 0;\r\n                                columnCountById[id]++;\r\n                                return j\r\n                            }\r\n                        }\r\n                    }\r\n                    return -1\r\n                }\r\n                if (columnsUserState) {\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        userStateColumnIndex = findUserStateColumn(columnsUserState, columns[i]);\r\n                        allColumnsHaveState = allColumnsHaveState && userStateColumnIndex >= 0;\r\n                        userStateColumnIndexes.push(userStateColumnIndex)\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        column = columns[i];\r\n                        userStateColumnIndex = userStateColumnIndexes[i];\r\n                        if (that._hasUserState || allColumnsHaveState) {\r\n                            applyFieldsState(column, columnsUserState[userStateColumnIndex])\r\n                        }\r\n                        if (userStateColumnIndex >= 0 && (0, _type.isDefined)(columnsUserState[userStateColumnIndex].initialIndex)) {\r\n                            resultColumns[userStateColumnIndex] = column\r\n                        } else {\r\n                            resultColumns.push(column)\r\n                        }\r\n                    }\r\n                    var hasAddedBands = false;\r\n                    for (i = 0; i < columnsUserState.length; i++) {\r\n                        var columnUserState = columnsUserState[i];\r\n                        if (columnUserState.added && findUserStateColumn(columns, columnUserState) < 0) {\r\n                            column = createColumn(that, columnUserState.added);\r\n                            applyFieldsState(column, columnUserState);\r\n                            resultColumns.push(column);\r\n                            if (columnUserState.added.columns) {\r\n                                hasAddedBands = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hasAddedBands) {\r\n                        updateColumnIndexes(that);\r\n                        resultColumns = createColumnsFromOptions(that, resultColumns)\r\n                    }\r\n                    assignColumns(that, resultColumns)\r\n                }\r\n            };\r\n            var updateIndexes = function(that, column) {\r\n                updateColumnIndexes(that);\r\n                updateColumnGroupIndexes(that, column);\r\n                updateColumnSortIndexes(that, column);\r\n                resetBandColumnsCache(that);\r\n                updateColumnVisibleIndexes(that, column)\r\n            };\r\n            var resetColumnsCache = function(that) {\r\n                that.resetColumnsCache()\r\n            };\r\n\r\n            function assignColumns(that, columns) {\r\n                that._columns = columns;\r\n                resetColumnsCache(that);\r\n                that.updateColumnDataTypes()\r\n            }\r\n            var updateColumnChanges = function(that, changeType, optionName, columnIndex) {\r\n                var columnChanges = that._columnChanges || {\r\n                    optionNames: {\r\n                        length: 0\r\n                    },\r\n                    changeTypes: {\r\n                        length: 0\r\n                    },\r\n                    columnIndex: columnIndex\r\n                };\r\n                optionName = optionName || \"all\";\r\n                optionName = optionName.split(\".\")[0];\r\n                var changeTypes = columnChanges.changeTypes;\r\n                if (changeType && !changeTypes[changeType]) {\r\n                    changeTypes[changeType] = true;\r\n                    changeTypes.length++\r\n                }\r\n                var optionNames = columnChanges.optionNames;\r\n                if (optionName && !optionNames[optionName]) {\r\n                    optionNames[optionName] = true;\r\n                    optionNames.length++\r\n                }\r\n                if (void 0 === columnIndex || columnIndex !== columnChanges.columnIndex) {\r\n                    delete columnChanges.columnIndex\r\n                }\r\n                that._columnChanges = columnChanges;\r\n                resetColumnsCache(that)\r\n            };\r\n            var fireColumnsChanged = function(that) {\r\n                var onColumnsChanging = that.option(\"onColumnsChanging\");\r\n                var columnChanges = that._columnChanges;\r\n                var reinitOptionNames = [\"dataField\", \"lookup\", \"dataType\", \"columns\"];\r\n                var needReinit = function(options) {\r\n                    return options && reinitOptionNames.some(function(name) {\r\n                        return options[name]\r\n                    })\r\n                };\r\n                if (that.isInitialized() && !that._updateLockCount && columnChanges) {\r\n                    if (onColumnsChanging) {\r\n                        that._updateLockCount++;\r\n                        onColumnsChanging((0, _extend.extend)({\r\n                            component: that.component\r\n                        }, columnChanges));\r\n                        that._updateLockCount--\r\n                    }\r\n                    that._columnChanges = void 0;\r\n                    if (needReinit(columnChanges.optionNames)) {\r\n                        that.reinit()\r\n                    } else {\r\n                        that.columnsChanged.fire(columnChanges)\r\n                    }\r\n                }\r\n            };\r\n            var updateSortOrderWhenGrouping = function(column, groupIndex, prevGroupIndex) {\r\n                var columnWasGrouped = prevGroupIndex >= 0;\r\n                if (groupIndex >= 0) {\r\n                    if (!columnWasGrouped) {\r\n                        column.lastSortOrder = column.sortOrder\r\n                    }\r\n                } else {\r\n                    column.sortOrder = column.lastSortOrder\r\n                }\r\n            };\r\n            var fireOptionChanged = function(that, options) {\r\n                var value = options.value;\r\n                var optionName = options.optionName;\r\n                var prevValue = options.prevValue;\r\n                var fullOptionName = options.fullOptionName;\r\n                var fullOptionPath = \"\".concat(fullOptionName, \".\").concat(optionName);\r\n                if (!IGNORE_COLUMN_OPTION_NAMES[optionName] && that._skipProcessingColumnsChange !== fullOptionPath) {\r\n                    that._skipProcessingColumnsChange = fullOptionPath;\r\n                    that.component._notifyOptionChanged(fullOptionPath, value, prevValue);\r\n                    that._skipProcessingColumnsChange = false\r\n                }\r\n            };\r\n            var columnOptionCore = function(that, column, optionName, value, notFireEvent) {\r\n                var optionGetter = _data2.default.compileGetter(optionName);\r\n                var columnIndex = column.index;\r\n                var columns;\r\n                var changeType;\r\n                var initialColumn;\r\n                if (3 === arguments.length) {\r\n                    return optionGetter(column, {\r\n                        functionsAsIs: true\r\n                    })\r\n                }\r\n                var prevValue = optionGetter(column, {\r\n                    functionsAsIs: true\r\n                });\r\n                if (prevValue !== value) {\r\n                    if (\"groupIndex\" === optionName || \"calculateGroupValue\" === optionName) {\r\n                        changeType = \"grouping\";\r\n                        updateSortOrderWhenGrouping(column, value, prevValue)\r\n                    } else {\r\n                        if (\"sortIndex\" === optionName || \"sortOrder\" === optionName || \"calculateSortValue\" === optionName) {\r\n                            changeType = \"sorting\"\r\n                        } else {\r\n                            changeType = \"columns\"\r\n                        }\r\n                    }\r\n                    var optionSetter = _data2.default.compileSetter(optionName);\r\n                    optionSetter(column, value, {\r\n                        functionsAsIs: true\r\n                    });\r\n                    var fullOptionName = getColumnFullPath(that, column);\r\n                    if (COLUMN_INDEX_OPTIONS[optionName]) {\r\n                        updateIndexes(that, column);\r\n                        value = optionGetter(column)\r\n                    }\r\n                    fullOptionName && fireOptionChanged(that, {\r\n                        fullOptionName: fullOptionName,\r\n                        optionName: optionName,\r\n                        value: value,\r\n                        prevValue: prevValue\r\n                    });\r\n                    if (!(0, _type.isDefined)(prevValue) && !(0, _type.isDefined)(value) && 0 !== optionName.indexOf(\"buffer\")) {\r\n                        notFireEvent = true\r\n                    }\r\n                    if (!notFireEvent) {\r\n                        if ((0, _array.inArray)(optionName, USER_STATE_FIELD_NAMES) < 0 && \"visibleWidth\" !== optionName) {\r\n                            columns = that.option(\"columns\");\r\n                            initialColumn = that.getColumnByPath(fullOptionName, columns);\r\n                            if ((0, _type.isString)(initialColumn)) {\r\n                                initialColumn = columns[columnIndex] = {\r\n                                    dataField: initialColumn\r\n                                }\r\n                            }\r\n                            if (initialColumn && checkUserStateColumn(initialColumn, column)) {\r\n                                optionSetter(initialColumn, value, {\r\n                                    functionsAsIs: true\r\n                                })\r\n                            }\r\n                        }\r\n                        updateColumnChanges(that, changeType, optionName, columnIndex)\r\n                    } else {\r\n                        resetColumnsCache(that)\r\n                    }\r\n                }\r\n            };\r\n\r\n            function isSortOrderValid(sortOrder) {\r\n                return \"asc\" === sortOrder || \"desc\" === sortOrder\r\n            }\r\n            var addExpandColumn = function(that) {\r\n                var options = that._getExpandColumnOptions();\r\n                that.addCommandColumn(options)\r\n            };\r\n            var defaultSetCellValue = function(data, value) {\r\n                var path = this.dataField.split(\".\");\r\n                var dotCount = path.length - 1;\r\n                if (this.serializeValue) {\r\n                    value = this.serializeValue(value)\r\n                }\r\n                for (var i = 0; i < dotCount; i++) {\r\n                    var name = path[i];\r\n                    data = data[name] = data[name] || {}\r\n                }\r\n                data[path[dotCount]] = value\r\n            };\r\n            var getDataColumns = function getDataColumns(columns, rowIndex, bandColumnID) {\r\n                var result = [];\r\n                rowIndex = rowIndex || 0;\r\n                columns[rowIndex] && _iterator2.default.each(columns[rowIndex], function(_, column) {\r\n                    if (column.ownerBand === bandColumnID || column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (!column.isBand || !column.colspan) {\r\n                            if (!column.command || rowIndex < 1) {\r\n                                result.push(column)\r\n                            }\r\n                        } else {\r\n                            result.push.apply(result, getDataColumns(columns, rowIndex + 1, column.index))\r\n                        }\r\n                    }\r\n                });\r\n                return result\r\n            };\r\n            var _getRowCount = function(that) {\r\n                var rowCount = 1;\r\n                var bandColumnsCache = that.getBandColumnsCache();\r\n                var columnParentByIndex = bandColumnsCache.columnParentByIndex;\r\n                that._columns.forEach(function(column) {\r\n                    var parents = getParentBandColumns(column.index, columnParentByIndex);\r\n                    var invisibleParents = parents.filter(function(column) {\r\n                        return !column.visible\r\n                    });\r\n                    if (column.visible && !invisibleParents.length) {\r\n                        rowCount = Math.max(rowCount, parents.length + 1)\r\n                    }\r\n                });\r\n                return rowCount\r\n            };\r\n            var isCustomCommandColumn = function(that, commandColumn) {\r\n                return !!that._columns.filter(function(column) {\r\n                    return column.type === commandColumn.type\r\n                }).length\r\n            };\r\n            var getFixedPosition = function(that, column) {\r\n                var rtlEnabled = that.option(\"rtlEnabled\");\r\n                if (column.command && !isCustomCommandColumn(that, column) || !column.fixedPosition) {\r\n                    return rtlEnabled ? \"right\" : \"left\"\r\n                }\r\n                return column.fixedPosition\r\n            };\r\n            var processExpandColumns = function(columns, expandColumns, type, columnIndex) {\r\n                var customColumnIndex;\r\n                var rowCount = this.getRowCount();\r\n                var rowspan = columns[columnIndex] && columns[columnIndex].rowspan;\r\n                var expandColumnsByType = expandColumns.filter(function(column) {\r\n                    return column.type === type\r\n                });\r\n                columns.forEach(function(column, index) {\r\n                    if (column.type === type) {\r\n                        customColumnIndex = index;\r\n                        rowspan = columns[index + 1] ? columns[index + 1].rowspan : rowCount\r\n                    }\r\n                });\r\n                if (rowspan > 1) {\r\n                    expandColumnsByType = _iterator2.default.map(expandColumnsByType, function(expandColumn) {\r\n                        return (0, _extend.extend)({}, expandColumn, {\r\n                            rowspan: rowspan\r\n                        })\r\n                    })\r\n                }\r\n                expandColumnsByType.unshift.apply(expandColumnsByType, (0, _type.isDefined)(customColumnIndex) ? [customColumnIndex, 1] : [columnIndex, 0]);\r\n                columns.splice.apply(columns, expandColumnsByType);\r\n                return rowspan || 1\r\n            };\r\n            var digitsCount = function(number) {\r\n                var i;\r\n                for (i = 0; number > 1; i++) {\r\n                    number /= 10\r\n                }\r\n                return i\r\n            };\r\n            var numberToString = function(number, digitsCount) {\r\n                var str = number ? number.toString() : \"0\";\r\n                while (str.length < digitsCount) {\r\n                    str = \"0\" + str\r\n                }\r\n                return str\r\n            };\r\n            var mergeColumns = function(that, columns, commandColumns, needToExtend) {\r\n                var column;\r\n                var commandColumnIndex;\r\n                var result = columns.slice().map(function(column) {\r\n                    return (0, _extend.extend)({}, column)\r\n                });\r\n                var isColumnFixing = that._isColumnFixing();\r\n                var defaultCommandColumns = commandColumns.slice().map(function(column) {\r\n                    return (0, _extend.extend)({\r\n                        fixed: isColumnFixing\r\n                    }, column)\r\n                });\r\n                var getCommandColumnIndex = function(column) {\r\n                    return commandColumns.reduce(function(result, commandColumn, index) {\r\n                        var columnType = needToExtend && column.type === GROUP_COMMAND_COLUMN_NAME ? \"expand\" : column.type;\r\n                        return commandColumn.type === columnType || commandColumn.command === column.command ? index : result\r\n                    }, -1)\r\n                };\r\n                var callbackFilter = function(commandColumn) {\r\n                    return commandColumn.command !== commandColumns[commandColumnIndex].command\r\n                };\r\n                for (var i = 0; i < columns.length; i++) {\r\n                    column = columns[i];\r\n                    commandColumnIndex = column && (column.type || column.command) ? getCommandColumnIndex(column) : -1;\r\n                    if (commandColumnIndex >= 0) {\r\n                        if (needToExtend) {\r\n                            result[i] = (0, _extend.extend)({\r\n                                fixed: isColumnFixing\r\n                            }, commandColumns[commandColumnIndex], column);\r\n                            if (column.type !== GROUP_COMMAND_COLUMN_NAME) {\r\n                                defaultCommandColumns = defaultCommandColumns.filter(callbackFilter)\r\n                            }\r\n                        } else {\r\n                            var columnOptions = {\r\n                                visibleIndex: column.visibleIndex,\r\n                                index: column.index,\r\n                                headerId: column.headerId,\r\n                                allowFixing: 0 === column.groupIndex,\r\n                                allowReordering: 0 === column.groupIndex,\r\n                                groupIndex: column.groupIndex\r\n                            };\r\n                            result[i] = (0, _extend.extend)({}, column, commandColumns[commandColumnIndex], column.type === GROUP_COMMAND_COLUMN_NAME && columnOptions)\r\n                        }\r\n                    }\r\n                }\r\n                if (columns.length && needToExtend && defaultCommandColumns.length) {\r\n                    result = result.concat(defaultCommandColumns)\r\n                }\r\n                return result\r\n            };\r\n            var isColumnFixed = function(that, column) {\r\n                return (0, _type.isDefined)(column.fixed) || !column.type ? column.fixed : that._isColumnFixing()\r\n            };\r\n            var convertOwnerBandToColumnReference = function(columns) {\r\n                columns.forEach(function(column) {\r\n                    if ((0, _type.isDefined)(column.ownerBand)) {\r\n                        column.ownerBand = columns[column.ownerBand]\r\n                    }\r\n                })\r\n            };\r\n            var resetBandColumnsCache = function(that) {\r\n                that._bandColumnsCache = void 0\r\n            };\r\n            var findColumn = function(columns, identifier) {\r\n                var identifierOptionName = (0, _type.isString)(identifier) && identifier.substr(0, identifier.indexOf(\":\"));\r\n                var column;\r\n                if (void 0 === identifier) {\r\n                    return\r\n                }\r\n                if (identifierOptionName) {\r\n                    identifier = identifier.substr(identifierOptionName.length + 1)\r\n                }\r\n                if (identifierOptionName) {\r\n                    column = columns.filter(function(column) {\r\n                        return \"\" + column[identifierOptionName] === identifier\r\n                    })[0]\r\n                } else {\r\n                    [\"index\", \"name\", \"dataField\", \"caption\"].some(function(optionName) {\r\n                        column = columns.filter(function(column) {\r\n                            return column[optionName] === identifier\r\n                        })[0];\r\n                        return !!column\r\n                    })\r\n                }\r\n                return column\r\n            };\r\n            return {\r\n                _getExpandColumnOptions: function() {\r\n                    return {\r\n                        type: \"expand\",\r\n                        command: \"expand\",\r\n                        width: \"auto\",\r\n                        cssClass: COMMAND_EXPAND_CLASS,\r\n                        allowEditing: false,\r\n                        allowGrouping: false,\r\n                        allowSorting: false,\r\n                        allowResizing: false,\r\n                        allowReordering: false,\r\n                        allowHiding: false\r\n                    }\r\n                },\r\n                _getFirstItems: function(dataSource) {\r\n                    var groupsCount;\r\n                    var items = [];\r\n                    var getFirstItemsCore = function getFirstItemsCore(items, groupsCount) {\r\n                        if (!items || !groupsCount) {\r\n                            return items\r\n                        }\r\n                        for (var i = 0; i < items.length; i++) {\r\n                            var childItems = getFirstItemsCore(items[i].items || items[i].collapsedItems, groupsCount - 1);\r\n                            if (childItems && childItems.length) {\r\n                                return childItems\r\n                            }\r\n                        }\r\n                    };\r\n                    if (dataSource && dataSource.items().length > 0) {\r\n                        groupsCount = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group()).length;\r\n                        items = getFirstItemsCore(dataSource.items(), groupsCount) || []\r\n                    }\r\n                    return items\r\n                },\r\n                _endUpdateCore: function() {\r\n                    !this._skipProcessingColumnsChange && fireColumnsChanged(this)\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    var columns = that.option(\"columns\");\r\n                    that._commandColumns = that._commandColumns || [];\r\n                    that._columns = that._columns || [];\r\n                    that._isColumnsFromOptions = !!columns;\r\n                    if (that._isColumnsFromOptions) {\r\n                        assignColumns(that, columns ? createColumnsFromOptions(that, columns) : []);\r\n                        applyUserState(that)\r\n                    } else {\r\n                        assignColumns(that, that._columnsUserState ? createColumnsFromOptions(that, that._columnsUserState) : that._columns)\r\n                    }\r\n                    addExpandColumn(that);\r\n                    if (that._dataSourceApplied) {\r\n                        that.applyDataSource(that._dataSource, true)\r\n                    } else {\r\n                        updateIndexes(that)\r\n                    }\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"columnsChanged\"]\r\n                },\r\n                getColumnByPath: function(path, columns) {\r\n                    var that = this;\r\n                    var column;\r\n                    var columnIndexes = [];\r\n                    path.replace(regExp, function(_, columnIndex) {\r\n                        columnIndexes.push(parseInt(columnIndex));\r\n                        return \"\"\r\n                    });\r\n                    if (columnIndexes.length) {\r\n                        if (columns) {\r\n                            column = columnIndexes.reduce(function(column, index) {\r\n                                return column && column.columns && column.columns[index]\r\n                            }, {\r\n                                columns: columns\r\n                            })\r\n                        } else {\r\n                            column = getColumnByIndexes(that, columnIndexes)\r\n                        }\r\n                    }\r\n                    return column\r\n                },\r\n                optionChanged: function(args) {\r\n                    var needUpdateRequireResize;\r\n                    switch (args.name) {\r\n                        case \"adaptColumnWidthByRatio\":\r\n                            args.handled = true;\r\n                            break;\r\n                        case \"dataSource\":\r\n                            if (args.value !== args.previousValue && !this.option(\"columns\") && (!Array.isArray(args.value) || !Array.isArray(args.previousValue))) {\r\n                                this._columns = []\r\n                            }\r\n                            break;\r\n                        case \"columns\":\r\n                            needUpdateRequireResize = this._skipProcessingColumnsChange;\r\n                            args.handled = true;\r\n                            if (!this._skipProcessingColumnsChange) {\r\n                                if (args.name === args.fullName) {\r\n                                    this._columnsUserState = null;\r\n                                    this._ignoreColumnOptionNames = null;\r\n                                    this.init()\r\n                                } else {\r\n                                    this._columnOptionChanged(args);\r\n                                    needUpdateRequireResize = true\r\n                                }\r\n                            }\r\n                            if (needUpdateRequireResize) {\r\n                                this._updateRequireResize(args)\r\n                            }\r\n                            break;\r\n                        case \"commonColumnSettings\":\r\n                        case \"columnAutoWidth\":\r\n                        case \"allowColumnResizing\":\r\n                        case \"allowColumnReordering\":\r\n                        case \"columnFixing\":\r\n                        case \"grouping\":\r\n                        case \"groupPanel\":\r\n                        case \"regenerateColumnsByVisibleItems\":\r\n                        case \"customizeColumns\":\r\n                        case \"editing\":\r\n                        case \"columnHidingEnabled\":\r\n                        case \"dateSerializationFormat\":\r\n                        case \"columnResizingMode\":\r\n                        case \"columnMinWidth\":\r\n                        case \"columnWidth\":\r\n                            args.handled = true;\r\n                            var ignoreColumnOptionNames = \"columnWidth\" === args.fullName && [\"width\"];\r\n                            var isEditingPopup = args.fullName && 0 === args.fullName.indexOf(\"editing.popup\");\r\n                            var isEditingForm = args.fullName && 0 === args.fullName.indexOf(\"editing.form\");\r\n                            if (!isEditingPopup && !isEditingForm) {\r\n                                this.reinit(ignoreColumnOptionNames)\r\n                            }\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            this.reinit();\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(args) {\r\n                    var columnOptionValue = {};\r\n                    var column = this.getColumnByPath(args.fullName);\r\n                    var columnOptionName = args.fullName.replace(regExp, \"\");\r\n                    if (column) {\r\n                        if (columnOptionName) {\r\n                            columnOptionValue[columnOptionName] = args.value\r\n                        } else {\r\n                            columnOptionValue = args.value\r\n                        }\r\n                        this._skipProcessingColumnsChange = args.fullName;\r\n                        this.columnOption(column.index, columnOptionValue);\r\n                        this._skipProcessingColumnsChange = false\r\n                    }\r\n                },\r\n                _updateRequireResize: function(args) {\r\n                    var component = this.component;\r\n                    if (\"width\" === args.fullName.replace(regExp, \"\") && component._updateLockCount) {\r\n                        component._requireResize = true\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"addColumn\", \"deleteColumn\", \"columnOption\", \"columnCount\", \"clearSorting\", \"clearGrouping\", \"getVisibleColumns\", \"getVisibleColumnIndex\"]\r\n                },\r\n                applyDataSource: function(dataSource, forceApplying) {\r\n                    var that = this;\r\n                    var isDataSourceLoaded = dataSource && dataSource.isLoaded();\r\n                    that._dataSource = dataSource;\r\n                    if (!that._dataSourceApplied || 0 === that._dataSourceColumnsCount || forceApplying || that.option(\"regenerateColumnsByVisibleItems\")) {\r\n                        if (isDataSourceLoaded) {\r\n                            if (!that._isColumnsFromOptions) {\r\n                                var columnsFromDataSource = createColumnsFromDataSource(that, dataSource);\r\n                                if (columnsFromDataSource.length) {\r\n                                    assignColumns(that, columnsFromDataSource);\r\n                                    that._dataSourceColumnsCount = that._columns.length;\r\n                                    applyUserState(that)\r\n                                }\r\n                            }\r\n                            return that.updateColumns(dataSource, forceApplying)\r\n                        } else {\r\n                            that._dataSourceApplied = false\r\n                        }\r\n                    } else {\r\n                        if (isDataSourceLoaded && !that.isAllDataTypesDefined(true) && that.updateColumnDataTypes(dataSource)) {\r\n                            updateColumnChanges(that, \"columns\");\r\n                            fireColumnsChanged(that);\r\n                            return (new _deferred.Deferred).reject().promise()\r\n                        }\r\n                    }\r\n                },\r\n                reset: function() {\r\n                    this._dataSourceApplied = false;\r\n                    this._dataSourceColumnsCount = void 0;\r\n                    this.reinit()\r\n                },\r\n                resetColumnsCache: function() {\r\n                    var that = this;\r\n                    that._visibleColumns = void 0;\r\n                    that._fixedColumns = void 0;\r\n                    that._rowCount = void 0;\r\n                    resetBandColumnsCache(that)\r\n                },\r\n                reinit: function(ignoreColumnOptionNames) {\r\n                    this._columnsUserState = this.getUserState();\r\n                    this._ignoreColumnOptionNames = ignoreColumnOptionNames || null;\r\n                    this.init();\r\n                    if (ignoreColumnOptionNames) {\r\n                        this._ignoreColumnOptionNames = null\r\n                    }\r\n                },\r\n                isInitialized: function() {\r\n                    return !!this._columns.length || !!this.option(\"columns\")\r\n                },\r\n                isDataSourceApplied: function() {\r\n                    return this._dataSourceApplied\r\n                },\r\n                getCommonSettings: function(column) {\r\n                    var commonColumnSettings = (!column || !column.type) && this.option(\"commonColumnSettings\") || {};\r\n                    var groupingOptions = this.option(\"grouping\") || {};\r\n                    var groupPanelOptions = this.option(\"groupPanel\") || {};\r\n                    return (0, _extend.extend)({\r\n                        allowFixing: this.option(\"columnFixing.enabled\"),\r\n                        allowResizing: this.option(\"allowColumnResizing\") || void 0,\r\n                        allowReordering: this.option(\"allowColumnReordering\"),\r\n                        minWidth: this.option(\"columnMinWidth\"),\r\n                        width: this.option(\"columnWidth\"),\r\n                        autoExpandGroup: groupingOptions.autoExpandAll,\r\n                        allowCollapsing: groupingOptions.allowCollapsing,\r\n                        allowGrouping: groupPanelOptions.allowColumnDragging && groupPanelOptions.visible || groupingOptions.contextMenuEnabled\r\n                    }, commonColumnSettings)\r\n                },\r\n                isColumnOptionUsed: function(optionName) {\r\n                    for (var i = 0; i < this._columns.length; i++) {\r\n                        if (this._columns[i][optionName]) {\r\n                            return true\r\n                        }\r\n                    }\r\n                },\r\n                isAllDataTypesDefined: function(checkSerializers) {\r\n                    var columns = this._columns;\r\n                    if (!columns.length) {\r\n                        return false\r\n                    }\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        if (!columns[i].dataField && columns[i].calculateCellValue === columns[i].defaultCalculateCellValue) {\r\n                            continue\r\n                        }\r\n                        if (!columns[i].dataType || checkSerializers && columns[i].deserializeValue && void 0 === columns[i].serializationFormat) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                getColumns: function() {\r\n                    return this._columns\r\n                },\r\n                isBandColumnsUsed: function() {\r\n                    return this.getColumns().some(function(column) {\r\n                        return column.isBand\r\n                    })\r\n                },\r\n                getGroupColumns: function() {\r\n                    var result = [];\r\n                    _iterator2.default.each(this._columns, function() {\r\n                        var column = this;\r\n                        if ((0, _type.isDefined)(column.groupIndex)) {\r\n                            result[column.groupIndex] = column\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                getVisibleColumns: function(rowIndex) {\r\n                    this._visibleColumns = this._visibleColumns || this._getVisibleColumnsCore();\r\n                    rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._visibleColumns.length - 1;\r\n                    return this._visibleColumns[rowIndex] || []\r\n                },\r\n                getFixedColumns: function(rowIndex) {\r\n                    this._fixedColumns = this._fixedColumns || this._getFixedColumnsCore();\r\n                    rowIndex = (0, _type.isDefined)(rowIndex) ? rowIndex : this._fixedColumns.length - 1;\r\n                    return this._fixedColumns[rowIndex] || []\r\n                },\r\n                getFilteringColumns: function() {\r\n                    return this.getColumns().filter(function(item) {\r\n                        return (item.dataField || item.name) && (item.allowFiltering || item.allowHeaderFiltering)\r\n                    }).map(function(item) {\r\n                        var field = (0, _extend.extend)(true, {}, item);\r\n                        if (!(0, _type.isDefined)(field.dataField)) {\r\n                            field.dataField = field.name\r\n                        }\r\n                        field.filterOperations = item.filterOperations !== item.defaultFilterOperations ? field.filterOperations : null;\r\n                        return field\r\n                    })\r\n                },\r\n                _getFixedColumnsCore: function() {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var rowCount = that.getRowCount();\r\n                    var isColumnFixing = that._isColumnFixing();\r\n                    var transparentColumn = {\r\n                        command: \"transparent\"\r\n                    };\r\n                    var transparentColspan = 0;\r\n                    var notFixedColumnCount;\r\n                    var transparentColumnIndex;\r\n                    var lastFixedPosition;\r\n                    if (isColumnFixing) {\r\n                        for (var i = 0; i <= rowCount; i++) {\r\n                            notFixedColumnCount = 0;\r\n                            lastFixedPosition = null;\r\n                            transparentColumnIndex = null;\r\n                            var visibleColumns = that.getVisibleColumns(i, true);\r\n                            for (var j = 0; j < visibleColumns.length; j++) {\r\n                                var prevColumn = visibleColumns[j - 1];\r\n                                var column = visibleColumns[j];\r\n                                if (!column.fixed) {\r\n                                    if (0 === i) {\r\n                                        if (column.isBand && column.colspan) {\r\n                                            transparentColspan += column.colspan\r\n                                        } else {\r\n                                            transparentColspan++\r\n                                        }\r\n                                    }\r\n                                    notFixedColumnCount++;\r\n                                    if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                        transparentColumnIndex = j\r\n                                    }\r\n                                } else {\r\n                                    if (prevColumn && prevColumn.fixed && getFixedPosition(that, prevColumn) !== getFixedPosition(that, column)) {\r\n                                        if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                            transparentColumnIndex = j\r\n                                        }\r\n                                    } else {\r\n                                        lastFixedPosition = column.fixedPosition\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (0 === i && (0 === notFixedColumnCount || notFixedColumnCount >= visibleColumns.length)) {\r\n                                return []\r\n                            }\r\n                            if (!(0, _type.isDefined)(transparentColumnIndex)) {\r\n                                transparentColumnIndex = \"right\" === lastFixedPosition ? 0 : visibleColumns.length\r\n                            }\r\n                            result[i] = visibleColumns.slice(0);\r\n                            if (!transparentColumn.colspan) {\r\n                                transparentColumn.colspan = transparentColspan\r\n                            }\r\n                            result[i].splice(transparentColumnIndex, notFixedColumnCount, transparentColumn)\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _isColumnFixing: function() {\r\n                    var isColumnFixing = this.option(\"columnFixing.enabled\");\r\n                    !isColumnFixing && _iterator2.default.each(this._columns, function(_, column) {\r\n                        if (column.fixed) {\r\n                            isColumnFixing = true;\r\n                            return false\r\n                        }\r\n                    });\r\n                    return isColumnFixing\r\n                },\r\n                _getExpandColumnsCore: function() {\r\n                    return this.getGroupColumns()\r\n                },\r\n                getExpandColumns: function() {\r\n                    var expandColumns = this._getExpandColumnsCore();\r\n                    var expandColumn;\r\n                    var firstGroupColumn = expandColumns.filter(function(column) {\r\n                        return 0 === column.groupIndex\r\n                    })[0];\r\n                    var isFixedFirstGroupColumn = firstGroupColumn && firstGroupColumn.fixed;\r\n                    var isColumnFixing = this._isColumnFixing();\r\n                    if (expandColumns.length) {\r\n                        expandColumn = this.columnOption(\"command:expand\")\r\n                    }\r\n                    expandColumns = _iterator2.default.map(expandColumns, function(column) {\r\n                        return (0, _extend.extend)({}, column, {\r\n                            visibleWidth: null,\r\n                            minWidth: null,\r\n                            cellTemplate: !(0, _type.isDefined)(column.groupIndex) ? column.cellTemplate : null,\r\n                            headerCellTemplate: null,\r\n                            fixed: !(0, _type.isDefined)(column.groupIndex) || !isFixedFirstGroupColumn ? isColumnFixing : true\r\n                        }, expandColumn, {\r\n                            index: column.index,\r\n                            type: column.type || GROUP_COMMAND_COLUMN_NAME\r\n                        })\r\n                    });\r\n                    return expandColumns\r\n                },\r\n                getBandColumnsCache: function() {\r\n                    if (!this._bandColumnsCache) {\r\n                        var columns = this._columns;\r\n                        var columnChildrenByIndex = {};\r\n                        var columnParentByIndex = {};\r\n                        var isPlain = true;\r\n                        columns.forEach(function(column) {\r\n                            var parentIndex = column.ownerBand;\r\n                            var parent = columns[parentIndex];\r\n                            if (column.hasColumns) {\r\n                                isPlain = false\r\n                            }\r\n                            if (column.colspan) {\r\n                                column.colspan = void 0\r\n                            }\r\n                            if (column.rowspan) {\r\n                                column.rowspan = void 0\r\n                            }\r\n                            if (parent) {\r\n                                columnParentByIndex[column.index] = parent\r\n                            } else {\r\n                                parentIndex = -1\r\n                            }\r\n                            columnChildrenByIndex[parentIndex] = columnChildrenByIndex[parentIndex] || [];\r\n                            columnChildrenByIndex[parentIndex].push(column)\r\n                        });\r\n                        this._bandColumnsCache = {\r\n                            isPlain: isPlain,\r\n                            columnChildrenByIndex: columnChildrenByIndex,\r\n                            columnParentByIndex: columnParentByIndex\r\n                        }\r\n                    }\r\n                    return this._bandColumnsCache\r\n                },\r\n                _isColumnVisible: function(column) {\r\n                    return column.visible && this.isParentColumnVisible(column.index)\r\n                },\r\n                _getVisibleColumnsCore: function() {\r\n                    var that = this;\r\n                    var i;\r\n                    var result = [];\r\n                    var rowspanGroupColumns = 0;\r\n                    var rowspanExpandColumns = 0;\r\n                    var rowCount = that.getRowCount();\r\n                    var positiveIndexedColumns = [];\r\n                    var negativeIndexedColumns = [];\r\n                    var notGroupedColumnsCount = 0;\r\n                    var isFixedToEnd;\r\n                    var rtlEnabled = that.option(\"rtlEnabled\");\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var expandColumns = mergeColumns(that, that.getExpandColumns(), that._columns);\r\n                    var columns = mergeColumns(that, that._columns, that._commandColumns, true);\r\n                    var columnDigitsCount = digitsCount(columns.length);\r\n                    processBandColumns(that, columns, bandColumnsCache);\r\n                    for (i = 0; i < rowCount; i++) {\r\n                        result[i] = [];\r\n                        negativeIndexedColumns[i] = [{}];\r\n                        positiveIndexedColumns[i] = [{}, {}, {}]\r\n                    }\r\n                    _iterator2.default.each(columns, function() {\r\n                        var column = this;\r\n                        var visibleIndex = column.visibleIndex;\r\n                        var indexedColumns;\r\n                        var parentBandColumns = getParentBandColumns(column.index, bandColumnsCache.columnParentByIndex);\r\n                        var visible = that._isColumnVisible(column);\r\n                        if (visible && (!(0, _type.isDefined)(column.groupIndex) || column.showWhenGrouped)) {\r\n                            var rowIndex = parentBandColumns.length;\r\n                            if (visibleIndex < 0) {\r\n                                visibleIndex = -visibleIndex;\r\n                                indexedColumns = negativeIndexedColumns[rowIndex]\r\n                            } else {\r\n                                column.fixed = parentBandColumns.length ? parentBandColumns[0].fixed : column.fixed;\r\n                                column.fixedPosition = parentBandColumns.length ? parentBandColumns[0].fixedPosition : column.fixedPosition;\r\n                                if (column.fixed) {\r\n                                    isFixedToEnd = \"right\" === column.fixedPosition;\r\n                                    if (rtlEnabled && (!column.command || isCustomCommandColumn(that, column))) {\r\n                                        isFixedToEnd = !isFixedToEnd\r\n                                    }\r\n                                    if (isFixedToEnd) {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][2]\r\n                                    } else {\r\n                                        indexedColumns = positiveIndexedColumns[rowIndex][0]\r\n                                    }\r\n                                } else {\r\n                                    indexedColumns = positiveIndexedColumns[rowIndex][1]\r\n                                }\r\n                            }\r\n                            if (parentBandColumns.length) {\r\n                                visibleIndex = numberToString(visibleIndex, columnDigitsCount);\r\n                                for (i = parentBandColumns.length - 1; i >= 0; i--) {\r\n                                    visibleIndex = numberToString(parentBandColumns[i].visibleIndex, columnDigitsCount) + visibleIndex\r\n                                }\r\n                            }\r\n                            indexedColumns[visibleIndex] = indexedColumns[visibleIndex] || [];\r\n                            indexedColumns[visibleIndex].push(column);\r\n                            notGroupedColumnsCount++\r\n                        }\r\n                    });\r\n                    _iterator2.default.each(result, function(rowIndex) {\r\n                        (0, _object.orderEach)(negativeIndexedColumns[rowIndex], function(_, columns) {\r\n                            result[rowIndex].unshift.apply(result[rowIndex], columns)\r\n                        });\r\n                        var firstPositiveIndexColumn = result[rowIndex].length;\r\n                        _iterator2.default.each(positiveIndexedColumns[rowIndex], function(index, columnsByFixing) {\r\n                            (0, _object.orderEach)(columnsByFixing, function(_, columnsByVisibleIndex) {\r\n                                result[rowIndex].push.apply(result[rowIndex], columnsByVisibleIndex)\r\n                            })\r\n                        });\r\n                        if (rowspanExpandColumns < rowIndex + 1) {\r\n                            rowspanExpandColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, \"detailExpand\", firstPositiveIndexColumn)\r\n                        }\r\n                        if (rowspanGroupColumns < rowIndex + 1) {\r\n                            rowspanGroupColumns += processExpandColumns.call(that, result[rowIndex], expandColumns, GROUP_COMMAND_COLUMN_NAME, firstPositiveIndexColumn)\r\n                        }\r\n                    });\r\n                    result.push(getDataColumns(result));\r\n                    if (!notGroupedColumnsCount && that._columns.length) {\r\n                        result[rowCount].push({\r\n                            command: \"empty\"\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                getInvisibleColumns: function(columns, bandColumnIndex) {\r\n                    var that = this;\r\n                    var result = [];\r\n                    var hiddenColumnsByBand;\r\n                    columns = columns || that._columns;\r\n                    _iterator2.default.each(columns, function(_, column) {\r\n                        if (column.ownerBand !== bandColumnIndex) {\r\n                            return\r\n                        }\r\n                        if (column.isBand) {\r\n                            if (!column.visible) {\r\n                                hiddenColumnsByBand = that.getChildrenByBandColumn(column.index)\r\n                            } else {\r\n                                hiddenColumnsByBand = that.getInvisibleColumns(that.getChildrenByBandColumn(column.index), column.index)\r\n                            }\r\n                            if (hiddenColumnsByBand.length) {\r\n                                result.push(column);\r\n                                result = result.concat(hiddenColumnsByBand)\r\n                            }\r\n                            return\r\n                        }\r\n                        if (!column.visible) {\r\n                            result.push(column)\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                getChooserColumns: function(getAllColumns) {\r\n                    var columns = getAllColumns ? this.getColumns() : this.getInvisibleColumns();\r\n                    return (0, _common.grep)(columns, function(column) {\r\n                        return column.showInColumnChooser\r\n                    })\r\n                },\r\n                allowMoveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var that = this;\r\n                    var columnIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\r\n                    var sourceColumn = that._columns[columnIndex];\r\n                    if (sourceColumn && (sourceColumn.allowReordering || sourceColumn.allowGrouping || sourceColumn.allowHiding)) {\r\n                        if (sourceLocation === targetLocation) {\r\n                            if (sourceLocation === COLUMN_CHOOSER_LOCATION) {\r\n                                return false\r\n                            }\r\n                            fromVisibleIndex = (0, _type.isObject)(fromVisibleIndex) ? fromVisibleIndex.columnIndex : fromVisibleIndex;\r\n                            toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                            return fromVisibleIndex !== toVisibleIndex && fromVisibleIndex + 1 !== toVisibleIndex\r\n                        } else {\r\n                            if (sourceLocation === GROUP_LOCATION && targetLocation !== COLUMN_CHOOSER_LOCATION || targetLocation === GROUP_LOCATION) {\r\n                                return sourceColumn && sourceColumn.allowGrouping\r\n                            } else {\r\n                                if (sourceLocation === COLUMN_CHOOSER_LOCATION || targetLocation === COLUMN_CHOOSER_LOCATION) {\r\n                                    return sourceColumn && sourceColumn.allowHiding\r\n                                }\r\n                            }\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                moveColumn: function(fromVisibleIndex, toVisibleIndex, sourceLocation, targetLocation) {\r\n                    var that = this;\r\n                    var options = {};\r\n                    var prevGroupIndex;\r\n                    var fromIndex = getColumnIndexByVisibleIndex(that, fromVisibleIndex, sourceLocation);\r\n                    var toIndex = getColumnIndexByVisibleIndex(that, toVisibleIndex, targetLocation);\r\n                    var targetGroupIndex;\r\n                    if (fromIndex >= 0) {\r\n                        var column = that._columns[fromIndex];\r\n                        toVisibleIndex = (0, _type.isObject)(toVisibleIndex) ? toVisibleIndex.columnIndex : toVisibleIndex;\r\n                        targetGroupIndex = toIndex >= 0 ? that._columns[toIndex].groupIndex : -1;\r\n                        if ((0, _type.isDefined)(column.groupIndex) && sourceLocation === GROUP_LOCATION) {\r\n                            if (targetGroupIndex > column.groupIndex) {\r\n                                targetGroupIndex--\r\n                            }\r\n                            if (targetLocation !== GROUP_LOCATION) {\r\n                                options.groupIndex = void 0\r\n                            } else {\r\n                                prevGroupIndex = column.groupIndex;\r\n                                delete column.groupIndex;\r\n                                updateColumnGroupIndexes(that)\r\n                            }\r\n                        }\r\n                        if (targetLocation === GROUP_LOCATION) {\r\n                            options.groupIndex = moveColumnToGroup(that, column, targetGroupIndex);\r\n                            column.groupIndex = prevGroupIndex\r\n                        } else {\r\n                            if (toVisibleIndex >= 0) {\r\n                                var targetColumn = that._columns[toIndex];\r\n                                if (!targetColumn || column.ownerBand !== targetColumn.ownerBand) {\r\n                                    options.visibleIndex = MAX_SAFE_INTEGER\r\n                                } else {\r\n                                    if (isColumnFixed(that, column) ^ isColumnFixed(that, targetColumn)) {\r\n                                        options.visibleIndex = MAX_SAFE_INTEGER\r\n                                    } else {\r\n                                        options.visibleIndex = targetColumn.visibleIndex\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        var isVisible = targetLocation !== COLUMN_CHOOSER_LOCATION;\r\n                        if (column.visible !== isVisible) {\r\n                            options.visible = isVisible\r\n                        }\r\n                        that.columnOption(column.index, options)\r\n                    }\r\n                },\r\n                changeSortOrder: function(columnIndex, sortOrder) {\r\n                    var that = this;\r\n                    var options = {};\r\n                    var sortingOptions = that.option(\"sorting\");\r\n                    var sortingMode = sortingOptions && sortingOptions.mode;\r\n                    var needResetSorting = \"single\" === sortingMode || !sortOrder;\r\n                    var allowSorting = \"single\" === sortingMode || \"multiple\" === sortingMode;\r\n                    var column = that._columns[columnIndex];\r\n                    var nextSortOrder = function(column) {\r\n                        if (\"ctrl\" === sortOrder) {\r\n                            if (!(\"sortOrder\" in column && \"sortIndex\" in column)) {\r\n                                return false\r\n                            }\r\n                            options.sortOrder = void 0;\r\n                            options.sortIndex = void 0\r\n                        } else {\r\n                            if ((0, _type.isDefined)(column.groupIndex) || (0, _type.isDefined)(column.sortIndex)) {\r\n                                options.sortOrder = \"desc\" === column.sortOrder ? \"asc\" : \"desc\"\r\n                            } else {\r\n                                options.sortOrder = \"asc\"\r\n                            }\r\n                        }\r\n                        return true\r\n                    };\r\n                    if (allowSorting && column && column.allowSorting) {\r\n                        if (needResetSorting && !(0, _type.isDefined)(column.groupIndex)) {\r\n                            _iterator2.default.each(that._columns, function(index) {\r\n                                if (index !== columnIndex && this.sortOrder && !(0, _type.isDefined)(this.groupIndex)) {\r\n                                    delete this.sortOrder;\r\n                                    delete this.sortIndex\r\n                                }\r\n                            })\r\n                        }\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            if (column.sortOrder !== sortOrder) {\r\n                                options.sortOrder = sortOrder\r\n                            }\r\n                        } else {\r\n                            if (\"none\" === sortOrder) {\r\n                                if (column.sortOrder) {\r\n                                    options.sortIndex = void 0;\r\n                                    options.sortOrder = void 0\r\n                                }\r\n                            } else {\r\n                                nextSortOrder(column)\r\n                            }\r\n                        }\r\n                    }\r\n                    that.columnOption(column.index, options)\r\n                },\r\n                getSortDataSourceParameters: function(useLocalSelector) {\r\n                    var that = this;\r\n                    var sortColumns = [];\r\n                    var sort = [];\r\n                    _iterator2.default.each(that._columns, function() {\r\n                        if ((this.dataField || this.selector || this.calculateCellValue) && (0, _type.isDefined)(this.sortIndex) && !(0, _type.isDefined)(this.groupIndex)) {\r\n                            sortColumns[this.sortIndex] = this\r\n                        }\r\n                    });\r\n                    _iterator2.default.each(sortColumns, function() {\r\n                        var sortOrder = this && this.sortOrder;\r\n                        if (isSortOrderValid(sortOrder)) {\r\n                            var sortItem = {\r\n                                selector: this.calculateSortValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue,\r\n                                desc: \"desc\" === this.sortOrder\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                sortItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            sort.push(sortItem)\r\n                        }\r\n                    });\r\n                    return sort.length > 0 ? sort : null\r\n                },\r\n                getGroupDataSourceParameters: function(useLocalSelector) {\r\n                    var group = [];\r\n                    _iterator2.default.each(this.getGroupColumns(), function() {\r\n                        var selector = this.calculateGroupValue || this.displayField || this.calculateDisplayValue || useLocalSelector && this.selector || this.dataField || this.calculateCellValue;\r\n                        if (selector) {\r\n                            var groupItem = {\r\n                                selector: selector,\r\n                                desc: \"desc\" === this.sortOrder,\r\n                                isExpanded: !!this.autoExpandGroup\r\n                            };\r\n                            if (this.sortingMethod) {\r\n                                groupItem.compare = this.sortingMethod.bind(this)\r\n                            }\r\n                            group.push(groupItem)\r\n                        }\r\n                    });\r\n                    return group.length > 0 ? group : null\r\n                },\r\n                refresh: function(updateNewLookupsOnly) {\r\n                    var deferreds = [];\r\n                    _iterator2.default.each(this._columns, function() {\r\n                        var lookup = this.lookup;\r\n                        if (lookup && !this.calculateDisplayValue) {\r\n                            if (updateNewLookupsOnly && lookup.valueMap) {\r\n                                return\r\n                            }\r\n                            if (lookup.update) {\r\n                                deferreds.push(lookup.update())\r\n                            }\r\n                        }\r\n                    });\r\n                    return _deferred.when.apply(_renderer2.default, deferreds).done(resetColumnsCache.bind(null, this))\r\n                },\r\n                _updateColumnOptions: function(column, columnIndex) {\r\n                    column.selector = column.selector || function(data) {\r\n                        return column.calculateCellValue(data)\r\n                    };\r\n                    _iterator2.default.each([\"calculateSortValue\", \"calculateGroupValue\", \"calculateDisplayValue\"], function(_, calculateCallbackName) {\r\n                        var calculateCallback = column[calculateCallbackName];\r\n                        if ((0, _type.isFunction)(calculateCallback) && !calculateCallback.originalCallback) {\r\n                            column[calculateCallbackName] = function(data) {\r\n                                return calculateCallback.call(column, data)\r\n                            };\r\n                            column[calculateCallbackName].originalCallback = calculateCallback;\r\n                            column[calculateCallbackName].columnIndex = columnIndex\r\n                        }\r\n                    });\r\n                    if ((0, _type.isString)(column.calculateDisplayValue)) {\r\n                        column.displayField = column.calculateDisplayValue;\r\n                        column.calculateDisplayValue = _data2.default.compileGetter(column.displayField)\r\n                    }\r\n                    if (column.calculateDisplayValue) {\r\n                        column.displayValueMap = column.displayValueMap || {}\r\n                    }\r\n                    updateSerializers(column, column.dataType);\r\n                    var lookup = column.lookup;\r\n                    if (lookup) {\r\n                        updateSerializers(lookup, lookup.dataType)\r\n                    }\r\n                    var dataType = lookup ? lookup.dataType : column.dataType;\r\n                    if (dataType) {\r\n                        column.alignment = column.alignment || getAlignmentByDataType(dataType, this.option(\"rtlEnabled\"));\r\n                        column.format = column.format || (0, _uiGrid_core3.getFormatByDataType)(dataType);\r\n                        column.customizeText = column.customizeText || getCustomizeTextByDataType(dataType);\r\n                        column.defaultFilterOperations = column.defaultFilterOperations || !lookup && DATATYPE_OPERATIONS[dataType] || [];\r\n                        if (!(0, _type.isDefined)(column.filterOperations)) {\r\n                            setFilterOperationsAsDefaultValues(column)\r\n                        }\r\n                        column.defaultFilterOperation = column.filterOperations && column.filterOperations[0] || \"=\";\r\n                        column.showEditorAlways = (0, _type.isDefined)(column.showEditorAlways) ? column.showEditorAlways : \"boolean\" === dataType && !column.cellTemplate\r\n                    }\r\n                },\r\n                updateColumnDataTypes: function(dataSource) {\r\n                    var that = this;\r\n                    var dateSerializationFormat = that.option(\"dateSerializationFormat\");\r\n                    var firstItems = that._getFirstItems(dataSource);\r\n                    var isColumnDataTypesUpdated = false;\r\n                    _iterator2.default.each(that._columns, function(index, column) {\r\n                        var i;\r\n                        var value;\r\n                        var dataType;\r\n                        var lookupDataType;\r\n                        var valueDataType;\r\n                        var lookup = column.lookup;\r\n                        if ((0, _uiGrid_core3.isDateType)(column.dataType) && void 0 === column.serializationFormat) {\r\n                            column.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (lookup && (0, _uiGrid_core3.isDateType)(lookup.dataType) && void 0 === column.serializationFormat) {\r\n                            lookup.serializationFormat = dateSerializationFormat\r\n                        }\r\n                        if (column.calculateCellValue && firstItems.length) {\r\n                            if (!column.dataType || lookup && !lookup.dataType) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i]);\r\n                                    if (!column.dataType) {\r\n                                        valueDataType = getValueDataType(value);\r\n                                        dataType = dataType || valueDataType;\r\n                                        if (dataType && valueDataType && dataType !== valueDataType) {\r\n                                            dataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                    if (lookup && !lookup.dataType) {\r\n                                        valueDataType = getValueDataType((0, _uiGrid_core3.getDisplayValue)(column, value, firstItems[i]));\r\n                                        lookupDataType = lookupDataType || valueDataType;\r\n                                        if (lookupDataType && valueDataType && lookupDataType !== valueDataType) {\r\n                                            lookupDataType = \"string\"\r\n                                        }\r\n                                    }\r\n                                }\r\n                                if (dataType || lookupDataType) {\r\n                                    if (dataType) {\r\n                                        column.dataType = dataType\r\n                                    }\r\n                                    if (lookup && lookupDataType) {\r\n                                        lookup.dataType = lookupDataType\r\n                                    }\r\n                                    isColumnDataTypesUpdated = true\r\n                                }\r\n                            }\r\n                            if (void 0 === column.serializationFormat || lookup && void 0 === lookup.serializationFormat) {\r\n                                for (i = 0; i < firstItems.length; i++) {\r\n                                    value = column.calculateCellValue(firstItems[i], true);\r\n                                    if (void 0 === column.serializationFormat) {\r\n                                        column.serializationFormat = getSerializationFormat(column.dataType, value)\r\n                                    }\r\n                                    if (lookup && void 0 === lookup.serializationFormat) {\r\n                                        lookup.serializationFormat = getSerializationFormat(lookup.dataType, lookup.calculateCellValue(value, true))\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        that._updateColumnOptions(column, index)\r\n                    });\r\n                    return isColumnDataTypesUpdated\r\n                },\r\n                _customizeColumns: function(columns) {\r\n                    var that = this;\r\n                    var customizeColumns = that.option(\"customizeColumns\");\r\n                    if (customizeColumns) {\r\n                        var hasOwnerBand = columns.some(function(column) {\r\n                            return (0, _type.isObject)(column.ownerBand)\r\n                        });\r\n                        if (hasOwnerBand) {\r\n                            updateIndexes(that)\r\n                        }\r\n                        customizeColumns(columns);\r\n                        assignColumns(that, createColumnsFromOptions(that, columns))\r\n                    }\r\n                },\r\n                updateColumns: function(dataSource, forceApplying) {\r\n                    var _this = this;\r\n                    if (!forceApplying) {\r\n                        this.updateSortingGrouping(dataSource)\r\n                    }\r\n                    if (!dataSource || dataSource.isLoaded()) {\r\n                        var sortParameters = dataSource ? dataSource.sort() || [] : this.getSortDataSourceParameters();\r\n                        var groupParameters = dataSource ? dataSource.group() || [] : this.getGroupDataSourceParameters();\r\n                        var filterParameters = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().filter;\r\n                        this._customizeColumns(this._columns);\r\n                        updateIndexes(this);\r\n                        var columns = this._columns;\r\n                        return (0, _deferred.when)(this.refresh(true)).always(function() {\r\n                            if (_this._columns !== columns) {\r\n                                return\r\n                            }\r\n                            _this._updateChanges(dataSource, {\r\n                                sorting: sortParameters,\r\n                                grouping: groupParameters,\r\n                                filtering: filterParameters\r\n                            });\r\n                            fireColumnsChanged(_this)\r\n                        })\r\n                    }\r\n                },\r\n                _updateChanges: function(dataSource, parameters) {\r\n                    if (dataSource) {\r\n                        this.updateColumnDataTypes(dataSource);\r\n                        this._dataSourceApplied = true\r\n                    }\r\n                    if (!(0, _uiGrid_core3.equalSortParameters)(parameters.sorting, this.getSortDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"sorting\")\r\n                    }\r\n                    if (!(0, _uiGrid_core3.equalSortParameters)(parameters.grouping, this.getGroupDataSourceParameters())) {\r\n                        updateColumnChanges(this, \"grouping\")\r\n                    }\r\n                    var dataController = this.getController(\"data\");\r\n                    if (dataController && !(0, _uiGrid_core3.equalFilterParameters)(parameters.filtering, dataController.getCombinedFilter())) {\r\n                        updateColumnChanges(this, \"filtering\")\r\n                    }\r\n                    updateColumnChanges(this, \"columns\")\r\n                },\r\n                updateSortingGrouping: function(dataSource, fromDataSource) {\r\n                    var that = this;\r\n                    var sortParameters;\r\n                    var isColumnsChanged;\r\n                    var updateSortGroupParameterIndexes = function(columns, sortParameters, indexParameterName) {\r\n                        _iterator2.default.each(columns, function(index, column) {\r\n                            delete column[indexParameterName];\r\n                            if (sortParameters) {\r\n                                for (var i = 0; i < sortParameters.length; i++) {\r\n                                    var selector = sortParameters[i].selector;\r\n                                    var isExpanded = sortParameters[i].isExpanded;\r\n                                    if (selector === column.dataField || selector === column.name || selector === column.selector || selector === column.calculateCellValue || selector === column.calculateGroupValue) {\r\n                                        column.sortOrder = column.sortOrder || (sortParameters[i].desc ? \"desc\" : \"asc\");\r\n                                        if (void 0 !== isExpanded) {\r\n                                            column.autoExpandGroup = isExpanded\r\n                                        }\r\n                                        column[indexParameterName] = i;\r\n                                        break\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    };\r\n                    if (dataSource) {\r\n                        sortParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.sort());\r\n                        var groupParameters = (0, _uiGrid_core3.normalizeSortingInfo)(dataSource.group());\r\n                        var columnsGroupParameters = that.getGroupDataSourceParameters();\r\n                        var columnsSortParameters = that.getSortDataSourceParameters();\r\n                        if (!that._columns.length) {\r\n                            _iterator2.default.each(groupParameters, function(index, group) {\r\n                                that._columns.push(group.selector)\r\n                            });\r\n                            _iterator2.default.each(sortParameters, function(index, sort) {\r\n                                that._columns.push(sort.selector)\r\n                            });\r\n                            assignColumns(that, createColumnsFromOptions(that, that._columns))\r\n                        }\r\n                        if ((fromDataSource || !columnsGroupParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(groupParameters, columnsGroupParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, groupParameters, \"groupIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"grouping\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if ((fromDataSource || !columnsSortParameters && !that._hasUserState) && !(0, _uiGrid_core3.equalSortParameters)(sortParameters, columnsSortParameters)) {\r\n                            updateSortGroupParameterIndexes(that._columns, sortParameters, \"sortIndex\");\r\n                            if (fromDataSource) {\r\n                                updateColumnChanges(that, \"sorting\");\r\n                                isColumnsChanged = true\r\n                            }\r\n                        }\r\n                        if (isColumnsChanged) {\r\n                            fireColumnsChanged(that)\r\n                        }\r\n                    }\r\n                },\r\n                updateFilter: function(filter, remoteFiltering, columnIndex, filterValue) {\r\n                    var that = this;\r\n                    if (!Array.isArray(filter)) {\r\n                        return filter\r\n                    }\r\n                    filter = (0, _extend.extend)([], filter);\r\n                    columnIndex = void 0 !== filter.columnIndex ? filter.columnIndex : columnIndex;\r\n                    filterValue = void 0 !== filter.filterValue ? filter.filterValue : filterValue;\r\n                    if ((0, _type.isString)(filter[0]) && \"!\" !== filter[0]) {\r\n                        var column = that.columnOption(filter[0]);\r\n                        if (remoteFiltering) {\r\n                            if ((0, _config2.default)().forceIsoDateParsing && column && column.serializeValue && filter.length > 1) {\r\n                                filter[filter.length - 1] = column.serializeValue(filter[filter.length - 1], \"filter\")\r\n                            }\r\n                        } else {\r\n                            if (column && column.selector) {\r\n                                filter[0] = column.selector;\r\n                                filter[0].columnIndex = column.index\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if ((0, _type.isFunction)(filter[0])) {\r\n                            filter[0].columnIndex = columnIndex;\r\n                            filter[0].filterValue = filterValue\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < filter.length; i++) {\r\n                        filter[i] = that.updateFilter(filter[i], remoteFiltering, columnIndex, filterValue)\r\n                    }\r\n                    return filter\r\n                },\r\n                columnCount: function() {\r\n                    return this._columns ? this._columns.length : 0\r\n                },\r\n                columnOption: function(identifier, option, value, notFireEvent) {\r\n                    var that = this;\r\n                    var columns = that._columns.concat(that._commandColumns);\r\n                    var column = findColumn(columns, identifier);\r\n                    if (column) {\r\n                        if (1 === arguments.length) {\r\n                            return (0, _extend.extend)({}, column)\r\n                        }\r\n                        if ((0, _type.isString)(option)) {\r\n                            if (2 === arguments.length) {\r\n                                return columnOptionCore(that, column, option)\r\n                            } else {\r\n                                columnOptionCore(that, column, option, value, notFireEvent)\r\n                            }\r\n                        } else {\r\n                            if ((0, _type.isObject)(option)) {\r\n                                _iterator2.default.each(option, function(optionName, value) {\r\n                                    columnOptionCore(that, column, optionName, value, notFireEvent)\r\n                                })\r\n                            }\r\n                        }\r\n                        fireColumnsChanged(that)\r\n                    }\r\n                },\r\n                clearSorting: function() {\r\n                    var that = this;\r\n                    var columnCount = this.columnCount();\r\n                    that.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        that.columnOption(i, \"sortOrder\", void 0)\r\n                    }\r\n                    that.endUpdate()\r\n                },\r\n                clearGrouping: function() {\r\n                    var that = this;\r\n                    var columnCount = this.columnCount();\r\n                    that.beginUpdate();\r\n                    for (var i = 0; i < columnCount; i++) {\r\n                        that.columnOption(i, \"groupIndex\", void 0)\r\n                    }\r\n                    that.endUpdate()\r\n                },\r\n                getVisibleIndex: function(index, rowIndex) {\r\n                    var columns = this.getVisibleColumns(rowIndex);\r\n                    for (var i = columns.length - 1; i >= 0; i--) {\r\n                        if (columns[i].index === index) {\r\n                            return i\r\n                        }\r\n                    }\r\n                    return -1\r\n                },\r\n                getVisibleColumnIndex: function(id, rowIndex) {\r\n                    var index = this.columnOption(id, \"index\");\r\n                    return this.getVisibleIndex(index, rowIndex)\r\n                },\r\n                addColumn: function(options) {\r\n                    var that = this;\r\n                    var column = createColumn(that, options);\r\n                    var index = that._columns.length;\r\n                    that._columns.push(column);\r\n                    if (column.isBand) {\r\n                        that._columns = createColumnsFromOptions(that, that._columns);\r\n                        column = that._columns[index]\r\n                    }\r\n                    column.added = options;\r\n                    updateIndexes(that, column);\r\n                    that.updateColumns(that._dataSource)\r\n                },\r\n                deleteColumn: function(id) {\r\n                    var that = this;\r\n                    var column = that.columnOption(id);\r\n                    if (column && column.index >= 0) {\r\n                        convertOwnerBandToColumnReference(that._columns);\r\n                        that._columns.splice(column.index, 1);\r\n                        if (column.isBand) {\r\n                            var childIndexes = that.getChildrenByBandColumn(column.index).map(function(column) {\r\n                                return column.index\r\n                            });\r\n                            that._columns = that._columns.filter(function(column) {\r\n                                return childIndexes.indexOf(column.index) < 0\r\n                            })\r\n                        }\r\n                        updateIndexes(that);\r\n                        that.updateColumns(that._dataSource)\r\n                    }\r\n                },\r\n                addCommandColumn: function(options) {\r\n                    var commandColumn = this._commandColumns.filter(function(column) {\r\n                        return column.command === options.command\r\n                    })[0];\r\n                    if (!commandColumn) {\r\n                        commandColumn = options;\r\n                        this._commandColumns.push(commandColumn)\r\n                    }\r\n                },\r\n                getUserState: function() {\r\n                    var columns = this._columns;\r\n                    var result = [];\r\n                    var i;\r\n\r\n                    function handleStateField(index, value) {\r\n                        if (void 0 !== columns[i][value]) {\r\n                            result[i][value] = columns[i][value]\r\n                        }\r\n                    }\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        result[i] = {};\r\n                        _iterator2.default.each(USER_STATE_FIELD_NAMES, handleStateField)\r\n                    }\r\n                    return result\r\n                },\r\n                setUserState: function(state) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var ignoreColumnOptionNames = that.option(\"stateStoring.ignoreColumnOptionNames\");\r\n                    if (!ignoreColumnOptionNames) {\r\n                        ignoreColumnOptionNames = [];\r\n                        var commonColumnSettings = that.getCommonSettings();\r\n                        if (!that.option(\"columnChooser.enabled\")) {\r\n                            ignoreColumnOptionNames.push(\"visible\")\r\n                        }\r\n                        if (\"none\" === that.option(\"sorting.mode\")) {\r\n                            ignoreColumnOptionNames.push(\"sortIndex\", \"sortOrder\")\r\n                        }\r\n                        if (!commonColumnSettings.allowGrouping) {\r\n                            ignoreColumnOptionNames.push(\"groupIndex\")\r\n                        }\r\n                        if (!commonColumnSettings.allowFixing) {\r\n                            ignoreColumnOptionNames.push(\"fixed\", \"fixedPosition\")\r\n                        }\r\n                        if (!commonColumnSettings.allowResizing) {\r\n                            ignoreColumnOptionNames.push(\"width\", \"visibleWidth\")\r\n                        }\r\n                        var isFilterPanelHidden = !that.option(\"filterPanel.visible\");\r\n                        if (!that.option(\"filterRow.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValue\", \"selectedFilterOperation\")\r\n                        }\r\n                        if (!that.option(\"headerFilter.visible\") && isFilterPanelHidden) {\r\n                            ignoreColumnOptionNames.push(\"filterValues\", \"filterType\")\r\n                        }\r\n                    }\r\n                    that._columnsUserState = state;\r\n                    that._ignoreColumnOptionNames = ignoreColumnOptionNames;\r\n                    that._hasUserState = !!state;\r\n                    updateColumnChanges(that, \"filtering\");\r\n                    that.init();\r\n                    if (dataSource) {\r\n                        dataSource.sort(that.getSortDataSourceParameters());\r\n                        dataSource.group(that.getGroupDataSourceParameters())\r\n                    }\r\n                },\r\n                _createCalculatedColumnOptions: function(columnOptions, bandColumn) {\r\n                    var calculatedColumnOptions = {};\r\n                    var dataField = columnOptions.dataField;\r\n                    if (Array.isArray(columnOptions.columns) && columnOptions.columns.length || columnOptions.isBand) {\r\n                        calculatedColumnOptions.isBand = true;\r\n                        dataField = null\r\n                    }\r\n                    if (dataField) {\r\n                        if ((0, _type.isString)(dataField)) {\r\n                            var getter = _data2.default.compileGetter(dataField);\r\n                            calculatedColumnOptions = {\r\n                                caption: _inflector2.default.captionize(dataField),\r\n                                calculateCellValue: function(data, skipDeserialization) {\r\n                                    var value = getter(data);\r\n                                    return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                                },\r\n                                setCellValue: defaultSetCellValue,\r\n                                parseValue: function(text) {\r\n                                    var column = this;\r\n                                    var result;\r\n                                    var parsedValue;\r\n                                    if (\"number\" === column.dataType) {\r\n                                        if ((0, _type.isString)(text) && column.format) {\r\n                                            parsedValue = _number2.default.parse(text);\r\n                                            if ((0, _type.isNumeric)(parsedValue)) {\r\n                                                result = parsedValue\r\n                                            }\r\n                                        } else {\r\n                                            if ((0, _type.isDefined)(text) && (0, _type.isNumeric)(text)) {\r\n                                                result = Number(text)\r\n                                            }\r\n                                        }\r\n                                    } else {\r\n                                        if (\"boolean\" === column.dataType) {\r\n                                            if (text === column.trueText) {\r\n                                                result = true\r\n                                            } else {\r\n                                                if (text === column.falseText) {\r\n                                                    result = false\r\n                                                }\r\n                                            }\r\n                                        } else {\r\n                                            if ((0, _uiGrid_core3.isDateType)(column.dataType)) {\r\n                                                parsedValue = _date2.default.parse(text, column.format);\r\n                                                if (parsedValue) {\r\n                                                    result = parsedValue\r\n                                                }\r\n                                            } else {\r\n                                                result = text\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    return result\r\n                                }\r\n                            }\r\n                        }\r\n                        calculatedColumnOptions.allowFiltering = true\r\n                    } else {\r\n                        calculatedColumnOptions.allowFiltering = !!columnOptions.calculateFilterExpression\r\n                    }\r\n                    calculatedColumnOptions.calculateFilterExpression = function() {\r\n                        return _filtering2.default.defaultCalculateFilterExpression.apply(this, arguments)\r\n                    };\r\n                    calculatedColumnOptions.createFilterExpression = function(filterValue) {\r\n                        var result;\r\n                        if (this.calculateFilterExpression) {\r\n                            result = this.calculateFilterExpression.apply(this, arguments)\r\n                        }\r\n                        if ((0, _type.isFunction)(result)) {\r\n                            result = [result, \"=\", true]\r\n                        }\r\n                        if (result) {\r\n                            result.columnIndex = this.index;\r\n                            result.filterValue = filterValue\r\n                        }\r\n                        return result\r\n                    };\r\n                    if (!dataField || !(0, _type.isString)(dataField)) {\r\n                        (0, _extend.extend)(true, calculatedColumnOptions, {\r\n                            allowSorting: false,\r\n                            allowGrouping: false,\r\n                            calculateCellValue: function() {\r\n                                return null\r\n                            }\r\n                        })\r\n                    }\r\n                    if (bandColumn) {\r\n                        calculatedColumnOptions.allowFixing = false\r\n                    }\r\n                    if (columnOptions.dataType) {\r\n                        calculatedColumnOptions.userDataType = columnOptions.dataType\r\n                    }\r\n                    if (columnOptions.selectedFilterOperation && !(\"defaultSelectedFilterOperation\" in calculatedColumnOptions)) {\r\n                        calculatedColumnOptions.defaultSelectedFilterOperation = columnOptions.selectedFilterOperation\r\n                    }\r\n                    if (columnOptions.lookup) {\r\n                        calculatedColumnOptions.lookup = {\r\n                            calculateCellValue: function(value, skipDeserialization) {\r\n                                if (this.valueExpr) {\r\n                                    value = this.valueMap && this.valueMap[value]\r\n                                }\r\n                                return this.deserializeValue && !skipDeserialization ? this.deserializeValue(value) : value\r\n                            },\r\n                            updateValueMap: function() {\r\n                                this.valueMap = {};\r\n                                if (this.items) {\r\n                                    var calculateValue = _data2.default.compileGetter(this.valueExpr);\r\n                                    var calculateDisplayValue = _data2.default.compileGetter(this.displayExpr);\r\n                                    for (var i = 0; i < this.items.length; i++) {\r\n                                        var item = this.items[i];\r\n                                        var displayValue = calculateDisplayValue(item);\r\n                                        this.valueMap[calculateValue(item)] = displayValue;\r\n                                        this.dataType = this.dataType || getValueDataType(displayValue)\r\n                                    }\r\n                                }\r\n                            },\r\n                            update: function() {\r\n                                var that = this;\r\n                                var dataSource = that.dataSource;\r\n                                if (dataSource) {\r\n                                    if ((0, _type.isFunction)(dataSource) && !(0, _variable_wrapper.isWrapped)(dataSource)) {\r\n                                        dataSource = dataSource({})\r\n                                    }\r\n                                    if ((0, _type.isPlainObject)(dataSource) || dataSource instanceof _abstract_store2.default || Array.isArray(dataSource)) {\r\n                                        if (that.valueExpr) {\r\n                                            var dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSource);\r\n                                            dataSourceOptions.paginate = false;\r\n                                            dataSource = new _data_source.DataSource(dataSourceOptions);\r\n                                            return dataSource.load().done(function(data) {\r\n                                                that.items = data;\r\n                                                that.updateValueMap && that.updateValueMap()\r\n                                            })\r\n                                        }\r\n                                    } else {\r\n                                        _ui2.default.log(\"E1016\")\r\n                                    }\r\n                                } else {\r\n                                    that.updateValueMap && that.updateValueMap()\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    calculatedColumnOptions.resizedCallbacks = (0, _callbacks2.default)();\r\n                    if (columnOptions.resized) {\r\n                        calculatedColumnOptions.resizedCallbacks.add(columnOptions.resized.bind(columnOptions))\r\n                    }\r\n                    _iterator2.default.each(calculatedColumnOptions, function(optionName) {\r\n                        if ((0, _type.isFunction)(calculatedColumnOptions[optionName]) && 0 !== optionName.indexOf(\"default\")) {\r\n                            var defaultOptionName = \"default\" + optionName.charAt(0).toUpperCase() + optionName.substr(1);\r\n                            calculatedColumnOptions[defaultOptionName] = calculatedColumnOptions[optionName]\r\n                        }\r\n                    });\r\n                    return calculatedColumnOptions\r\n                },\r\n                getRowCount: function() {\r\n                    this._rowCount = this._rowCount || _getRowCount(this);\r\n                    return this._rowCount\r\n                },\r\n                getRowIndex: function(columnIndex, alwaysGetRowIndex) {\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    return column && (alwaysGetRowIndex || column.visible && !(column.command || (0, _type.isDefined)(column.groupIndex))) ? getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex).length : 0\r\n                },\r\n                getChildrenByBandColumn: function(bandColumnIndex, onlyVisibleDirectChildren) {\r\n                    var that = this;\r\n                    var bandColumnsCache = that.getBandColumnsCache();\r\n                    var result = _getChildrenByBandColumn(bandColumnIndex, bandColumnsCache.columnChildrenByIndex, !onlyVisibleDirectChildren);\r\n                    if (onlyVisibleDirectChildren) {\r\n                        return result.filter(function(column) {\r\n                            return column.visible && !column.command\r\n                        }).sort(function(column1, column2) {\r\n                            return column1.visibleIndex - column2.visibleIndex\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                isParentBandColumn: function(columnIndex, bandColumnIndex) {\r\n                    var result = false;\r\n                    var column = this._columns[columnIndex];\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var parentBandColumns = column && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    if (parentBandColumns) {\r\n                        _iterator2.default.each(parentBandColumns, function(_, bandColumn) {\r\n                            if (bandColumn.index === bandColumnIndex) {\r\n                                result = true;\r\n                                return false\r\n                            }\r\n                        })\r\n                    }\r\n                    return result\r\n                },\r\n                isParentColumnVisible: function(columnIndex) {\r\n                    var result = true;\r\n                    var bandColumnsCache = this.getBandColumnsCache();\r\n                    var bandColumns = columnIndex >= 0 && getParentBandColumns(columnIndex, bandColumnsCache.columnParentByIndex);\r\n                    bandColumns && _iterator2.default.each(bandColumns, function(_, bandColumn) {\r\n                        result = result && bandColumn.visible;\r\n                        return result\r\n                    });\r\n                    return result\r\n                },\r\n                getColumnId: function(column) {\r\n                    if (column.command && column.type === GROUP_COMMAND_COLUMN_NAME) {\r\n                        if (isCustomCommandColumn(this, column)) {\r\n                            return \"type:\" + column.type\r\n                        }\r\n                        return \"command:\" + column.command\r\n                    }\r\n                    return column.index\r\n                },\r\n                getCustomizeTextByDataType: getCustomizeTextByDataType,\r\n                getHeaderContentAlignment: function(columnAlignment) {\r\n                    var rtlEnabled = this.option(\"rtlEnabled\");\r\n                    if (rtlEnabled) {\r\n                        return \"left\" === columnAlignment ? \"right\" : \"left\"\r\n                    }\r\n                    return columnAlignment\r\n                }\r\n            }\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}