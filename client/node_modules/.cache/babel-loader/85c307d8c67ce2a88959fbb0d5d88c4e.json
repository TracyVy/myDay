{"ast":null,"code":"/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\n\"use strict\";\n\nvar _renderer = require(\"../../core/renderer\");\n\nvar _renderer2 = _interopRequireDefault(_renderer);\n\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\n\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\n\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\n\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\n\nvar _array_store = require(\"../../data/array_store\");\n\nvar _array_store2 = _interopRequireDefault(_array_store);\n\nvar _custom_store = require(\"../../data/custom_store\");\n\nvar _custom_store2 = _interopRequireDefault(_custom_store);\n\nvar _ui = require(\"../widget/ui.errors\");\n\nvar _ui2 = _interopRequireDefault(_ui);\n\nvar _common = require(\"../../core/utils/common\");\n\nvar _iterator = require(\"../../core/utils/iterator\");\n\nvar _type = require(\"../../core/utils/type\");\n\nvar _type2 = _interopRequireDefault(_type);\n\nvar _extend = require(\"../../core/utils/extend\");\n\nvar _data_helper = require(\"../../data_helper\");\n\nvar _data_helper2 = _interopRequireDefault(_data_helper);\n\nvar _deferred = require(\"../../core/utils/deferred\");\n\nvar _array_compare = require(\"../../core/utils/array_compare\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = {\n  defaultOptions: function () {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: _uiGrid_core2.default.Controller.inherit({}).include(_data_helper2.default).inherit(function () {\n      var changePaging = function (that, optionName, value) {\n        var dataSource = that._dataSource;\n\n        if (dataSource) {\n          if (void 0 !== value) {\n            if (dataSource[optionName]() !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(that.pageChanged.fire.bind(that.pageChanged));\n            }\n\n            return (0, _deferred.Deferred)().resolve().promise();\n          }\n\n          return dataSource[optionName]();\n        }\n\n        return 0;\n      };\n\n      var members = {\n        init: function () {\n          var that = this;\n          that._items = [];\n          that._columnsController = that.getController(\"columns\");\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._dataChangedHandler = that._handleDataChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n\n          that._refreshDataSource();\n        },\n        callbackNames: function () {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\"];\n        },\n        callbackFlags: function (name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function () {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function () {\n          this._columnsController.reset();\n\n          this._items = [];\n\n          this._refreshDataSource();\n        },\n        optionChanged: function (args) {\n          var that = this;\n          var dataSource;\n\n          function handled() {\n            args.handled = true;\n          }\n\n          if (\"dataSource\" === args.name && args.name === args.fullName && (args.value === args.previousValue || that.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue))) {\n            if (args.value !== args.previousValue) {\n              var store = that.store();\n\n              if (store) {\n                store._array = args.value;\n              }\n            }\n\n            handled();\n            that.refresh(that.option(\"repaintChangesOnly\"));\n            return;\n          }\n\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n\n            case \"paging\":\n              dataSource = that.dataSource();\n\n              if (dataSource && that._setPagingOptions(dataSource)) {\n                dataSource.load().done(that.pageChanged.fire.bind(that.pageChanged));\n              }\n\n              handled();\n              break;\n\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n\n            case \"columns\":\n              dataSource = that.dataSource();\n\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function () {\n          return !this._isLoading;\n        },\n        getDataSource: function () {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function (returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function (filter, returnDataField) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n\n            var additionalFilter = that._calculateAdditionalFilter();\n\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = _uiGrid_core4.default.combineFilters([additionalFilter, filter]);\n              }\n            }\n\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n\n          return filter;\n        },\n        waitReady: function () {\n          if (this._updateLockCount) {\n            this._readyDeferred = new _deferred.Deferred();\n            return this._readyDeferred;\n          }\n\n          return (0, _deferred.when)();\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(function (change) {\n              return change.repaintChangesOnly;\n            });\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function (e) {\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function (e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n\n          var updateItemsHandler = function updateItemsHandler() {\n            that._columnsController.columnsChanged.remove(updateItemsHandler);\n\n            that.updateItems();\n          };\n\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n\n              that.reload();\n            }\n          } else {\n            if (changeTypes.columns) {\n              if (optionNames.filterValues || optionNames.filterValue || optionNames.selectedFilterOperation) {\n                filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n                filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n\n                if (Array.isArray(filterValues) || void 0 === e.columnIndex || _type2.default.isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                  that._applyFilter();\n\n                  filterApplied = true;\n                }\n              }\n\n              if (!that._needApplyFilter && !_uiGrid_core4.default.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n                that._columnsController.columnsChanged.add(updateItemsHandler);\n              }\n\n              if (_type2.default.isDefined(optionNames.visible)) {\n                var column = that._columnsController.columnOption(e.columnIndex);\n\n                if (column && (_type2.default.isDefined(column.filterValue) || _type2.default.isDefined(column.filterValues))) {\n                  that._applyFilter();\n\n                  filterApplied = true;\n                }\n              }\n            }\n          }\n\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function (e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            (0, _deferred.when)(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n\n              that._isDataSourceApplying = false;\n\n              var hasAdditionalFilter = function () {\n                var additionalFilter = that._calculateAdditionalFilter();\n\n                return additionalFilter && additionalFilter.length;\n              };\n\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n\n              if (needApplyFilter && !that._isAllDataTypesDefined && hasAdditionalFilter()) {\n                _ui2.default.log(\"W1005\", that.component.NAME);\n\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n\n              that._handleLoadingChanged(true);\n            }\n\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function (isLoading) {\n          this._isLoading = isLoading;\n\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function (e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        fireError: function () {\n          this.dataErrorOccurred.fire(_ui2.default.Error.apply(_ui2.default, arguments));\n        },\n        _setPagingOptions: function (dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isChanged = true;\n          }\n\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isChanged = true;\n          }\n\n          return isChanged;\n        },\n        _getSpecificDataSourceOption: function () {\n          var dataSource = this.option(\"dataSource\");\n\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n\n          return dataSource;\n        },\n        _initDataSource: function () {\n          var that = this;\n          var dataSource = this.option(\"dataSource\");\n          var oldDataSource = this._dataSource;\n          that.callBase();\n          dataSource = that._dataSource;\n          that._useSortingGroupingFromColumns = true;\n\n          if (dataSource) {\n            that._setPagingOptions(dataSource);\n\n            that.setDataSource(dataSource);\n          } else {\n            if (oldDataSource) {\n              that.updateItems();\n            }\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n          var result = new _deferred.Deferred();\n          (0, _deferred.when)(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(result.resolve).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function (items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function () {\n          return 0;\n        },\n        _processItems: function (items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n\n          var visibleItems = that._items;\n          var dataIndex = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1].dataIndex + 1 : 0;\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          (0, _iterator.each)(items, function (index, item) {\n            if (_type2.default.isDefined(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function (item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function (data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function (dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function (data, columns, isModified) {\n          var values = [];\n          var value;\n\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else {\n                if (column.dataField) {\n                  value = data[column.dataField];\n                }\n              }\n            }\n\n            values.push(value);\n          }\n\n          return values;\n        },\n        _applyChange: function (change) {\n          var that = this;\n\n          if (\"update\" === change.changeType) {\n            that._applyChangeUpdate(change);\n          } else {\n            if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n              that._applyChangesOnly(change);\n            } else {\n              if (\"refresh\" === change.changeType) {\n                that._applyChangeFull(change);\n              }\n            }\n          }\n        },\n        _applyChangeFull: function (change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function (change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n\n          return rowIndices;\n        },\n        _applyChangeUpdate: function (change) {\n          var that = this;\n          var items = change.items;\n\n          var rowIndices = that._getRowIndices(change);\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n\n          var equalItems = function (item1, item2, strict) {\n            var result = item1 && item2 && (0, _common.equalByValue)(item1.key, item2.key);\n\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n\n            return result;\n          };\n\n          (0, _iterator.each)(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n\n            if (prevIndex === rowIndex) {\n              return;\n            }\n\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else {\n                if (repaintChangesOnly && !change.isFullUpdate) {\n                  columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n                }\n              }\n            } else {\n              if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n                changeType = \"insert\";\n\n                that._items.splice(rowIndex, 0, newItem);\n\n                rowIndexCorrection++;\n              } else {\n                if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n                  changeType = \"remove\";\n\n                  that._items.splice(rowIndex, 1);\n\n                  rowIndexCorrection--;\n                  prevIndex = -1;\n                } else {\n                  if (newItem) {\n                    changeType = \"update\";\n                    that._items[rowIndex] = newItem;\n                  } else {\n                    return;\n                  }\n                }\n              }\n            }\n\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n\n          return false;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          if (oldItem.rowType === newItem.rowType && \"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n            var columnIndices = [];\n\n            if (\"detail\" !== newItem.rowType) {\n              for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                  columnIndices.push(columnIndex);\n                }\n              }\n            }\n\n            return columnIndices;\n          }\n        },\n        _partialUpdateRow: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n\n            oldItem.update && oldItem.update(newItem);\n          }\n\n          return changedColumnIndices;\n        },\n        _isItemEquals: function (item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n\n          var compareFields = [\"modified\", \"isNewRow\", \"removed\", \"isEditing\"];\n\n          if (compareFields.some(function (field) {\n            return item1[field] !== item2[field];\n          })) {\n            return false;\n          }\n\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        _applyChangesOnly: function (change) {\n          var _this = this;\n\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n\n          var isItemEquals = function (item1, item2) {\n            if (!_this._isItemEquals(item1, item2)) {\n              return false;\n            }\n\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2);\n                }\n              });\n            }\n\n            return true;\n          };\n\n          var oldItems = this._items.slice();\n\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = (0, _array_compare.findChanges)(oldItems, change.items, getRowKey, isItemEquals);\n\n          if (!result) {\n            this._applyChangeFull(change);\n\n            return;\n          }\n\n          result.forEach(function (change) {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n\n                var changedColumnIndices = _this._partialUpdateRow(oldItem, newItem, index, true);\n\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                _this._items[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n\n                _this._items.splice(change.index, 0, change.data);\n\n                break;\n\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n\n                _this._items.splice(change.index, 1);\n\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n\n          this._correctRowIndices(function (rowIndex) {\n            var oldItem = oldItems[rowIndex];\n            var key = getRowKey(oldItem);\n            var newRowIndex = newIndexByKey[key];\n            return newRowIndex >= 0 ? newRowIndex - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: _common.noop,\n        _updateItemsCore: function (change) {\n          var that = this;\n          var items;\n          var dataSource = that._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n\n          if (dataSource) {\n            items = change.items || dataSource.items();\n            items = that._beforeProcessItems(items);\n            items = that._processItems(items, change);\n            change.items = items;\n            var oldItems = that._items.length === items.length && that._items;\n\n            that._applyChange(change);\n\n            var rowIndexDelta = that.getRowIndexDelta();\n            (0, _iterator.each)(that._items, function (index, item) {\n              item.rowIndex = index - rowIndexDelta;\n\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n            });\n          } else {\n            that._items = [];\n          }\n        },\n        _handleChanging: function (e) {\n          var that = this;\n          var rows = that.getVisibleRows();\n          var dataSource = that.dataSource();\n\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function (change, isDataChanged) {\n          change = change || {};\n          var that = this;\n\n          if (void 0 !== that._repaintChangesOnly) {\n            change.repaintChangesOnly = that._repaintChangesOnly;\n          } else {\n            if (change.changes) {\n              change.repaintChangesOnly = that.option(\"repaintChangesOnly\");\n            } else {\n              if (isDataChanged) {\n                var operationTypes = that.dataSource().operationTypes();\n                change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\n                change.isDataChanged = true;\n\n                if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n                  change.needUpdateDimensions = true;\n                }\n              }\n            }\n          }\n\n          if (that._updateLockCount) {\n            that._changes.push(change);\n\n            return;\n          }\n\n          that._updateItemsCore(change);\n\n          if (change.cancel) {\n            return;\n          }\n\n          that._fireChanged(change);\n        },\n        loadingOperationTypes: function () {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function (change) {\n          var that = this;\n          (0, _common.deferRender)(function () {\n            that.changed.fire(change);\n          });\n        },\n        isLoading: function () {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function () {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function () {\n          return null;\n        },\n        _applyFilter: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            return that.reload().done(that.pageChanged.fire.bind(that.pageChanged));\n          }\n        },\n        filter: function filter(filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n\n          if (0 === arguments.length) {\n            return filter;\n          }\n\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n\n          if (_uiGrid_core4.default.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n\n          this._applyFilter();\n        },\n        clearFilter: function (filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n\n          var clearColumnOption = function (optionName) {\n            var columnCount = columnsController.columnCount();\n\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n\n          that.component.beginUpdate();\n\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function () {\n          var that = this;\n\n          var changedHandler = function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          };\n\n          that.changed.add(changedHandler);\n        },\n        _getDataSourceAdapter: _common.noop,\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function (store) {\n          store = store || this.store();\n          return store instanceof _array_store2.default;\n        },\n        isCustomStore: function (store) {\n          store = store || this.store();\n          return store instanceof _custom_store2.default;\n        },\n        _createDataSourceAdapter: function (dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = (0, _extend.extend)({}, enabledRemoteOperations, remoteOperations);\n          }\n\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function (dataSource) {\n          var that = this;\n          var oldDataSource = that._dataSource;\n\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(that._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\n            oldDataSource.loadError.remove(that._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(that._changingHandler);\n            oldDataSource.dispose(that._isSharedDataSource);\n          }\n\n          if (dataSource) {\n            dataSource = that._createDataSourceAdapter(dataSource);\n          }\n\n          that._dataSource = dataSource;\n\n          if (dataSource) {\n            that._fireDataSourceChanged();\n\n            that._isLoading = !dataSource.isLoaded();\n            that._needApplyFilter = true;\n            that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(that._dataChangedHandler);\n            dataSource.loadingChanged.add(that._loadingChangedHandler);\n            dataSource.loadError.add(that._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(that._changingHandler);\n          }\n        },\n        items: function () {\n          return this._items;\n        },\n        isEmpty: function () {\n          return !this.items().length;\n        },\n        pageCount: function () {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function () {\n          return this._dataSource;\n        },\n        store: function () {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function (data) {\n          var that = this;\n          var d = new _deferred.Deferred();\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n\n              dataSource._handleDataLoaded(options);\n\n              (0, _deferred.when)(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else {\n              if (!dataSource.isLoading()) {\n                var loadOptions = (0, _extend.extend)({}, dataSource.loadOptions(), {\n                  isLoadingAll: true,\n                  requireTotalCount: false\n                });\n                dataSource.load(loadOptions).done(function (items, extra) {\n                  items = that._beforeProcessItems(items);\n                  items = that._processItems(items, {\n                    changeType: \"loadingAll\"\n                  });\n                  d.resolve(items, extra && extra.summary);\n                }).fail(d.reject);\n              } else {\n                d.reject();\n              }\n            }\n          } else {\n            d.resolve([]);\n          }\n\n          return d;\n        },\n        getKeyByRowIndex: function (rowIndex) {\n          var item = this.items()[rowIndex];\n\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function (key) {\n          return _uiGrid_core4.default.getIndexByKey(key, this.items());\n        },\n        keyOf: function (data) {\n          var store = this.store();\n\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function (key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n\n          if (!store) {\n            return;\n          }\n\n          if (rowIndex >= 0) {\n            result = new _deferred.Deferred().resolve(this.items()[rowIndex].data);\n          }\n\n          return result || store.byKey(key);\n        },\n        key: function () {\n          var store = this.store();\n\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function () {\n          return 0;\n        },\n        getDataByKeys: function (rowKeys) {\n          var that = this;\n          var result = new _deferred.Deferred();\n          var deferreds = [];\n          var data = [];\n          (0, _iterator.each)(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n\n          _deferred.when.apply(_renderer2.default, deferreds).always(function () {\n            result.resolve(data);\n          });\n\n          return result;\n        },\n        pageIndex: function (value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function (value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function (messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function () {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n\n          this._fireLoadingChanged();\n        },\n        refresh: function (options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else {\n            if (!options) {\n              options = {\n                lookup: true,\n                selection: true,\n                reload: true\n              };\n            }\n          }\n\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new _deferred.Deferred();\n\n          var customizeLoadResult = function () {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n\n          (0, _deferred.when)(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              (0, _deferred.when)(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function () {\n          return this.items();\n        },\n        _disposeDataSource: function () {\n          this.setDataSource(null);\n        },\n        dispose: function () {\n          this._disposeDataSource();\n\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function (rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n\n          if (rowIndexes.length > 1 || _type2.default.isDefined(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function (fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function () {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function () {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        }\n      };\n\n      _uiGrid_core4.default.proxyMethod(members, \"load\");\n\n      _uiGrid_core4.default.proxyMethod(members, \"reload\");\n\n      _uiGrid_core4.default.proxyMethod(members, \"push\");\n\n      _uiGrid_core4.default.proxyMethod(members, \"itemsCount\", 0);\n\n      _uiGrid_core4.default.proxyMethod(members, \"totalItemsCount\", 0);\n\n      _uiGrid_core4.default.proxyMethod(members, \"hasKnownLastPage\", true);\n\n      _uiGrid_core4.default.proxyMethod(members, \"isLoaded\", true);\n\n      _uiGrid_core4.default.proxyMethod(members, \"totalCount\", 0);\n\n      return members;\n    }())\n  }\n};","map":{"version":3,"sources":["/Users/tracyvy/Desktop/calendar/client/node_modules/devextreme/ui/grid_core/ui.grid_core.data_controller.js"],"names":["_renderer","require","_renderer2","_interopRequireDefault","_uiGrid_core","_uiGrid_core2","_uiGrid_core3","_uiGrid_core4","_array_store","_array_store2","_custom_store","_custom_store2","_ui","_ui2","_common","_iterator","_type","_type2","_extend","_data_helper","_data_helper2","_deferred","_array_compare","obj","__esModule","module","exports","defaultOptions","loadingTimeout","dataSource","cacheEnabled","repaintChangesOnly","highlightChanges","onDataErrorOccurred","remoteOperations","paging","enabled","pageSize","pageIndex","controllers","data","default","Controller","inherit","include","changePaging","that","optionName","value","_dataSource","_skipProcessingPagingChange","option","done","pageChanged","fire","bind","Deferred","resolve","promise","members","init","_items","_columnsController","getController","_columnsChangedHandler","_handleColumnsChanged","_dataChangedHandler","_handleDataChanged","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","optionChanged","args","handled","fullName","previousValue","Array","isArray","store","_array","refresh","_setPagingOptions","load","isLoading","_useSortingGroupingFromColumns","callBase","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","columnsController","additionalFilter","_calculateAdditionalFilter","isDataSourceApplied","isAllDataTypesDefined","combineFilters","updateFilter","filtering","waitReady","_updateLockCount","_readyDeferred","when","_endUpdateCore","changes","length","every","change","updateItems","e","storeLoadOptions","isCustomLoading","isLoadingAll","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","updateItemsHandler","remove","reload","columns","selectedFilterOperation","columnOption","columnIndex","isDefined","_applyFilter","_needApplyFilter","checkChanges","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","hasAdditionalFilter","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","fireError","Error","apply","arguments","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","_processItems","rowIndexDelta","changeType","visibleColumns","getVisibleColumns","visibleItems","dataIndex","options","each","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","equalByValue","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","changedColumnIndices","cells","forEach","cell","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","compareFields","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","isExpanded","summaryCellsMatch","summaryCells","continuationMatch","isContinuation","isContinuationOnNextPage","_this","newIndexByKey","getRowKey","isItemEquals","oldItems","findChanges","_correctRowIndices","newRowIndex","noop","_updateItemsCore","rows","getVisibleRows","isDataChanged","operationTypes","groupExpanding","needUpdateDimensions","cancel","_fireChanged","loadingOperationTypes","deferRender","changed","loadingChanged","_loadingText","filterExpr","prototype","call","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","extend","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","isEmpty","pageCount","loadAll","d","loadOptions","_handleDataLoaded","extra","getKeyByRowIndex","getRowIndexByKey","getIndexByKey","byKey","getRowIndexOffset","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","proxyMethod"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 20.1.6\r\n * Build date: Fri Jul 17 2020\r\n *\r\n * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\n\"use strict\";\r\nvar _renderer = require(\"../../core/renderer\");\r\nvar _renderer2 = _interopRequireDefault(_renderer);\r\nvar _uiGrid_core = require(\"./ui.grid_core.modules\");\r\nvar _uiGrid_core2 = _interopRequireDefault(_uiGrid_core);\r\nvar _uiGrid_core3 = require(\"./ui.grid_core.utils\");\r\nvar _uiGrid_core4 = _interopRequireDefault(_uiGrid_core3);\r\nvar _array_store = require(\"../../data/array_store\");\r\nvar _array_store2 = _interopRequireDefault(_array_store);\r\nvar _custom_store = require(\"../../data/custom_store\");\r\nvar _custom_store2 = _interopRequireDefault(_custom_store);\r\nvar _ui = require(\"../widget/ui.errors\");\r\nvar _ui2 = _interopRequireDefault(_ui);\r\nvar _common = require(\"../../core/utils/common\");\r\nvar _iterator = require(\"../../core/utils/iterator\");\r\nvar _type = require(\"../../core/utils/type\");\r\nvar _type2 = _interopRequireDefault(_type);\r\nvar _extend = require(\"../../core/utils/extend\");\r\nvar _data_helper = require(\"../../data_helper\");\r\nvar _data_helper2 = _interopRequireDefault(_data_helper);\r\nvar _deferred = require(\"../../core/utils/deferred\");\r\nvar _array_compare = require(\"../../core/utils/array_compare\");\r\n\r\nfunction _interopRequireDefault(obj) {\r\n    return obj && obj.__esModule ? obj : {\r\n        \"default\": obj\r\n    }\r\n}\r\nmodule.exports = {\r\n    defaultOptions: function() {\r\n        return {\r\n            loadingTimeout: 0,\r\n            dataSource: null,\r\n            cacheEnabled: true,\r\n            repaintChangesOnly: false,\r\n            highlightChanges: false,\r\n            onDataErrorOccurred: null,\r\n            remoteOperations: \"auto\",\r\n            paging: {\r\n                enabled: true,\r\n                pageSize: void 0,\r\n                pageIndex: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        data: _uiGrid_core2.default.Controller.inherit({}).include(_data_helper2.default).inherit(function() {\r\n            var changePaging = function(that, optionName, value) {\r\n                var dataSource = that._dataSource;\r\n                if (dataSource) {\r\n                    if (void 0 !== value) {\r\n                        if (dataSource[optionName]() !== value) {\r\n                            if (\"pageSize\" === optionName) {\r\n                                dataSource.pageIndex(0)\r\n                            }\r\n                            dataSource[optionName](value);\r\n                            that._skipProcessingPagingChange = true;\r\n                            that.option(\"paging.\" + optionName, value);\r\n                            that._skipProcessingPagingChange = false;\r\n                            return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                        }\r\n                        return (0, _deferred.Deferred)().resolve().promise()\r\n                    }\r\n                    return dataSource[optionName]()\r\n                }\r\n                return 0\r\n            };\r\n            var members = {\r\n                init: function() {\r\n                    var that = this;\r\n                    that._items = [];\r\n                    that._columnsController = that.getController(\"columns\");\r\n                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\r\n                    that._dataChangedHandler = that._handleDataChanged.bind(that);\r\n                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n                    that._loadErrorHandler = that._handleLoadError.bind(that);\r\n                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n                    that._changingHandler = that._handleChanging.bind(that);\r\n                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);\r\n                    that._isLoading = false;\r\n                    that._isCustomLoading = false;\r\n                    that._repaintChangesOnly = void 0;\r\n                    that._changes = [];\r\n                    that.createAction(\"onDataErrorOccurred\");\r\n                    that.dataErrorOccurred.add(function(error) {\r\n                        return that.executeAction(\"onDataErrorOccurred\", {\r\n                            error: error\r\n                        })\r\n                    });\r\n                    that._refreshDataSource()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\"]\r\n                },\r\n                callbackFlags: function(name) {\r\n                    if (\"dataErrorOccurred\" === name) {\r\n                        return {\r\n                            stopOnFalse: true\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"]\r\n                },\r\n                reset: function() {\r\n                    this._columnsController.reset();\r\n                    this._items = [];\r\n                    this._refreshDataSource()\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    var dataSource;\r\n\r\n                    function handled() {\r\n                        args.handled = true\r\n                    }\r\n                    if (\"dataSource\" === args.name && args.name === args.fullName && (args.value === args.previousValue || that.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue))) {\r\n                        if (args.value !== args.previousValue) {\r\n                            var store = that.store();\r\n                            if (store) {\r\n                                store._array = args.value\r\n                            }\r\n                        }\r\n                        handled();\r\n                        that.refresh(that.option(\"repaintChangesOnly\"));\r\n                        return\r\n                    }\r\n                    switch (args.name) {\r\n                        case \"cacheEnabled\":\r\n                        case \"repaintChangesOnly\":\r\n                        case \"highlightChanges\":\r\n                        case \"loadingTimeout\":\r\n                            handled();\r\n                            break;\r\n                        case \"remoteOperations\":\r\n                        case \"keyExpr\":\r\n                        case \"dataSource\":\r\n                        case \"scrolling\":\r\n                            handled();\r\n                            that.reset();\r\n                            break;\r\n                        case \"paging\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && that._setPagingOptions(dataSource)) {\r\n                                dataSource.load().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                            }\r\n                            handled();\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that.reset();\r\n                            break;\r\n                        case \"columns\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                                this._useSortingGroupingFromColumns = true;\r\n                                dataSource.load()\r\n                            }\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                isReady: function() {\r\n                    return !this._isLoading\r\n                },\r\n                getDataSource: function() {\r\n                    return this._dataSource && this._dataSource._dataSource\r\n                },\r\n                getCombinedFilter: function(returnDataField) {\r\n                    return this.combinedFilter(void 0, returnDataField)\r\n                },\r\n                combinedFilter: function(filter, returnDataField) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    if (dataSource) {\r\n                        if (void 0 === filter) {\r\n                            filter = dataSource.filter()\r\n                        }\r\n                        var additionalFilter = that._calculateAdditionalFilter();\r\n                        if (additionalFilter) {\r\n                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\r\n                                filter = _uiGrid_core4.default.combineFilters([additionalFilter, filter])\r\n                            }\r\n                        }\r\n                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)\r\n                    }\r\n                    return filter\r\n                },\r\n                waitReady: function() {\r\n                    if (this._updateLockCount) {\r\n                        this._readyDeferred = new _deferred.Deferred;\r\n                        return this._readyDeferred\r\n                    }\r\n                    return (0, _deferred.when)()\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    if (changes.length) {\r\n                        this._changes = [];\r\n                        var repaintChangesOnly = changes.every(function(change) {\r\n                            return change.repaintChangesOnly\r\n                        });\r\n                        this.updateItems(1 === changes.length ? changes[0] : {\r\n                            repaintChangesOnly: repaintChangesOnly\r\n                        })\r\n                    }\r\n                    if (this._readyDeferred) {\r\n                        this._readyDeferred.resolve();\r\n                        this._readyDeferred = null\r\n                    }\r\n                },\r\n                _handleCustomizeStoreLoadOptions: function(e) {\r\n                    var columnsController = this._columnsController;\r\n                    var dataSource = this._dataSource;\r\n                    var storeLoadOptions = e.storeLoadOptions;\r\n                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n                        return\r\n                    }\r\n                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n                    if (!columnsController.isDataSourceApplied()) {\r\n                        columnsController.updateColumnDataTypes(dataSource)\r\n                    }\r\n                    this._columnsUpdating = true;\r\n                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n                    this._columnsUpdating = false;\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n                    dataSource.sort(storeLoadOptions.sort);\r\n                    dataSource.group(storeLoadOptions.group);\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n                },\r\n                _handleColumnsChanged: function(e) {\r\n                    var that = this;\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    var filterValue;\r\n                    var filterValues;\r\n                    var filterApplied;\r\n                    var updateItemsHandler = function updateItemsHandler() {\r\n                        that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n                        that.updateItems()\r\n                    };\r\n                    if (changeTypes.sorting || changeTypes.grouping) {\r\n                        if (that._dataSource && !that._columnsUpdating) {\r\n                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                            that.reload()\r\n                        }\r\n                    } else {\r\n                        if (changeTypes.columns) {\r\n                            if (optionNames.filterValues || optionNames.filterValue || optionNames.selectedFilterOperation) {\r\n                                filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                                filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n                                if (Array.isArray(filterValues) || void 0 === e.columnIndex || _type2.default.isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                                    that._applyFilter();\r\n                                    filterApplied = true\r\n                                }\r\n                            }\r\n                            if (!that._needApplyFilter && !_uiGrid_core4.default.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                                that._columnsController.columnsChanged.add(updateItemsHandler)\r\n                            }\r\n                            if (_type2.default.isDefined(optionNames.visible)) {\r\n                                var column = that._columnsController.columnOption(e.columnIndex);\r\n                                if (column && (_type2.default.isDefined(column.filterValue) || _type2.default.isDefined(column.filterValues))) {\r\n                                    that._applyFilter();\r\n                                    filterApplied = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!filterApplied && changeTypes.filtering) {\r\n                        that.reload()\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    var isAsyncDataSourceApplying = false;\r\n                    this._useSortingGroupingFromColumns = false;\r\n                    if (dataSource && !that._isDataSourceApplying) {\r\n                        that._isDataSourceApplying = true;\r\n                        (0, _deferred.when)(that._columnsController.applyDataSource(dataSource)).done(function() {\r\n                            if (that._isLoading) {\r\n                                that._handleLoadingChanged(false)\r\n                            }\r\n                            if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                                e.isDelayed = false\r\n                            }\r\n                            that._isDataSourceApplying = false;\r\n                            var hasAdditionalFilter = function() {\r\n                                var additionalFilter = that._calculateAdditionalFilter();\r\n                                return additionalFilter && additionalFilter.length\r\n                            };\r\n                            var needApplyFilter = that._needApplyFilter;\r\n                            that._needApplyFilter = false;\r\n                            if (needApplyFilter && !that._isAllDataTypesDefined && hasAdditionalFilter()) {\r\n                                _ui2.default.log(\"W1005\", that.component.NAME);\r\n                                that._applyFilter()\r\n                            } else {\r\n                                that.updateItems(e, true)\r\n                            }\r\n                        }).fail(function() {\r\n                            that._isDataSourceApplying = false\r\n                        });\r\n                        if (that._isDataSourceApplying) {\r\n                            isAsyncDataSourceApplying = true;\r\n                            that._handleLoadingChanged(true)\r\n                        }\r\n                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n                    }\r\n                },\r\n                _handleLoadingChanged: function(isLoading) {\r\n                    this._isLoading = isLoading;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                _handleLoadError: function(e) {\r\n                    this.dataErrorOccurred.fire(e)\r\n                },\r\n                fireError: function() {\r\n                    this.dataErrorOccurred.fire(_ui2.default.Error.apply(_ui2.default, arguments))\r\n                },\r\n                _setPagingOptions: function(dataSource) {\r\n                    var pageIndex = this.option(\"paging.pageIndex\");\r\n                    var pageSize = this.option(\"paging.pageSize\");\r\n                    var pagingEnabled = this.option(\"paging.enabled\");\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    var appendMode = \"infinite\" === scrollingMode;\r\n                    var virtualMode = \"virtual\" === scrollingMode;\r\n                    var paginate = pagingEnabled || virtualMode || appendMode;\r\n                    var isChanged = false;\r\n                    dataSource.requireTotalCount(!appendMode);\r\n                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n                        dataSource.paginate(paginate);\r\n                        isChanged = true\r\n                    }\r\n                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n                        dataSource.pageSize(pageSize);\r\n                        isChanged = true\r\n                    }\r\n                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n                        dataSource.pageIndex(pageIndex);\r\n                        isChanged = true\r\n                    }\r\n                    return isChanged\r\n                },\r\n                _getSpecificDataSourceOption: function() {\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    if (Array.isArray(dataSource)) {\r\n                        return {\r\n                            store: {\r\n                                type: \"array\",\r\n                                data: dataSource,\r\n                                key: this.option(\"keyExpr\")\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataSource\r\n                },\r\n                _initDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    var oldDataSource = this._dataSource;\r\n                    that.callBase();\r\n                    dataSource = that._dataSource;\r\n                    that._useSortingGroupingFromColumns = true;\r\n                    if (dataSource) {\r\n                        that._setPagingOptions(dataSource);\r\n                        that.setDataSource(dataSource)\r\n                    } else {\r\n                        if (oldDataSource) {\r\n                            that.updateItems()\r\n                        }\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var result = new _deferred.Deferred;\r\n                    (0, _deferred.when)(this._columnsController.refresh(true)).always(function() {\r\n                        if (dataSource) {\r\n                            dataSource.load().done(result.resolve).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    });\r\n                    return result.promise()\r\n                },\r\n                _beforeProcessItems: function(items) {\r\n                    return items.slice(0)\r\n                },\r\n                getRowIndexDelta: function() {\r\n                    return 0\r\n                },\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var changeType = change.changeType;\r\n                    var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n                    var visibleItems = that._items;\r\n                    var dataIndex = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1].dataIndex + 1 : 0;\r\n                    var options = {\r\n                        visibleColumns: visibleColumns,\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    var result = [];\r\n                    (0, _iterator.each)(items, function(index, item) {\r\n                        if (_type2.default.isDefined(item)) {\r\n                            options.rowIndex = index - rowIndexDelta;\r\n                            item = that._processItem(item, options);\r\n                            result.push(item)\r\n                        }\r\n                    });\r\n                    return result\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this._generateDataItem(item, options);\r\n                    item = this._processDataItem(item, options);\r\n                    item.dataIndex = options.dataIndex++;\r\n                    return item\r\n                },\r\n                _generateDataItem: function(data) {\r\n                    return {\r\n                        rowType: \"data\",\r\n                        data: data,\r\n                        key: this.keyOf(data)\r\n                    }\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n                    return dataItem\r\n                },\r\n                generateDataValues: function(data, columns, isModified) {\r\n                    var values = [];\r\n                    var value;\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        var column = columns[i];\r\n                        value = isModified ? void 0 : null;\r\n                        if (!column.command) {\r\n                            if (column.calculateCellValue) {\r\n                                value = column.calculateCellValue(data)\r\n                            } else {\r\n                                if (column.dataField) {\r\n                                    value = data[column.dataField]\r\n                                }\r\n                            }\r\n                        }\r\n                        values.push(value)\r\n                    }\r\n                    return values\r\n                },\r\n                _applyChange: function(change) {\r\n                    var that = this;\r\n                    if (\"update\" === change.changeType) {\r\n                        that._applyChangeUpdate(change)\r\n                    } else {\r\n                        if (that.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n                            that._applyChangesOnly(change)\r\n                        } else {\r\n                            if (\"refresh\" === change.changeType) {\r\n                                that._applyChangeFull(change)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _applyChangeFull: function(change) {\r\n                    this._items = change.items.slice(0)\r\n                },\r\n                _getRowIndices: function(change) {\r\n                    var rowIndices = change.rowIndices.slice(0);\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    rowIndices.sort(function(a, b) {\r\n                        return a - b\r\n                    });\r\n                    for (var i = 0; i < rowIndices.length; i++) {\r\n                        var correctedRowIndex = rowIndices[i];\r\n                        if (change.allowInvisibleRowIndices) {\r\n                            correctedRowIndex += rowIndexDelta\r\n                        }\r\n                        if (correctedRowIndex < 0) {\r\n                            rowIndices.splice(i, 1);\r\n                            i--\r\n                        }\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    var that = this;\r\n                    var items = change.items;\r\n                    var rowIndices = that._getRowIndices(change);\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n                    var prevIndex = -1;\r\n                    var rowIndexCorrection = 0;\r\n                    var changeType;\r\n                    change.items = [];\r\n                    change.rowIndices = [];\r\n                    change.columnIndices = [];\r\n                    change.changeTypes = [];\r\n                    var equalItems = function(item1, item2, strict) {\r\n                        var result = item1 && item2 && (0, _common.equalByValue)(item1.key, item2.key);\r\n                        if (result && strict) {\r\n                            result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n                        }\r\n                        return result\r\n                    };\r\n                    (0, _iterator.each)(rowIndices, function(index, rowIndex) {\r\n                        var columnIndices;\r\n                        rowIndex += rowIndexCorrection + rowIndexDelta;\r\n                        if (prevIndex === rowIndex) {\r\n                            return\r\n                        }\r\n                        prevIndex = rowIndex;\r\n                        var oldItem = that._items[rowIndex];\r\n                        var oldNextItem = that._items[rowIndex + 1];\r\n                        var newItem = items[rowIndex];\r\n                        var newNextItem = items[rowIndex + 1];\r\n                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n                        if (newItem) {\r\n                            newItem.rowIndex = rowIndex;\r\n                            change.items.push(newItem)\r\n                        }\r\n                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem;\r\n                            if (oldItem.visible !== newItem.visible) {\r\n                                change.items.splice(-1, 1, {\r\n                                    visible: newItem.visible\r\n                                })\r\n                            } else {\r\n                                if (repaintChangesOnly && !change.isFullUpdate) {\r\n                                    columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                                changeType = \"insert\";\r\n                                that._items.splice(rowIndex, 0, newItem);\r\n                                rowIndexCorrection++\r\n                            } else {\r\n                                if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                                    changeType = \"remove\";\r\n                                    that._items.splice(rowIndex, 1);\r\n                                    rowIndexCorrection--;\r\n                                    prevIndex = -1\r\n                                } else {\r\n                                    if (newItem) {\r\n                                        changeType = \"update\";\r\n                                        that._items[rowIndex] = newItem\r\n                                    } else {\r\n                                        return\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        change.rowIndices.push(rowIndex - rowIndexDelta);\r\n                        change.changeTypes.push(changeType);\r\n                        change.columnIndices.push(columnIndices)\r\n                    })\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n                        return true\r\n                    }\r\n\r\n                    function isCellModified(row, columnIndex) {\r\n                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n                    }\r\n                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    if (oldItem.rowType === newItem.rowType && \"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                        var columnIndices = [];\r\n                        if (\"detail\" !== newItem.rowType) {\r\n                            for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                                if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                                    columnIndices.push(columnIndex)\r\n                                }\r\n                            }\r\n                        }\r\n                        return columnIndices\r\n                    }\r\n                },\r\n                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n                    if (changedColumnIndices) {\r\n                        oldItem.cells && oldItem.cells.forEach(function(cell, columnIndex) {\r\n                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                            if (!isCellChanged && cell && cell.update) {\r\n                                cell.update(newItem)\r\n                            }\r\n                        });\r\n                        newItem.update = oldItem.update;\r\n                        newItem.watch = oldItem.watch;\r\n                        newItem.cells = oldItem.cells;\r\n                        if (isLiveUpdate) {\r\n                            newItem.oldValues = oldItem.values\r\n                        }\r\n                        oldItem.update && oldItem.update(newItem)\r\n                    }\r\n                    return changedColumnIndices\r\n                },\r\n                _isItemEquals: function(item1, item2) {\r\n                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n                        return false\r\n                    }\r\n                    var compareFields = [\"modified\", \"isNewRow\", \"removed\", \"isEditing\"];\r\n                    if (compareFields.some(function(field) {\r\n                            return item1[field] !== item2[field]\r\n                        })) {\r\n                        return false\r\n                    }\r\n                    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n                        var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n                        var expandedMatch = item1.isExpanded === item2.isExpanded;\r\n                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    var _this = this;\r\n                    var rowIndices = [];\r\n                    var columnIndices = [];\r\n                    var changeTypes = [];\r\n                    var items = [];\r\n                    var newIndexByKey = {};\r\n\r\n                    function getRowKey(row) {\r\n                        if (row) {\r\n                            return row.rowType + \",\" + JSON.stringify(row.key)\r\n                        }\r\n                    }\r\n                    var isItemEquals = function(item1, item2) {\r\n                        if (!_this._isItemEquals(item1, item2)) {\r\n                            return false\r\n                        }\r\n                        if (item1.cells) {\r\n                            item1.update && item1.update(item2);\r\n                            item1.cells.forEach(function(cell) {\r\n                                if (cell && cell.update) {\r\n                                    cell.update(item2)\r\n                                }\r\n                            })\r\n                        }\r\n                        return true\r\n                    };\r\n                    var oldItems = this._items.slice();\r\n                    change.items.forEach(function(item, index) {\r\n                        var key = getRowKey(item);\r\n                        newIndexByKey[key] = index;\r\n                        item.rowIndex = index\r\n                    });\r\n                    var result = (0, _array_compare.findChanges)(oldItems, change.items, getRowKey, isItemEquals);\r\n                    if (!result) {\r\n                        this._applyChangeFull(change);\r\n                        return\r\n                    }\r\n                    result.forEach(function(change) {\r\n                        switch (change.type) {\r\n                            case \"update\":\r\n                                var index = change.index;\r\n                                var newItem = change.data;\r\n                                var oldItem = change.oldItem;\r\n                                var changedColumnIndices = _this._partialUpdateRow(oldItem, newItem, index, true);\r\n                                rowIndices.push(index);\r\n                                changeTypes.push(\"update\");\r\n                                items.push(newItem);\r\n                                _this._items[index] = newItem;\r\n                                columnIndices.push(changedColumnIndices);\r\n                                break;\r\n                            case \"insert\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"insert\");\r\n                                items.push(change.data);\r\n                                columnIndices.push(void 0);\r\n                                _this._items.splice(change.index, 0, change.data);\r\n                                break;\r\n                            case \"remove\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"remove\");\r\n                                _this._items.splice(change.index, 1);\r\n                                items.push(change.oldItem);\r\n                                columnIndices.push(void 0)\r\n                        }\r\n                    });\r\n                    change.repaintChangesOnly = true;\r\n                    change.changeType = \"update\";\r\n                    change.rowIndices = rowIndices;\r\n                    change.columnIndices = columnIndices;\r\n                    change.changeTypes = changeTypes;\r\n                    change.items = items;\r\n                    if (oldItems.length) {\r\n                        change.isLiveUpdate = true\r\n                    }\r\n                    this._correctRowIndices(function(rowIndex) {\r\n                        var oldItem = oldItems[rowIndex];\r\n                        var key = getRowKey(oldItem);\r\n                        var newRowIndex = newIndexByKey[key];\r\n                        return newRowIndex >= 0 ? newRowIndex - rowIndex : 0\r\n                    })\r\n                },\r\n                _correctRowIndices: _common.noop,\r\n                _updateItemsCore: function(change) {\r\n                    var that = this;\r\n                    var items;\r\n                    var dataSource = that._dataSource;\r\n                    var changeType = change.changeType || \"refresh\";\r\n                    change.changeType = changeType;\r\n                    if (dataSource) {\r\n                        items = change.items || dataSource.items();\r\n                        items = that._beforeProcessItems(items);\r\n                        items = that._processItems(items, change);\r\n                        change.items = items;\r\n                        var oldItems = that._items.length === items.length && that._items;\r\n                        that._applyChange(change);\r\n                        var rowIndexDelta = that.getRowIndexDelta();\r\n                        (0, _iterator.each)(that._items, function(index, item) {\r\n                            item.rowIndex = index - rowIndexDelta;\r\n                            if (oldItems) {\r\n                                item.cells = oldItems[index].cells || []\r\n                            }\r\n                        })\r\n                    } else {\r\n                        that._items = []\r\n                    }\r\n                },\r\n                _handleChanging: function(e) {\r\n                    var that = this;\r\n                    var rows = that.getVisibleRows();\r\n                    var dataSource = that.dataSource();\r\n                    if (dataSource) {\r\n                        e.changes.forEach(function(change) {\r\n                            if (\"insert\" === change.type && change.index >= 0) {\r\n                                var dataIndex = 0;\r\n                                for (var i = 0; i < change.index; i++) {\r\n                                    var row = rows[i];\r\n                                    if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                                        dataIndex++\r\n                                    }\r\n                                }\r\n                                change.index = dataIndex\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                updateItems: function(change, isDataChanged) {\r\n                    change = change || {};\r\n                    var that = this;\r\n                    if (void 0 !== that._repaintChangesOnly) {\r\n                        change.repaintChangesOnly = that._repaintChangesOnly\r\n                    } else {\r\n                        if (change.changes) {\r\n                            change.repaintChangesOnly = that.option(\"repaintChangesOnly\")\r\n                        } else {\r\n                            if (isDataChanged) {\r\n                                var operationTypes = that.dataSource().operationTypes();\r\n                                change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && that.option(\"repaintChangesOnly\");\r\n                                change.isDataChanged = true;\r\n                                if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                                    change.needUpdateDimensions = true\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (that._updateLockCount) {\r\n                        that._changes.push(change);\r\n                        return\r\n                    }\r\n                    that._updateItemsCore(change);\r\n                    if (change.cancel) {\r\n                        return\r\n                    }\r\n                    that._fireChanged(change)\r\n                },\r\n                loadingOperationTypes: function() {\r\n                    var dataSource = this.dataSource();\r\n                    return dataSource && dataSource.loadingOperationTypes() || {}\r\n                },\r\n                _fireChanged: function(change) {\r\n                    var that = this;\r\n                    (0, _common.deferRender)(function() {\r\n                        that.changed.fire(change)\r\n                    })\r\n                },\r\n                isLoading: function() {\r\n                    return this._isLoading || this._isCustomLoading\r\n                },\r\n                _fireLoadingChanged: function() {\r\n                    this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n                },\r\n                _calculateAdditionalFilter: function() {\r\n                    return null\r\n                },\r\n                _applyFilter: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        dataSource.pageIndex(0);\r\n                        return that.reload().done(that.pageChanged.fire.bind(that.pageChanged))\r\n                    }\r\n                },\r\n                filter: function filter(filterExpr) {\r\n                    var dataSource = this._dataSource;\r\n                    var filter = dataSource && dataSource.filter();\r\n                    if (0 === arguments.length) {\r\n                        return filter\r\n                    }\r\n                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n                    if (_uiGrid_core4.default.equalFilterParameters(filter, filterExpr)) {\r\n                        return\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource.filter(filterExpr)\r\n                    }\r\n                    this._applyFilter()\r\n                },\r\n                clearFilter: function(filterName) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var clearColumnOption = function(optionName) {\r\n                        var columnCount = columnsController.columnCount();\r\n                        for (var index = 0; index < columnCount; index++) {\r\n                            columnsController.columnOption(index, optionName, void 0)\r\n                        }\r\n                    };\r\n                    that.component.beginUpdate();\r\n                    if (arguments.length > 0) {\r\n                        switch (filterName) {\r\n                            case \"dataSource\":\r\n                                that.filter(null);\r\n                                break;\r\n                            case \"search\":\r\n                                that.searchByText(\"\");\r\n                                break;\r\n                            case \"header\":\r\n                                clearColumnOption(\"filterValues\");\r\n                                break;\r\n                            case \"row\":\r\n                                clearColumnOption(\"filterValue\")\r\n                        }\r\n                    } else {\r\n                        that.filter(null);\r\n                        that.searchByText(\"\");\r\n                        clearColumnOption(\"filterValue\");\r\n                        clearColumnOption(\"bufferedFilterValue\");\r\n                        clearColumnOption(\"filterValues\")\r\n                    }\r\n                    that.component.endUpdate()\r\n                },\r\n                _fireDataSourceChanged: function() {\r\n                    var that = this;\r\n                    var changedHandler = function changedHandler() {\r\n                        that.changed.remove(changedHandler);\r\n                        that.dataSourceChanged.fire()\r\n                    };\r\n                    that.changed.add(changedHandler)\r\n                },\r\n                _getDataSourceAdapter: _common.noop,\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n                    dataSourceAdapter.init(dataSource, remoteOperations);\r\n                    return dataSourceAdapter\r\n                },\r\n                isLocalStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof _array_store2.default\r\n                },\r\n                isCustomStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof _custom_store2.default\r\n                },\r\n                _createDataSourceAdapter: function(dataSource) {\r\n                    var remoteOperations = this.option(\"remoteOperations\");\r\n                    var store = dataSource.store();\r\n                    var enabledRemoteOperations = {\r\n                        filtering: true,\r\n                        sorting: true,\r\n                        paging: true,\r\n                        grouping: true,\r\n                        summary: true\r\n                    };\r\n                    if (remoteOperations && remoteOperations.groupPaging) {\r\n                        remoteOperations = (0, _extend.extend)({}, enabledRemoteOperations, remoteOperations)\r\n                    }\r\n                    if (\"auto\" === remoteOperations) {\r\n                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                            filtering: true,\r\n                            sorting: true,\r\n                            paging: true\r\n                        }\r\n                    }\r\n                    if (true === remoteOperations) {\r\n                        remoteOperations = enabledRemoteOperations\r\n                    }\r\n                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n                },\r\n                setDataSource: function(dataSource) {\r\n                    var that = this;\r\n                    var oldDataSource = that._dataSource;\r\n                    if (!dataSource && oldDataSource) {\r\n                        oldDataSource.cancelAll();\r\n                        oldDataSource.changed.remove(that._dataChangedHandler);\r\n                        oldDataSource.loadingChanged.remove(that._loadingChangedHandler);\r\n                        oldDataSource.loadError.remove(that._loadErrorHandler);\r\n                        oldDataSource.customizeStoreLoadOptions.remove(that._customizeStoreLoadOptionsHandler);\r\n                        oldDataSource.changing.remove(that._changingHandler);\r\n                        oldDataSource.dispose(that._isSharedDataSource)\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource = that._createDataSourceAdapter(dataSource)\r\n                    }\r\n                    that._dataSource = dataSource;\r\n                    if (dataSource) {\r\n                        that._fireDataSourceChanged();\r\n                        that._isLoading = !dataSource.isLoaded();\r\n                        that._needApplyFilter = true;\r\n                        that._isAllDataTypesDefined = that._columnsController.isAllDataTypesDefined();\r\n                        dataSource.changed.add(that._dataChangedHandler);\r\n                        dataSource.loadingChanged.add(that._loadingChangedHandler);\r\n                        dataSource.loadError.add(that._loadErrorHandler);\r\n                        dataSource.customizeStoreLoadOptions.add(that._customizeStoreLoadOptionsHandler);\r\n                        dataSource.changing.add(that._changingHandler)\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return this._items\r\n                },\r\n                isEmpty: function() {\r\n                    return !this.items().length\r\n                },\r\n                pageCount: function() {\r\n                    return this._dataSource ? this._dataSource.pageCount() : 1\r\n                },\r\n                dataSource: function() {\r\n                    return this._dataSource\r\n                },\r\n                store: function() {\r\n                    var dataSource = this._dataSource;\r\n                    return dataSource && dataSource.store()\r\n                },\r\n                loadAll: function(data) {\r\n                    var that = this;\r\n                    var d = new _deferred.Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        if (data) {\r\n                            var options = {\r\n                                data: data,\r\n                                isCustomLoading: true,\r\n                                storeLoadOptions: {\r\n                                    isLoadingAll: true\r\n                                },\r\n                                loadOptions: {\r\n                                    filter: that.getCombinedFilter(),\r\n                                    group: dataSource.group(),\r\n                                    sort: dataSource.sort()\r\n                                }\r\n                            };\r\n                            dataSource._handleDataLoaded(options);\r\n                            (0, _deferred.when)(options.data).done(function(data) {\r\n                                data = that._beforeProcessItems(data);\r\n                                d.resolve(that._processItems(data, {\r\n                                    changeType: \"loadingAll\"\r\n                                }), options.extra && options.extra.summary)\r\n                            }).fail(d.reject)\r\n                        } else {\r\n                            if (!dataSource.isLoading()) {\r\n                                var loadOptions = (0, _extend.extend)({}, dataSource.loadOptions(), {\r\n                                    isLoadingAll: true,\r\n                                    requireTotalCount: false\r\n                                });\r\n                                dataSource.load(loadOptions).done(function(items, extra) {\r\n                                    items = that._beforeProcessItems(items);\r\n                                    items = that._processItems(items, {\r\n                                        changeType: \"loadingAll\"\r\n                                    });\r\n                                    d.resolve(items, extra && extra.summary)\r\n                                }).fail(d.reject)\r\n                            } else {\r\n                                d.reject()\r\n                            }\r\n                        }\r\n                    } else {\r\n                        d.resolve([])\r\n                    }\r\n                    return d\r\n                },\r\n                getKeyByRowIndex: function(rowIndex) {\r\n                    var item = this.items()[rowIndex];\r\n                    if (item) {\r\n                        return item.key\r\n                    }\r\n                },\r\n                getRowIndexByKey: function(key) {\r\n                    return _uiGrid_core4.default.getIndexByKey(key, this.items())\r\n                },\r\n                keyOf: function(data) {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.keyOf(data)\r\n                    }\r\n                },\r\n                byKey: function(key) {\r\n                    var store = this.store();\r\n                    var rowIndex = this.getRowIndexByKey(key);\r\n                    var result;\r\n                    if (!store) {\r\n                        return\r\n                    }\r\n                    if (rowIndex >= 0) {\r\n                        result = (new _deferred.Deferred).resolve(this.items()[rowIndex].data)\r\n                    }\r\n                    return result || store.byKey(key)\r\n                },\r\n                key: function() {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.key()\r\n                    }\r\n                },\r\n                getRowIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                getDataByKeys: function(rowKeys) {\r\n                    var that = this;\r\n                    var result = new _deferred.Deferred;\r\n                    var deferreds = [];\r\n                    var data = [];\r\n                    (0, _iterator.each)(rowKeys, function(index, key) {\r\n                        deferreds.push(that.byKey(key).done(function(keyData) {\r\n                            data[index] = keyData\r\n                        }))\r\n                    });\r\n                    _deferred.when.apply(_renderer2.default, deferreds).always(function() {\r\n                        result.resolve(data)\r\n                    });\r\n                    return result\r\n                },\r\n                pageIndex: function(value) {\r\n                    return changePaging(this, \"pageIndex\", value)\r\n                },\r\n                pageSize: function(value) {\r\n                    return changePaging(this, \"pageSize\", value)\r\n                },\r\n                beginCustomLoading: function(messageText) {\r\n                    this._isCustomLoading = true;\r\n                    this._loadingText = messageText || \"\";\r\n                    this._fireLoadingChanged()\r\n                },\r\n                endCustomLoading: function() {\r\n                    this._isCustomLoading = false;\r\n                    this._loadingText = void 0;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                refresh: function(options) {\r\n                    if (true === options) {\r\n                        options = {\r\n                            reload: true,\r\n                            changesOnly: true\r\n                        }\r\n                    } else {\r\n                        if (!options) {\r\n                            options = {\r\n                                lookup: true,\r\n                                selection: true,\r\n                                reload: true\r\n                            }\r\n                        }\r\n                    }\r\n                    var that = this;\r\n                    var dataSource = that.getDataSource();\r\n                    var changesOnly = options.changesOnly;\r\n                    var d = new _deferred.Deferred;\r\n                    var customizeLoadResult = function() {\r\n                        that._repaintChangesOnly = !!changesOnly\r\n                    };\r\n                    (0, _deferred.when)(!options.lookup || that._columnsController.refresh()).always(function() {\r\n                        if (options.load || options.reload) {\r\n                            dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                            (0, _deferred.when)(that.reload(options.reload, changesOnly)).always(function() {\r\n                                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                                that._repaintChangesOnly = void 0\r\n                            }).done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            that.updateItems({\r\n                                repaintChangesOnly: options.changesOnly\r\n                            });\r\n                            d.resolve()\r\n                        }\r\n                    });\r\n                    return d.promise()\r\n                },\r\n                getVisibleRows: function() {\r\n                    return this.items()\r\n                },\r\n                _disposeDataSource: function() {\r\n                    this.setDataSource(null)\r\n                },\r\n                dispose: function() {\r\n                    this._disposeDataSource();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function(rowIndexes, changesOnly) {\r\n                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n                    if (rowIndexes.length > 1 || _type2.default.isDefined(rowIndexes[0])) {\r\n                        this.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndexes,\r\n                            isFullUpdate: !changesOnly\r\n                        })\r\n                    }\r\n                },\r\n                skipProcessingPagingChange: function(fullName) {\r\n                    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n                },\r\n                getUserState: function() {\r\n                    return {\r\n                        searchText: this.option(\"searchPanel.text\"),\r\n                        pageIndex: this.pageIndex(),\r\n                        pageSize: this.pageSize()\r\n                    }\r\n                },\r\n                getCachedStoreData: function() {\r\n                    return this._dataSource && this._dataSource.getCachedStoreData()\r\n                }\r\n            };\r\n            _uiGrid_core4.default.proxyMethod(members, \"load\");\r\n            _uiGrid_core4.default.proxyMethod(members, \"reload\");\r\n            _uiGrid_core4.default.proxyMethod(members, \"push\");\r\n            _uiGrid_core4.default.proxyMethod(members, \"itemsCount\", 0);\r\n            _uiGrid_core4.default.proxyMethod(members, \"totalItemsCount\", 0);\r\n            _uiGrid_core4.default.proxyMethod(members, \"hasKnownLastPage\", true);\r\n            _uiGrid_core4.default.proxyMethod(members, \"isLoaded\", true);\r\n            _uiGrid_core4.default.proxyMethod(members, \"totalCount\", 0);\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"script"}