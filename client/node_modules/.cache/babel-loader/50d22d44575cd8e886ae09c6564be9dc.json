{"ast":null,"code":"var _jsxFileName = \"/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/src/components/Weather/Forecast.js\";\nimport React, { useState } from \"react\";\nimport Conditions from \"./Conditions\";\nimport classes from \"./Forecast.module.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Card } from \"react-bootstrap\";\nconsole.log(process.env.REACT_APP_API_KEY);\n\nfunction Forecast() {\n  const [city, setCity] = useState(\"\");\n  const [unit, setUnit] = useState(\"imperial\");\n  const [responseObj, setResponseObj] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    } // Clear state in preparation for new data\n\n\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n    fetch( // Current Forecast\n    `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`, // `https://community-open-weather-map.p.rapidapi.com/forecast?q=${uriEncodedCity}`,\n    {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n        \"x-rapidapi-key\": process.env.REACT_APP_API_KEY\n      }\n    }).then(response => response.json()).then(response => {\n      console.log(response);\n\n      if (response.cod !== 200) {\n        throw new Error();\n      }\n\n      setResponseObj(response);\n      setLoading(false);\n    }).catch(err => {\n      setError(true);\n      setLoading(false);\n      console.log(err.message);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.forecastApp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    responsive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Card.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Card.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, \"Find Current Weather\"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: getForecast,\n    className: classes.forecastForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Enter City\",\n    maxLength: \"50\",\n    className: classes.forecastTextInput,\n    value: city,\n    onChange: e => setCity(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"imperial\",\n    value: \"imperial\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }), \"Fahrenheit\"), /*#__PURE__*/React.createElement(\"label\", {\n    className: classes.Radio,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"radio\",\n    name: \"units\",\n    checked: unit === \"metric\",\n    value: \"metric\",\n    onChange: e => setUnit(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }), \"Celcius\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.forecastButton,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Get Forecast\")), /*#__PURE__*/React.createElement(Conditions, {\n    responseObj: responseObj,\n    error: error,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default Forecast;","map":{"version":3,"sources":["/Users/tracyvy/Desktop/UCB_Coding_Bootcamp/project_3/calendar/client/src/components/Weather/Forecast.js"],"names":["React","useState","Conditions","classes","Card","console","log","process","env","REACT_APP_API_KEY","Forecast","city","setCity","unit","setUnit","responseObj","setResponseObj","error","setError","loading","setLoading","uriEncodedCity","encodeURIComponent","getForecast","e","preventDefault","length","fetch","method","headers","then","response","json","cod","Error","catch","err","message","forecastApp","forecastForm","forecastTextInput","target","value","Radio","forecastButton"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Conditions from \"./Conditions\";\nimport classes from \"./Forecast.module.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Card } from \"react-bootstrap\";\n\nconsole.log(process.env.REACT_APP_API_KEY);\n\nfunction Forecast() {\n  const [city, setCity] = useState(\"\");\n  const [unit, setUnit] = useState(\"imperial\");\n  const [responseObj, setResponseObj] = useState({});\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const uriEncodedCity = encodeURIComponent(city);\n\n  function getForecast(e) {\n    e.preventDefault();\n\n    if (city.length === 0) {\n      return setError(true);\n    }\n\n    // Clear state in preparation for new data\n    setError(false);\n    setResponseObj({});\n    setLoading(true);\n\n    fetch(\n      // Current Forecast\n      `https://community-open-weather-map.p.rapidapi.com/weather?units=${unit}&q=${uriEncodedCity}`,\n      // `https://community-open-weather-map.p.rapidapi.com/forecast?q=${uriEncodedCity}`,\n      {\n        method: \"GET\",\n        headers: {\n          \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_API_KEY,\n        },\n      }\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        console.log(response);\n        if (response.cod !== 200) {\n          throw new Error();\n        }\n        setResponseObj(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        setError(true);\n        setLoading(false);\n        console.log(err.message);\n      });\n  }\n\n  return (\n    <div className={classes.forecastApp}>\n      <Card responsive>\n        <Card.Body>\n          <Card.Title>Find Current Weather</Card.Title>\n\n          <form onSubmit={getForecast} className={classes.forecastForm}>\n            <input\n              type=\"text\"\n              placeholder=\"Enter City\"\n              maxLength=\"50\"\n              className={classes.forecastTextInput}\n              value={city}\n              onChange={(e) => setCity(e.target.value)}\n            />\n            <label className={classes.Radio}>\n              <input\n                type=\"radio\"\n                name=\"units\"\n                checked={unit === \"imperial\"}\n                value=\"imperial\"\n                onChange={(e) => setUnit(e.target.value)}\n              />\n              Fahrenheit\n            </label>\n            <label className={classes.Radio}>\n              <input\n                type=\"radio\"\n                name=\"units\"\n                checked={unit === \"metric\"}\n                value=\"metric\"\n                onChange={(e) => setUnit(e.target.value)}\n              />\n              Celcius\n            </label>\n\n            <button className={classes.forecastButton} type=\"submit\">\n              Get Forecast\n            </button>\n          </form>\n\n          <Conditions\n            responseObj={responseObj}\n            error={error}\n            loading={loading}\n          />\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}